#!/bin/bash
###############################################################################
#                                                                             #
#     Copyright (C) 2015 Team KODI (Alwin Esch)                               #
#     http://kodi.tv                                                          #
#                                                                             #
#  This program is free software: you can redistribute it and/or modify       #
#  it under the terms of the GNU General Public License as published by       #
#  the Free Software Foundation, either version 3 of the License, or          #
#  (at your option) any later version.                                        #
#                                                                             #
#  This program is distributed in the hope that it will be useful,            #
#  but WITHOUT ANY WARRANTY; without even the implied warranty of             #
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              #
#  GNU General Public License for more details.                               #
#                                                                             #
#  You should have received a copy of the GNU General Public License          #
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.      #
#                                                                             #
###############################################################################

DIST=`grep DISTRIB_ID /etc/*-release | awk -F '=' '{print $2}'`
BASE_PATH=$(cd $(dirname $0) ; pwd -P)
PATH="$BASE_PATH/tools:$PATH"

. $BASE_PATH/versions
. $BASE_PATH/tools/tool_functions

##
# Default configurations
MUPEL_VERSION=
INSTALL_PREFIX=$HOME/.mupel

USE_LINUX_X86_32="FALSE"
USE_LINUX_X86_64="FALSE"
USE_LINUX_RPBI="FALSE"
USE_MS_WINDOWS_32="FALSE"
USE_MS_WINDOWS_64="FALSE"
USE_MAC_OS_X_64="FALSE"
USE_ANDROID_ARM="FALSE"
USE_ANDROID_X86="FALSE"
USE_IOS="FALSE"

RELEASE_BUILD=0
DEBUG_BUILD=0
SYSTEM_BITS=64

KODI_SOURCE_URL=""
KODI_SOURCE_URL_INACTIVE=""
KODI_SOURCE_URL_BASE=$KODI_SOURCE_DEFAULT_URL_BASE
KODI_SOURCE_BRANCH=$KODI_SOURCE_DEFAULT_BRANCH
KODI_SOURCE_USE_BASE="FALSE"
KODI_RUN_TESTS="FALSE"
KODI_CONF_IN_DIRECT_BUILD="FALSE"
KODI_DEP_CLEAN="FALSE"
KODI_SEL_ADDON=""
CEF_SOURCE_URL=$CEF_SOURCE_DEFAULT_URL
CEF_SOURCE_URL_INACTIVE=""
CEF_SOURCE_URL_BASE=$CEF_SOURCE_URL_BASE
CEF_SOURCE_BRANCH=$CEF_SOURCE_DEFAULT_BRANCH
CEF_SOURCE_USE_BASE="FALSE"
CEF_DEBUG="FALSE"
CEF_FORCE_UPDATE="FALSE"
CEF_NO_UPDATE="FALSE"
CEF_FORCE_CONFIG="FALSE"
CEF_FORCE_CLEAN="FALSE"
CEF_FORCE_CLEAN_DEPS="FALSE"
CEF_BUILD_TESTS="FALSE"
CEF_VERBOSE_BUILD="FALSE"
DEPOT_TOOLS_URL=""

INCLUDE_KODI="TRUE"
INCLUDE_KODI_ADDONS="FALSE"
INCLUDE_CEF="FALSE"
INCLUDE_USER_SCRIPT="FALSE"
DISABLE_GIT_UPDATE="FALSE"

USE_GUI_DEBUG="TRUE"

ANDROID_SEL_AVD_ARM=
ANDROID_SEL_AVD_x86=

SUPPORT_CEF="FALSE"

CPU_PROC_JOBS=8

ADD_PATHS=""
DO_CLEAN=0 #<TODO
WAIT_TIMEOUT=30;
OS_START_TIMEOUT=90;
REQUEST_UPDATE_TIMEOUT=1800 # 30 minutes

INCLUDE_OPEN_PULL_REQUESTS=FALSE
NO_WARNING_ON_FAIL=FALSE

NET_CONNECTION=eth0 #<TODO

##
# Set defaults
[ ! -d "$BASE_PATH/build" ] && mkdir "$BASE_PATH/build"
if [ ! -f "$HOME/.mupel/mupel.conf" ];then
{
  bash mupel-install
  ret=$?
  if [[ $ret != 0 ]];then
  {
    exit $ret
  } fi
} fi

. "$HOME/.mupel/mupel.conf";

if [ ! -f "$BASE_PATH/versions" ];then
{
  showWarningDialog "\
The needed CEF binary version file for Kodi is not present and normally included in Mupel package!
Please fix, for the moment becomes 'undefined' used as version.

It must be on file in '$BASE_PATH/versions'!
"
  CEF_KODI_BINARY_VERSION="undefined"
}
else
  . "$BASE_PATH/versions";fi

PATH="$ADD_PATHS:$PATH";

# General control is's
GEN__BTN______START_BUILD_ALL=0
GEN__BTN_______STOP_BUILD_ALL=1
GEN__BTN____CREATE_INST_MUPEL=2
GEN__BTN______DOWNLOAD_UPDATE=3
GEN__BTN______________DUMMY_3=4
GEN__BTN______________DUMMY_4=5
GEN__BTN____DEL_OLD_LOG_FILES=6
GEN__BTN____________CLEAR_LOG=7
GEN_____________________SEP__=8
GEN__CHK_________INCLUDE_KODI=9
GEN__CHK__INCLUDE_KODI_ADDONS=10
GEN__CHK__________INCLUDE_CEF=11
GEN__CHK___DISABLE_GIT_UPDATE=12
GEN__BTN______________DUMMY_2=13
GEN__TERMPROC_______BUILD_LOG=14

# git control id's
GIT_KODI______________LABEL__=0
GIT_KODI________LIST_REQ__OWN=1
GIT_KODI_______LIST_REQ__BASE=2
GIT_KODI____CREATE_NEW_BRANCH=3
GIT_KODI______PREPARE_PATCHES=4
GIT_KODI___ADD_COMMIT_CHANGES=5
GIT_CEF_________________SEP__=6
GIT_CEF_______________LABEL__=7
GIT_CEF_________LIST_REQ__OWN=8
GIT_CEF________LIST_REQ__BASE=9
GIT_CEF_____CREATE_NEW_BRANCH=10
GIT_CEF_______PREPARE_PATCHES=11
GIT_CEF____ADD_COMMIT_CHANGES=12
GIT_____________________SEP__=13
GIT___________________LABEL__=14
GIT______________SHOW_SSH_KEY=15

# Build control id's
BUILD__BTN_____BUILD_COMPLETE=0
BUILD__BTN__BUILD_KODI_DIRECT=1
BUILD__BTN___BUILD_CEF_DIRECT=2
BUILD__BTN___BUILD_CEF_DIRECT=2
BUILD__BTN_UPDATE_BINARY_DIST=3
BUILD__BTN____BUILD_SEL_ADDON=4
BUILD__BTN_________STOP_BUILD=5
BUILD__BTN__________CLEAR_LOG=6
BUILD__BTN_____OPEN_LAST_LOGS=7
BUILD__BTN________LAUNCH_KODI=8
BUILD__BTN___________DEBUGGER=9
BUILD__BTN___FORCE_BUILD_STEP=10
BUILD__BTN_PERF_CODE_DEPCLEAN=11
BUILD__CB______________ADD_ON=12
BUILD__TERMPROC_____BUILD_LOG=14

# Setting control id's
SET_LINUX_______________SEP__=0
SET_LINUX_____________LABEL__=1
SET_LINUX_____USED_LINUX_DIST=2
SET_LINUX_____OPEN_DIST_CONTR=3
SET_LINUX_______USE_GUI_DEBUG=4
SET_LINUX__________BUILD_TYPE=5
SET_WINDOWS_____________SEP__=6
SET_WINDOWS___________LABEL__=7
SET_WINDOWS____________TARGET=8
SET_WINDOWS_________INSTALLER=9
SET_WINDOWS________BUILD_TYPE=10
SET_WINDOWS______SSH_USERNAME=11
SET_WINDOWS______SSH_PASSWORD=12
SET_WINDOWS______OPEN_CONTROL=13
SET_WINDOWS_____________START=14
SET_WINDOWS________SSH_ACCESS=15
SET_WINDOWS____________SSH_IP=16
SET_WINDOWS__________SSH_PORT=17
SET_MAC_________________SEP__=18
SET_MAC_______________LABEL__=19
SET_MAC________________TARGET=20
SET_MAC_____________INSTALLER=21
SET_MAC__________OPEN_CONTROL=22
SET_MAC_________________START=23
SET_MAC____________SSH_ACCESS=24
SET_MAC__________SSH_USERNAME=25
SET_MAC__________SSH_PASSWORD=26
SET_MAC________________SSH_IP=27
SET_MAC______________SSH_PORT=28
SET_ANDROID_____________SEP__=29
SET_ANDROID___________LABEL__=30
SET_ANDROID________BUILD_TYPE=31
SET_ANDROID__BUILD_SYS_TARGET=32
SET_ANDROID_________INSTALLER=33
SET_ANDROID____ARM_EMU_SOURCE=34
SET_ANDROID____x86_EMU_SOURCE=35
SET_ANDROID_VIRT_DISK_MANAGER=36
SET_ANDROID_____OPEN_X86_DISK=37
SET_ANDROID_______AVD_MANAGER=38

# Setting control id's 2
SET_2_VAR_________________SEP__=0
SET_2_VAR_______________LABEL__=1
SET_2_VAR_________CPU_PROC_JOBS=2
SET_2_VAR____EMU_INSTALL_PREFIX=3
SET_2_VAR_INCLUDE_OPEN_REQUESTS=4
SET_2_VAR____NO_WARNING_ON_FAIL=5
SET_2_KODI________________SEP__=6
SET_2_KODI______________LABEL__=7
SET_2_KODI________SOURCE_REPOSI=8
SET_2_KODI__________SOURCE_BASE=9
SET_2_KODI________SOURCE_BRANCH=10
SET_2_KODI____________RUN_TESTS=11
SET_2_KODI_CONF_IN_DIRECT_BUILD=12
SET_2_KODI____________DEP_CLEAN=13
SET_2_CEF_________________SEP__=14
SET_2_CEF_______________LABEL__=15
SET_2_CEF_________SOURCE_REPOSI=16
SET_2_CEF___________SOURCE_BASE=17
SET_2_CEF_________SOURCE_BRANCH=18
SET_2_CEF_________________DEBUG=19
SET_2_CEF__________FORCE_UPDATE=20
SET_2_CEF_____________NO_UPDATE=21
SET_2_CEF__________FORCE_CONFIG=22
SET_2_CEF___________FORCE_CLEAN=23
SET_2_CEF______FORCE_CLEAN_DEPS=24
SET_2_CEF___________BUILD_TESTS=25
SET_2_CEF_________VERBOSE_BUILD=26

###############################################################################
# Functions
{

function loadGitBranches
{
  local load_url=$1
  local selected_branch=$2
  local repo_path=$3

  local git_entries=$(git ls-remote "$load_url")
  ret=$?
  if [[ $ret = 0 ]];then
  {
    git_entries=$(echo "$git_entries" | grep "refs/heads" | awk -F '/' '{print $3}')

    local targets=
    local last=""
    for i in $git_entries; do
    {
      if [ ! -z $last ];then
        targets+="!";fi
      last=$i
      if [[ $i == $selected_branch ]];then
        targets+="^";fi
      targets+="$i"
    } done
    targets+="!"

    IFS_BU=$IFS;
    IFS=$'\n'
    if [[ $INCLUDE_OPEN_PULL_REQUESTS = TRUE ]];then
    {
      local git_requests=$(git -C $repo_path pulls list | tail -n +2)
      for r in $git_requests; do
      {
        targets+="refs/pull/$(echo $r | awk -F ' ' '{print $1}')/head!"
      } done
    } fi
    set IFS=$IFS_BU

    echo "$targets"
    return 0;
  }
  else
  {
    handleErrorsCodes $ret "git" "$load_url";
    return 1;
  } fi
}

function parse_values
{
  local field=$1
  local id=$2
  local value="$3"
  local git_entries;
  local targets;

  loadConfigFile noOutLock:

  if [ "$field" = "general" ];then
  {
    if [[ $id = $GEN__CHK_________INCLUDE_KODI ]];then # handle 'Include Kodi' change
      INCLUDE_KODI=${value%|};
    elif [[ $id = $GEN__CHK__INCLUDE_KODI_ADDONS ]];then # handle 'Include Kodi add-ons' change
      INCLUDE_KODI_ADDONS=${value%|};
    elif [[ $id = $GEN__CHK__________INCLUDE_CEF ]];then # handle 'Include CEF' change
      INCLUDE_CEF=${value%|}
    elif [[ $id = $GEN__CHK___DISABLE_GIT_UPDATE ]];then
      DISABLE_GIT_UPDATE=${value%|};fi
  }
  elif [ "$field" = "add-ons" ];then
  {
    if [ -f $BASE_PATH/build/kodi-$GIT_USER/kodi/project/cmake/addons/bootstrap/repositories/binary-addons.txt ];then
    {
      if [ ! -d $BASE_PATH/build/kodi-$GIT_USER/kodi-repo-binary-addons ];then
      {
        local url=$(cat $BASE_PATH/build/kodi-$GIT_USER/kodi/project/cmake/addons/bootstrap/repositories/binary-addons.txt | awk -F ' ' '{print $2}');
        local branch=$(cat $BASE_PATH/build/kodi-$GIT_USER/kodi/project/cmake/addons/bootstrap/repositories/binary-addons.txt | awk -F ' ' '{print $3}');
        handleGITLoad $BASE_PATH/build/kodi-$GIT_USER kodi-repo-binary-addons $url $branch
      } fi
      addon_entries=$(cd $BASE_PATH/build/kodi-$GIT_USER/kodi-repo-binary-addons; ls -d */ | sed 's|[/]||g');
    }
    else
      addon_entries=$(ls -1 $BASE_PATH/build/kodi-$GIT_USER/kodi/project/cmake/addons/addons);fi
    targets=
    last=""
    for i in $addon_entries; do
    {
      if [ ! -z $last ];then
        targets+="!";fi
      last=$i
      if [[ $i == $KODI_SEL_ADDON ]];then
        targets+="^";fi
      targets+="$i"
    } done
    targets+="!"

    echo "#> msg field $BUILD__CB______________ADD_ON:set ${targets};"
  }
  elif [ "$field" = "settings2" ];then
  {
    #####
    # Kodi
    if [[ $id = 6 ]] || [[ $id = $SET_2_KODI________SOURCE_REPOSI ]];then
    { # handle 'kodi git url' change
      echo "#> msg field $SET_2_KODI________SOURCE_BRANCH:enable 0;"

      local targets=$(loadGitBranches ${value%|} $KODI_SOURCE_BRANCH $BASE_PATH/build/kodi-$GIT_USER/kodi);
      if [ $? = 0 ];then
      {
        KODI_SOURCE_URL=${value%|};
        [[ $id != $SET_2_KODI________SOURCE_REPOSI ]] && echo "#> msg field $SET_2_KODI________SOURCE_REPOSI:set ${KODI_SOURCE_URL};";
        echo "#> msg field $SET_2_KODI________SOURCE_BRANCH:set ${targets};";
        echo "#> msg field $SET_2_KODI________SOURCE_BRANCH:enable 1;";
      } fi
      echo "#> msg field $SET_2_KODI________SOURCE_REPOSI:enable $([ $KODI_SOURCE_USE_BASE = "TRUE" ] && echo 0 || echo 1);";
    }
    elif [[ $id = $SET_2_KODI__________SOURCE_BASE ]];then
    {
      echo "#> msg field $SET_2_KODI________SOURCE_BRANCH:enable 0;"

      KODI_SOURCE_USE_BASE=${value%|}
      KODI_SOURCE_USE_BASE=${KODI_SOURCE_USE_BASE:-FALSE}
      if [ $KODI_SOURCE_USE_BASE = "TRUE" ];then
      {
        KODI_SOURCE_URL_INACTIVE=$KODI_SOURCE_URL
        KODI_SOURCE_URL=${KODI_SOURCE_URL_BASE:-KODI_SOURCE_DEFAULT_URL_BASE};
        GIT_USER=$(echo $KODI_SOURCE_URL | tr ':' '/' | awk -F ''.com/'|'.org/'' '{print $2}' | awk -F '/' '{print $1}');
      }
      else
      {
        KODI_SOURCE_URL=$KODI_SOURCE_URL_INACTIVE
      } fi

      local targets=$(loadGitBranches $KODI_SOURCE_URL $KODI_SOURCE_BRANCH $BASE_PATH/build/kodi-xbmc/kodi);
      if [ $? = 0 ];then
      {
        echo "#> msg field $SET_2_KODI________SOURCE_REPOSI:set ${KODI_SOURCE_URL};";
        echo "#> msg field $SET_2_KODI________SOURCE_BRANCH:set ${targets};";
        echo "#> msg field $SET_2_KODI________SOURCE_BRANCH:enable 1;";
      } fi

      echo "#> msg field $SET_2_KODI________SOURCE_REPOSI:enable $([[ $KODI_SOURCE_USE_BASE = "TRUE" ]] && echo 0 || echo 1);";
    }
    elif [[ $id = $SET_2_KODI________SOURCE_BRANCH ]];then
    {
      # Trigger for update
      if [[ $KODI_SOURCE_BRANCH != ${value%|} ]] && [[ ${value%|} = "refs/pull"* ]];then
      {
        $BASE_PATH/tools/send-button-msg checkoutRequest $BASE_PATH/build/kodi-$GIT_USER/kodi $(echo ${value%|} | awk -F '/' '{print $3}')
      }
      else
      {
        git -C $BASE_PATH/build/kodi-$GIT_USER/kodi checkout ${value%|} -f
      } fi
      KODI_SOURCE_BRANCH=${value%|}
      KODI_SOURCE_BRANCH=${KODI_SOURCE_BRANCH:-KODI_SOURCE_DEFAULT_BRANCH}
    }
    elif [[ $id = $SET_2_KODI____________RUN_TESTS ]];then
    {
      KODI_RUN_TESTS=${value%|}
    }
    elif [[ $id = $SET_2_KODI_CONF_IN_DIRECT_BUILD ]];then
    {
      KODI_CONF_IN_DIRECT_BUILD=${value%|}
    }
    elif [[ $id = $SET_2_KODI____________DEP_CLEAN ]];then
    {
      KODI_DEP_CLEAN=${value%|}
    }
    #####
    # CEF
    elif [[ $id = 14 ]] || [[ $id = $SET_2_CEF_________SOURCE_REPOSI ]];then
    {  # handle 'cef git url' change
      echo "#> msg field $SET_2_CEF_________SOURCE_BRANCH:enable 0;"

      local targets=$(loadGitBranches ${value%|} $CEF_SOURCE_BRANCH $BASE_PATH/build/cef-$GIT_CEF_USER/cef);
      if [ $? = 0 ];then
      {
        CEF_SOURCE_URL=${value%|};
        [[ $id != $SET_2_CEF_________SOURCE_REPOSI ]] && echo "#> msg field $SET_2_CEF_________SOURCE_REPOSI:set ${CEF_SOURCE_URL};";
        echo "#> msg field $SET_2_CEF_________SOURCE_BRANCH:set ${targets};";
        echo "#> msg field $SET_2_CEF_________SOURCE_BRANCH:enable 1;"
      } fi
      echo "#> msg field $SET_2_CEF_________SOURCE_REPOSI:enable $([ $CEF_SOURCE_USE_BASE = "TRUE" ] && echo 0 || echo 1);";
    }
    elif [[ $id = $SET_2_CEF___________SOURCE_BASE ]];then
    {
      echo "#> msg field $SET_2_CEF_________SOURCE_BRANCH:enable 0;"

      CEF_SOURCE_USE_BASE=${value%|}
      if [[ $CEF_SOURCE_USE_BASE = "TRUE" ]];then
      {
        CEF_SOURCE_URL_INACTIVE=$CEF_SOURCE_URL
        CEF_SOURCE_URL=$CEF_SOURCE_URL_BASE
        GIT_CEF_USER=$(echo $CEF_SOURCE_URL | tr ':' '/' | awk -F ''.com/'|'.org/'' '{print $2}' | awk -F '/' '{print $1}');
      }
      else
      {
        CEF_SOURCE_URL=$CEF_SOURCE_URL_INACTIVE
      } fi

      local targets=$(loadGitBranches $CEF_SOURCE_URL $CEF_SOURCE_BRANCH $BASE_PATH/build/cef-chromiumembedded/cef);
      if [ $? = 0 ];then
      {
        echo "#> msg field $SET_2_CEF_________SOURCE_REPOSI:set ${CEF_SOURCE_URL};"
        echo "#> msg field $SET_2_CEF_________SOURCE_REPOSI:set ${CEF_SOURCE_URL};";
        echo "#> msg field $SET_2_CEF_________SOURCE_BRANCH:set ${targets};";
        echo "#> msg field $SET_2_CEF_________SOURCE_BRANCH:enable 1;"
      } fi

      echo "#> msg field $SET_2_CEF_________SOURCE_REPOSI:enable $([[ $CEF_SOURCE_USE_BASE = "TRUE" ]] && echo 0 || echo 1);";
    }
    elif [[ $id = $SET_2_CEF_________SOURCE_BRANCH ]];then
    {
      # Trigger for update
      if [[ $CEF_SOURCE_BRANCH != ${value%|} ]] && [[ ${value%|} = "refs/pull"* ]];then
      {
        $BASE_PATH/tools/send-button-msg checkoutRequest $BASE_PATH/build/cef-$GIT_CEF_USER/cef $(echo ${value%|} | awk -F '/' '{print $3}')
      }
      else
      {
        git -C $BASE_PATH/build/cef-$GIT_CEF_USER/cef checkout ${value%|} -f
      } fi
      CEF_SOURCE_BRANCH=${value%|}
      CEF_SOURCE_BRANCH=${CEF_SOURCE_BRANCH:-CEF_SOURCE_DEFAULT_BRANCH}
    }
    elif [[ $id = $SET_2_CEF_________________DEBUG ]];then
    {
      CEF_DEBUG=${value%|}
    }
    elif [[ $id = $SET_2_CEF__________FORCE_UPDATE ]];then
    {
      CEF_FORCE_UPDATE=${value%|}
    }
    elif [[ $id = $SET_2_CEF_____________NO_UPDATE ]];then
    {
      CEF_NO_UPDATE=${value%|}
    }
    elif [[ $id = $SET_2_CEF__________FORCE_CONFIG ]];then
    {
      CEF_FORCE_CONFIG=${value%|}
    }
    elif [[ $id = $SET_2_CEF___________FORCE_CLEAN ]];then
    {
      CEF_FORCE_CLEAN=${value%|}
    }
    elif [[ $id = $SET_2_CEF______FORCE_CLEAN_DEPS ]];then
    {
      CEF_FORCE_CLEAN_DEPS=${value%|}
    }
    elif [[ $id = $SET_2_CEF___________BUILD_TESTS ]];then
    {
      CEF_BUILD_TESTS=${value%|}
    }
    elif [[ $id = $SET_2_CEF_________VERBOSE_BUILD ]];then
    {
      CEF_VERBOSE_BUILD=${value%|}
    }
    #####
    # General
    elif [[ $id = $SET_2_VAR_________CPU_PROC_JOBS ]];then
    {
      value=${value%|}
      [ -z $value ] && value=8;
      CPU_PROC_JOBS=${value%,000000}
    }
    elif [[ $id = $SET_2_VAR____EMU_INSTALL_PREFIX ]];then
    {
      value=${value%|}
      EMU_INSTALL_PREFIX=${value:-$INSTALL_PREFIX/systems}
      echo "#> msg field $SET_MAC________________TARGET:set $(getMacOSXTargets x86);" >> $thread9_in;
      echo "#> msg field $SET_WINDOWS____________TARGET:set $(getWindowsTargets x86);" >> $thread9_in;
    }
    elif [[ $id = $SET_2_VAR_INCLUDE_OPEN_REQUESTS ]];then
    {
      INCLUDE_OPEN_PULL_REQUESTS=${value%|}
      echo "#> msg field $SET_2_KODI________SOURCE_REPOSI:set ${KODI_SOURCE_URL};";
      echo "#> msg field $SET_2_CEF_________SOURCE_REPOSI:set ${CEF_SOURCE_URL};";
    }
    elif [[ $id = $SET_2_VAR____NO_WARNING_ON_FAIL ]];then
    {
      NO_WARNING_ON_FAIL=${value%|:-FALSE}
    } fi
  }
  elif [ "$field" = "settings" ];then
  {
    IFS_BU=$IFS
    unset IFS

    #####
    # Linux
    if [[ $id = $SET_LINUX_____USED_LINUX_DIST ]];then
    {
      USE_LINUX_X86_DISTR=${value%|}
      export USE_LINUX_X86_DISTR
    }
    elif [[ $id = $SET_LINUX_____OPEN_DIST_CONTR ]];then
    {
      echo "$id unused here"
    }
    elif [[ $id = $SET_LINUX_______USE_GUI_DEBUG ]];then
    {
      USE_GUI_DEBUG=${value%|:-TRUE}
    }
    elif [[ $id = $SET_LINUX__________BUILD_TYPE ]];then
    {
      LINUX_BUILD_TYPE=${value%|}
      export LINUX_BUILD_TYPE;
    }
    #####
    # MS Windows
    elif [[ $id = $SET_WINDOWS____________TARGET ]];then
    {
      local use_it;
      local use_it_2;

      WINDOWS_DEFAULT_RUN=${value%|}
      export WINDOWS_DEFAULT_RUN

      [[ $WINDOWS_DEFAULT_RUN = "ext-"* ]] && use_it=1 || use_it=0;
      echo "#> msg field $SET_WINDOWS____________SSH_IP:enable $use_it;"
      echo "#> msg field $SET_WINDOWS__________SSH_PORT:enable $use_it;"
      [[ $WINDOWS_DEFAULT_RUN = "emu-"* ]] && use_it_2=1 || use_it_2=0;
      echo "#> msg field $SET_WINDOWS_____________START:enable $use_it_2;"
      echo "#> msg field $SET_WINDOWS_____________START:visible $use_it_2;"
    }
    elif [[ $id = $SET_WINDOWS______SSH_USERNAME ]];then
    {
      WINDOWS_SSH_USERNAME=${value%|}
      export WINDOWS_SSH_USERNAME
    }
    elif [[ $id = $SET_WINDOWS______SSH_PASSWORD ]];then
    {
      WINDOWS_SSH_PASSWORD=${value%|}
      export WINDOWS_SSH_PASSWORD
    }
    elif [[ $id = $SET_WINDOWS____________SSH_IP ]];then
    {
      WINDOWS_SSH_IP=${value%|}
      export WINDOWS_SSH_IP
    }
    elif [[ $id = $SET_WINDOWS__________SSH_PORT ]];then
    {
      WINDOWS_SSH_PORT=${value%|}
      export WINDOWS_SSH_PORT
    }
    elif [[ $id = $SET_WINDOWS______OPEN_CONTROL ]];then
    {
      echo "$id unused here"
    }
    elif [[ $id = $SET_WINDOWS_____________START ]];then
    {
      echo "$id unused here"
    }
    elif [[ $id = $SET_WINDOWS________SSH_ACCESS ]];then
    {
      echo "$id unused here"
    }
    elif [[ $id = $SET_WINDOWS_________INSTALLER ]];then
    {
      echo "$id unused here"
    }
    elif [[ $id = $SET_WINDOWS________BUILD_TYPE ]];then
    {
      WINDOWS_BUILD_TYPE=${value%|}
      export WINDOWS_BUILD_TYPE
    }
    #####
    # Max OS-X
    elif [[ $id = $SET_MAC________________TARGET ]];then
    {
      local use_it;
      local use_it_2;

      MAC_OS_X_DEFAULT_RUN=${value%|}
      export MAC_OS_X_DEFAULT_RUN

      [[ $MAC_OS_X_DEFAULT_RUN = "ext-"* ]] && use_it=1 || use_it=0;
      echo "#> msg field $SET_MAC________________SSH_IP:enable $use_it;"
      echo "#> msg field $SET_MAC______________SSH_PORT:enable $use_it;"
      [[ $MAC_OS_X_DEFAULT_RUN = "emu-"* ]] && use_it_2=1 || use_it_2=0;
      echo "#> msg field $SET_MAC_________________START:enable $use_it_2;"
      echo "#> msg field $SET_MAC_________________START:visible $use_it_2;"
    }
    elif [[ $id = $SET_MAC__________OPEN_CONTROL ]];then
    {
      echo "$id unused here"
    }
    elif [[ $id = $SET_MAC_________________START ]];then
    {
      echo "$id unused here"
    }
    elif [[ $id = $SET_MAC____________SSH_ACCESS ]];then
    {
      echo "$id unused here"
    }
    elif [[ $id = $SET_MAC_____________INSTALLER ]];then
    {
      echo "$id unused here"
    }
    elif [[ $id = $SET_MAC__________SSH_USERNAME ]];then
    {
      MAC_OS_X_SSH_USERNAME=${value%|}
      export MAC_OS_X_SSH_USERNAME
    }
    elif [[ $id = $SET_MAC__________SSH_PASSWORD ]];then
    {
      MAC_OS_X_SSH_PASSWORD=${value%|}
      export MAC_OS_X_SSH_PASSWORD
    }
    elif [[ $id = $SET_MAC________________SSH_IP ]];then
    {
      MAC_OS_X_SSH_IP=${value%|}
      export MAC_OS_X_SSH_IP
    }
    elif [[ $id = $SET_MAC______________SSH_PORT ]];then
    {
      MAC_OS_X_SSH_PORT=${value%|}
      export MAC_OS_X_SSH_PORT
    }
    #####
    # Android
    elif [[ $id = $SET_ANDROID________BUILD_TYPE ]];then
    {
      ANDROID_BUILD_TYPE=${value%|}
      export ANDROID_BUILD_TYPE
    }
    elif [[ $id = $SET_ANDROID____ARM_EMU_SOURCE ]];then
    {
      ANDROID_SEL_AVD_ARM=$(echo ${value%|} | awk -F 'Name: ' '{print $2}' | awk -F ' - ' '{print $1}');
    }
    elif [[ $id = $SET_ANDROID__BUILD_SYS_TARGET ]];then
    {
      ANDROID_SEL_TARGET=${value%|}
      export ANDROID_SEL_TARGET;

      echo "#> msg field $SET_ANDROID____ARM_EMU_SOURCE:set $(getAndroidAVDS arm);"
      echo "#> msg field $SET_ANDROID____x86_EMU_SOURCE:set $(getAndroidAVDS x86);"
    }
    elif [[ $id = $SET_ANDROID____x86_EMU_SOURCE ]];then
    {
      ANDROID_SEL_AVD_X86=$(echo ${value%|} | awk -F 'Name: ' '{print $2}' | awk -F ' - ' '{print $1}');
    } fi

    set IFS=$IFS_BU
  } fi

  saveConfigFile noInLock;
}

function buildThreadBaseGeneralProcess
{
  local stand_alone=$1
  if [ ! -d "$BASE_PATH/build/log-old" ];then
    mkdir "$BASE_PATH/build/log-old";fi

  if [ -f "$BASE_PATH/build/creation-general.log" ];then
  {
    if [ ! -d "$BASE_PATH/build/log-old" ];then
      mkdir "$BASE_PATH/build/log-old";fi
    mv "$BASE_PATH/build/creation-general.log" \
       "$BASE_PATH/build/log-old/creation-general-`date +%F_%H-%m`.old.log";
  } fi
  touch "$BASE_PATH/build/creation-general.log"

  bash "$BASE_PATH/tools/basic-system-creation.build" >> "/dev/stdout" 2>&1 | \
  tee "$BASE_PATH/build/creation-general.log"

  local error_value=${?}
  if [ -f $TEMP_DIR/creation-general.failed ];then
  {
    rm -f $TEMP_DIR/creation-general.failed
    [[ $NO_WARNING_ON_FAIL = FALSE ]] &&
    showdialog --title="Warning" \
               --image="$BASE_PATH/icons/icon-warning-128x128.png" \
               --image-on-top --form \
               --text="\
Basic system creation failed!
Systems build stopped here." \
               --button=gtk-ok:1 2> /dev/null &

    rm -f $TEMP_DIR/build_thread-base_general.pid;
    rm -f $TEMP_DIR/build_thread-$system.pid;
    exit 1
  } fi
}

function buildThreadBaseGeneral
{
  (
    loadConfigFile
    sleep 1
    buildThreadBaseGeneralProcess 1
    sleep 1

    [[ $USE_LINUX_X86_32 = "TRUE" ]]  ||
    [[ $USE_LINUX_X86_64 = "TRUE" ]]  && echo "#< msg start_build;" >> "$thread3_in"
    [[ $USE_LINUX_RPBI = "TRUE" ]]    && echo "#< msg start_build;" >> "$thread4_in"
    [[ $USE_MS_WINDOWS_32 = "TRUE" ]] ||
    [[ $USE_MS_WINDOWS_64 = "TRUE" ]] && echo "#< msg start_build;" >> "$thread5_in"
    [[ $USE_MAC_OS_X_64 = "TRUE" ]]   && echo "#< msg start_build;" >> "$thread6_in"
    [[ $USE_ANDROID_ARM = "TRUE" ]]   ||
    [[ $USE_ANDROID_X86 = "TRUE" ]]   && echo "#< msg start_build;" >> "$thread7_in"
    [[ $USE_IOS = "TRUE" ]]      && echo "#< msg start_build;" >> "$thread8_in"

    sleep 3

    while :;do
    {
      STILL_ACTIVE=0;
      if [[ $USE_LINUX_X86_32 = "TRUE" ]]    && [ -f "$TEMP_DIR/build_thread-linux-x86_32.pid" ];then
        STILL_ACTIVE=1
      elif [[ $USE_LINUX_X86_64 = "TRUE" ]]  && [ -f "$TEMP_DIR/build_thread-linux-x86_64.pid" ];then
        STILL_ACTIVE=1
      elif [[ $USE_LINUX_RPBI = "TRUE" ]]    && [ -f "$TEMP_DIR/build_thread-linux-rpbi.pid" ];then
        STILL_ACTIVE=1
      elif [[ $USE_MS_WINDOWS_32 = "TRUE" ]] && [ -f "$TEMP_DIR/build_thread-win-x86_32.pid" ];then
        STILL_ACTIVE=1
      elif [[ $USE_MS_WINDOWS_64 = "TRUE" ]] && [ -f "$TEMP_DIR/build_thread-win-x86_64.pid" ];then
        STILL_ACTIVE=1
      elif [[ $USE_MAC_OS_X_64 = "TRUE" ]]   && [ -f "$TEMP_DIR/build_thread-osx-x86_64.pid" ];then
        STILL_ACTIVE=1
      elif [[ $USE_ANDROID_ARM = "TRUE" ]]   && [ -f "$TEMP_DIR/build_thread-android-arm.pid" ];then
        STILL_ACTIVE=1
      elif [[ $USE_ANDROID_X86 = "TRUE" ]]   && [ -f "$TEMP_DIR/build_thread-android-x86.pid" ];then
        STILL_ACTIVE=1
      elif [[ $USE_IOS = "TRUE" ]]      && [ -f "$TEMP_DIR/build_thread-ios.pid" ];then
        STILL_ACTIVE=1;fi

      if [[ $STILL_ACTIVE = 0 ]];then
      {
        printf "${BRIGHT}${GREEN}Complete build of all available systems done${NORMAL}\n";

        rm -f "$TEMP_DIR/build_thread-base_general.pid";
        exit 0;
      } fi

      sleep 2
    } done
    rm -f "$TEMP_DIR/build_thread-base_general.pid";
  ) &
  echo $! > "$TEMP_DIR/build_thread-base_general.pid"

  echo "Complete build of all installed systems started ...";
}

function exitBuildThreadForOS
{
  rm -f $TEMP_DIR/build_thread-cef_active;
  rm -f $TEMP_DIR/build_thread-cef_active-$system;
  rm -f $TEMP_DIR/build_thread-$system.pid;
}

function buildThreadForOS
{
  local system="$1"
  local caller="$2"
  local direct_build_cef=$3
  local direct_build_kodi=$4
  local update_binary_distrib=$5
  local own_ip=$(ifconfig $NET_CONNECTION | grep inet | grep -v inet6 | awk '{print $2}' | cut -d':' -f2);
  local ssh_name;
  local ssh_port;
  local base_pid;

  loadConfigFile

  if [ ! -d "$BASE_PATH/build/log-old" ];then
    mkdir "$BASE_PATH/build/log-old";fi
  if [ -f "$BASE_PATH/build/creation-kodi-$system.log" ];then
  {
    if [ ! -d "$BASE_PATH/build/log-old" ];then
      mkdir "$BASE_PATH/build/log-old";fi
    mv "$BASE_PATH/build/creation-kodi-$system.log" \
       "$BASE_PATH/build/log-old/creation-kodi-$system-`date +%F_%H-%m`.old.log";
  } fi
  if [ -f "$BASE_PATH/build/creation-cef-$system.log" ];then
    mv "$BASE_PATH/build/creation-cef-$system.log" \
       "$BASE_PATH/build/log-old/creation-cef-$system-`date +%F_%H-%m`.old.log";fi
  if [ -f "$BASE_PATH/build/creation-user-script0-$system.log" ];then
    mv "$BASE_PATH/build/creation-user-script-$system.log" \
       "$BASE_PATH/build/log-old/creation-user-script-$system-`date +%F_%H-%m`.old.log";fi

  if [[ $INCLUDE_CEF = "TRUE" ]];then
    touch "$BASE_PATH/build/creation-cef-$system.log";fi

  if [[ $INCLUDE_KODI = "TRUE" ]];then
    touch "$BASE_PATH/build/creation-kodi-$system.log";fi

  if [[ $INCLUDE_USER_SCRIPT = "TRUE" ]];then
    touch "$BASE_PATH/build/creation-user-script-$system.log";fi

  if [[ $system = win* ]];then
  {
    . $HOME/.mupel/windows.conf;

    own_ip=$([[ $WINDOWS_SSH_IP != 127.0.0.1 ]] && [[ $WINDOWS_SSH_IP != localhost ]] && echo $own_ip || echo 10.0.2.4);
    ssh_name=$([[ $own_ip = 10.0.2.4 ]] && echo "$WINDOWS_DEFAULT_RUN" | tr '(' '_' | tr ')' '_' || echo $WINDOWS_SSH_IP);
    ssh_port=$([[ $own_ip = 10.0.2.4 ]] && echo 2222 || echo $WINDOWS_SSH_PORT);

    if [[ -z `ps aux | grep qemu-system-x86_64 | grep emu-windows-` ]];then
    {
      echo "Found Windows not active and becomes started now ..."
      qemu-windows --start "$WINDOWS_DEFAULT_RUN" &
      sleep 5;
    } fi
  } fi

  if [[ $system = osx* ]] || [[ $system = ios ]];then
  {
    own_ip=$([[ $MAC_OS_X_SSH_IP != 127.0.0.1 ]] && [[ $MAC_OS_X_SSH_IP != localhost ]] && echo $own_ip || echo 10.0.2.4);
    ssh_name=$([[ $own_ip = 10.0.2.4 ]] && echo "$MAC_OS_X_DEFAULT_RUN" | tr '(' '_' | tr ')' '_' || echo $MAC_OS_X_SSH_IP);
    ssh_port=$([[ $own_ip = 10.0.2.4 ]] && echo 2223 || echo $MAC_OS_X_SSH_PORT);

    if [[ -z `ps aux | grep qemu-system-x86_64 | grep emu-mac-osx-` ]];then
    {
      echo "Found Mac OS X not active and becomes started now ..."
      qemu-mac-osx --start "$MAC_OS_X_DEFAULT_RUN" &
      sleep 5;
    } fi
  } fi

  (
    unset IFS;

    sleep 3
    loadConfigFile

    trap 'exitBuildThreadForOS' EXIT SIGHUP SIGINT SIGTERM;

    if [[ $system = win* ]] || [[ $system = osx* ]] || [[ $system = ios ]];then
    {
      printf "\
Remote network connection:

Own IP :        $own_ip
SSH IP/Name :   $ssh_name
SSH Port :      $ssh_port

Checking ssh connection for independent OS build system (can take some seconds):
";
      ssh_ip=$([[ $own_ip = 10.0.2.4 ]] && echo 127.0.0.1 || echo $WINDOWS_SSH_IP);
      for (( j = 1; j < $OS_START_TIMEOUT; ++ j ));do
      {
        if [[ -z `nmap $ssh_ip -PN -p $ssh_port | grep open` ]];then
        {
          sleep 1;
          continue;
        } fi

        local os_ready=1;
        break;
      } done
      if [ ! -z $os_ready ];then
      {
        echo " - connected";
      }
      else
      {
        echo " - failed, build interrupted!"
        return 1;
      } fi
    } fi

    step_cef=0
    step_kodi=0
    step_user=0
    bar_position=0;

    mutexLock_BaseBuild
    if [ $? = 0 ] && [ ! -f "$TEMP_DIR/build_thread-base_general.pid" ] &&
       [[ $direct_build_cef = 0 ]] &&
       [[ $direct_build_kodi = 0 ]] &&
       [[ $update_binary_distrib = 0 ]];then
    {
      buildThreadBaseGeneralProcess 0;
    } fi
    mutexUnlock_BaseBuild

    trap 'exitBuildThreadForOS' EXIT SIGHUP SIGINT SIGTERM;

    # Check CEF build really active and not related files only present after
    # a error, if not removed files and start new build.
    if [ -f $TEMP_DIR/build_thread-cef_active ];then
    {
      ps -p $(cat $TEMP_DIR/build_thread-cef_active > /dev/null);
      if [ $? != 0 ];then
      {
        rm $TEMP_DIR/build_thread-cef_active;
        rm $TEMP_DIR/build_thread-cef_active-*;
      } fi
    } fi

    while :;do
    {
      if [[ $INCLUDE_CEF = "TRUE" ]] && [[ $direct_build_kodi = 0 ]];then
      {
        if [[ $step_cef = 0 ]];then
        {
          if [ ! -f "$TEMP_DIR/build_thread-cef_active" ];then
          {
            (
              unset IFS;
              trap 'rm -f $TEMP_DIR/build_thread-cef_active; rm -f $TEMP_DIR/build_thread-cef_active-$system;' EXIT SIGHUP SIGINT SIGTERM;
              sleep 3
              loadConfigFile

              [[ $direct_build_cef = 1 ]] && direct="--build-direct" || direct="";
              [[ $update_binary_distrib = 1 ]] && update_distrib="--update-distrib" || update_distrib="";

              base_pid=$(cat "$TEMP_DIR/build_thread-$system.pid");
              echo $base_pid > "$TEMP_DIR/build_thread-cef_active";
              echo $base_pid > "$TEMP_DIR/build_thread-cef_active-$system";
              touch $TEMP_DIR/cef-$system.failed

              if [[ $system = win* ]];then
                sshpass -p $WINDOWS_SSH_PASSWORD ssh $ssh_name -p $ssh_port -l $WINDOWS_SSH_USERNAME -- \
                  bash --login //$own_ip/qemu/build/tools/cef-$system.build $direct $update_distrib \
                                    >> "$BASE_PATH/build/creation-cef-$system.log" 2>&1
                chmod -f $BASE_PATH/build/cef-$GIT_CEF_USER/binary_distrib/*
              elif [[ $system = osx* ]] || [[ $system = ios ]];then
                sshpass -p $MAC_OS_X_SSH_PASSWORD ssh $ssh_name -p $ssh_port -l $MAC_OS_X_SSH_USERNAME -- \
                  bash --login -c "\
\#\!/bin/bash;
[[ ! -d \$HOME/Desktop/Mupel/remote_access ]] && mkdir -p \$HOME/Desktop/Mupel/remote_access
[[ -z  \`mount | grep //guest:@$own_ip/qemu\` ]] && mount -t smbfs //guest:@$own_ip/qemu \$HOME/Desktop/Mupel/remote_access" 2>&1
                sshpass -p $MAC_OS_X_SSH_PASSWORD ssh $ssh_name -p $ssh_port -l $MAC_OS_X_SSH_USERNAME -- \
                  bash --login -c "\$HOME/Desktop/Mupel/remote_access/build/tools/cef-$system.build $direct $update_distrib" \
                                    >> "$BASE_PATH/build/creation-cef-$system.log" 2>&1
                sshpass -p $MAC_OS_X_SSH_PASSWORD ssh $ssh_name -p $ssh_port -l $MAC_OS_X_SSH_USERNAME -- \
                  bash --login -c "\#\!/bin/bash; umount -f //guest:@$own_ip/qemu" 2>&1
                chmod -f $BASE_PATH/build/cef-$GIT_CEF_USER/binary_distrib/*
              else
                $caller bash "$BASE_PATH/tools/cef-$system.build" $direct $update_distrib \
                                    >> "$BASE_PATH/build/creation-cef-$system.log" 2>&1
              fi

              if [ -f $TEMP_DIR/cef-$system.failed ];then
              {
                [[ $NO_WARNING_ON_FAIL = FALSE ]] &&
                showdialog --title="Warning" --image="$BASE_PATH/icons/icon-warning-128x128.png" \
                           --image-on-top --form --text="CEF $system creation failed! \nRelated build stopped." \
                           --button=gtk-ok:1 2> /dev/null &
                rm $TEMP_DIR/cef-$system.failed
                exit 1
              } fi
            ) &
            tail -f --pid=$! "$BASE_PATH/build/creation-cef-$system.log"

            step_cef=1;
          }
          elif [[ $step_kodi = 1 ]] && [[ $step_user = 1 ]];then
          {
            local progress="";
            local bar_counter=0;
            while [ $bar_counter -lt 10 ];do
            {
              let bar_counter=bar_counter+1;
              if [[ $bar_position == $bar_counter ]];then
                progress=${progress}$BRIGHT$GREEN"|"$NORMAL;
              else
                progress=${progress}".";fi
            } done
            let bar_position=bar_position+1;
            if [ $bar_position -ge 10 ];then
              bar_position=0;fi

            printf "\rOther CEF build active, need finished before next start $WHITE[$NORMAL $progress $WHITE]$NORMAL";
            sleep 2;
            continue;
          } fi
        } fi
      }
      else
        step_cef=1;fi

      if [[ $INCLUDE_KODI = "TRUE" ]] && [[ $direct_build_cef = 0 ]];then
      {
        if [[ $step_kodi = 0 ]];then
        {
          (
            unset IFS;
            trap 'rm -f $TEMP_DIR/build_thread-kodi_active; rm -f $TEMP_DIR/build_thread-kodi_active-$system;' EXIT SIGHUP SIGINT SIGTERM;
            sleep 3
            loadConfigFile

            [[ $direct_build_kodi = 1 ]] && direct="--build-direct" || direct="";
            [[ $update_binary_distrib = 1 ]] && update_distrib="--update-distrib" || update_distrib="";

            base_pid=$(cat "$TEMP_DIR/build_thread-$system.pid");
            echo $base_pid > "$TEMP_DIR/build_thread-kodi_active";
            echo $base_pid > "$TEMP_DIR/build_thread-kodi_active-$system";
            touch $TEMP_DIR/kodi-$system.failed

            if [[ $system = win* ]];then
              sshpass -p $WINDOWS_SSH_PASSWORD ssh $ssh_name -p $ssh_port -l $WINDOWS_SSH_USERNAME -- \
                bash --login //$own_ip/qemu/build/tools/kodi-$system.build $direct $update_distrib \
                                    >> "$BASE_PATH/build/creation-kodi-$system.log" 2>&1
            elif [[ $system = osx* ]] || [[ $system = ios ]];then
              sshpass -p $MAC_OS_X_SSH_PASSWORD ssh $ssh_name -p $ssh_port -l $MAC_OS_X_SSH_USERNAME -- \
                bash --login -c "\
\#\!/bin/bash;
[[ ! -d \$HOME/Desktop/Mupel/remote_access ]] && mkdir -p \$HOME/Desktop/Mupel/remote_access
[[ -z  \`mount | grep //guest:@$own_ip/qemu\` ]] && mount -t smbfs //guest:@$own_ip/qemu \$HOME/Desktop/Mupel/remote_access" 2>&1
              sshpass -p $MAC_OS_X_SSH_PASSWORD ssh $ssh_name -p $ssh_port -l $MAC_OS_X_SSH_USERNAME -- \
                bash --login -c "\#\!/bin/bash; \$HOME/Desktop/Mupel/remote_access/build/tools/kodi-$system.build $direct $update_distrib"  \
                                    >> "$BASE_PATH/build/creation-kodi-$system.log" 2>&1
              sshpass -p $MAC_OS_X_SSH_PASSWORD ssh $ssh_name -p $ssh_port -l $MAC_OS_X_SSH_USERNAME -- \
                bash --login -c "\#\!/bin/bash; umount -f //guest:@$own_ip/qemu" 2>&1
            else
              $caller bash "$BASE_PATH/tools/kodi-$system.build" $direct $update_distrib \
                                    >> "$BASE_PATH/build/creation-kodi-$system.log" 2>&1
            fi

            if [ -f $TEMP_DIR/kodi-$system.failed ];then
            {
              [[ $NO_WARNING_ON_FAIL = FALSE ]] &&
              showdialog --title="Warning" --image="$BASE_PATH/icons/icon-warning-128x128.png" \
                         --image-on-top --form --text="Kodi $system creation failed! \nRelated build stopped." \
                         --button=gtk-ok:1 2> /dev/null &
              rm $TEMP_DIR/kodi-$system.failed
              exit 1
            } fi
          ) &
          tail -f --pid=$! "$BASE_PATH/build/creation-kodi-$system.log";

          step_kodi=1

          if [ -f "$BASE_PATH/build/kodi-$GIT_USER/kodi-$system/configure" ] ||
             [ -f "$BASE_PATH/build/kodi-$GIT_USER/kodi-$system/kodi.bin" ] ||
             [ -f "$BASE_PATH/build/kodi-$GIT_USER/kodi-$system/kodiapp-x86-debug.apk" ];then
          {
            echo "#> msg field $BUILD__BTN__BUILD_KODI_DIRECT:enable 1";
            echo "#> msg field $BUILD__BTN________LAUNCH_KODI:enable 1";
            parse_values "add-ons" "$system";
          }
          else
          {
            echo "#> msg field $BUILD__BTN__BUILD_KODI_DIRECT:enable 0";
            echo "#> msg field $BUILD__BTN________LAUNCH_KODI:enable 0";
          } fi
          continue;
        } fi
      }
      else
        step_kodi=1;fi

      if [[ $INCLUDE_USER_SCRIPT = "TRUE" ]] && [[ $direct_build_kodi = 0 ]] && [[ $direct_build_cef = 0 ]];then
      {
        if [[ $step_user = 0 ]];then
        {
          (
            unset IFS;
            trap 'rm -f $TEMP_DIR/build_thread-user-script_active; rm -f $TEMP_DIR/build_thread-user-script_active-$system;' EXIT SIGHUP SIGINT SIGTERM;
            sleep 3
            loadConfigFile

            base_pid=$(cat "$TEMP_DIR/build_thread-$system.pid");
            echo $base_pid > "$TEMP_DIR/build_thread-user-script_active";
            echo $base_pid > "$TEMP_DIR/build_thread-user-script_active-$system";
            touch $TEMP_DIR/user_script-$system.failed

            [[ $update_binary_distrib = 1 ]] && update_distrib="--update-distrib" || update_distrib="";

            if [[ $system = win* ]];then
              sshpass -p $WINDOWS_SSH_PASSWORD ssh $ssh_name -p $ssh_port -l $WINDOWS_SSH_USERNAME -- \
                bash --login //$own_ip/qemu/build/tools/user-script-$system.build $direct $update_distrib \
                                    >> "$BASE_PATH/build/creation-user-script-$system.log" 2>&1
            elif [[ $system = osx* ]] || [[ $system = ios ]];then
              sshpass -p $MAC_OS_X_SSH_PASSWORD ssh $ssh_name -p $ssh_port -l $MAC_OS_X_SSH_USERNAME -- \
                bash --login -c "\
\#\!/bin/bash;
[[ ! -d \$HOME/Desktop/Mupel/remote_access ]] && mkdir -p \$HOME/Desktop/Mupel/remote_access
[[ -z  \`mount | grep //guest:@$own_ip/qemu\` ]] && mount -t smbfs //guest:@$own_ip/qemu \$HOME/Desktop/Mupel/remote_access" 2>&1
              sshpass -p $MAC_OS_X_SSH_PASSWORD ssh $ssh_name -p $ssh_port -l $MAC_OS_X_SSH_USERNAME -- \
                bash --login -c "\#\!/bin/bash; \$HOME/Desktop/Mupel/remote_access/build/tools/user-script-$system.build $direct $update_distrib"  \
                                    >> "$BASE_PATH/build/creation-user-script-$system.log" 2>&1
              sshpass -p $MAC_OS_X_SSH_PASSWORD ssh $ssh_name -p $ssh_port -l $MAC_OS_X_SSH_USERNAME -- \
                bash --login -c "\#\!/bin/bash; umount -f //guest:@$own_ip/qemu" 2>&1
            else
              $caller bash "$BASE_PATH/tools/user-script-$system.build $direct $update_distrib" \
                                    >> "$BASE_PATH/build/creation-user-script-$system.log" 2>&1
            fi

            if [ -f $TEMP_DIR/user_script-$system.failed ];then
            {
              [[ $NO_WARNING_ON_FAIL = FALSE ]] &&
              showdialog --title="Warning" --image="$BASE_PATH/icons/icon-warning-128x128.png" \
                         --image-on-top --form --text="User script $system creation failed! \nRelated build stopped." \
                         --button=gtk-ok:1 2> /dev/null &
              rm $TEMP_DIR/user_script-$system.failed;
              exit 1
            } fi
          ) &
          tail -f --pid=$! "$BASE_PATH/build/creation-user-script-$system.log"
          step_user=1
        } fi
      }
      else
        step_user=1;fi

      if [[ $step_cef = 1 ]] && [[ $step_kodi = 1 ]] && [[ $step_user = 1 ]];then
      {
        exitBuildThreadForOS
        printf "${BRIGHT}${WHITE}All build steps performed${NORMAL}\n";
        exit 0;
      } fi

      sleep 2
    } done
  ) &
  pid=$!

  echo $pid > "$TEMP_DIR/build_thread-$system.pid"
  echo "Build of $system started ...";
}

function buildThreadKodiAddonForOS
{
  local system="$1"
  local caller="$2"
  local addon_name="$3"

  if [ ! -d "$BASE_PATH/build/log-old" ];then
    mkdir "$BASE_PATH/build/log-old";fi
  if [ -f "$BASE_PATH/build/creation-kodi-addon-${addon_name}-$system.log" ];then
    mv "$BASE_PATH/build/creation-kodi-addon-${addon_name}-$system.log" \
       "$BASE_PATH/build/log-old/creation-kodi-addon-${addon_name}-$system-`date +%F_%H-%m`.old.log";fi

  touch "$BASE_PATH/build/creation-kodi-addon-${addon_name}-$system.log"
  (
    unset IFS;
    trap 'rm -f $TEMP_DIR/build_thread-$system.pid;' EXIT SIGHUP SIGINT SIGTERM;
    sleep 3
    loadConfigFile
    touch $TEMP_DIR/kodi-$system.failed

    if [[ $system = win* ]];then
      sshpass -p $WINDOWS_SSH_PASSWORD ssh $ssh_name -p $ssh_port -l $WINDOWS_SSH_USERNAME -- \
        bash --login //$own_ip/qemu/build/tools/kodi-$system.build --addon $addon_name >> "$BASE_PATH/build/creation-kodi-addon-${addon_name}-$system.log" 2>&1
    elif [[ $system = osx* ]] || [[ $system = ios ]];then
      sshpass -p $MAC_OS_X_SSH_PASSWORD ssh $ssh_name -p $ssh_port -l $MAC_OS_X_SSH_USERNAME -- \
        bash --login -c "\
\#\!/bin/bash;
[[ ! -d \$HOME/Desktop/Mupel/remote_access ]] && mkdir -p \$HOME/Desktop/Mupel/remote_access
[[ -z  \`mount | grep //guest:@$own_ip/qemu\` ]] && mount -t smbfs //guest:@$own_ip/qemu \$HOME/Desktop/Mupel/remote_access" 2>&1
      sshpass -p $MAC_OS_X_SSH_PASSWORD ssh $ssh_name -p $ssh_port -l $MAC_OS_X_SSH_USERNAME -- \
        bash --login -c "\#\!/bin/bash; \$HOME/Desktop/Mupel/remote_access/build/tools/kodi-$system.build $direct --addon $addon_name" >> "$BASE_PATH/build/creation-kodi-addon-${addon_name}-$system.log" 2>&1
      sshpass -p $MAC_OS_X_SSH_PASSWORD ssh $ssh_name -p $ssh_port -l $MAC_OS_X_SSH_USERNAME -- \
        bash --login -c "\#\!/bin/bash; umount -f //guest:@$own_ip/qemu" 2>&1
    else
      $caller bash "$BASE_PATH/tools/kodi-$system.build" --addon "$addon_name" >> "$BASE_PATH/build/creation-kodi-addon-${addon_name}-$system.log" 2>&1
    fi

    rm -f $TEMP_DIR/build_thread-$system.pid;
    if [ -f $TEMP_DIR/kodi-$system.failed ];then
    {
      rm $TEMP_DIR/kodi-$system.failed
      [[ $NO_WARNING_ON_FAIL = FALSE ]] &&
      showdialog --title="Warning" \
          --image="$BASE_PATH/icons/icon-warning-128x128.png" \
          --image-on-top --form \
          --text="Kodi add-on $system for ${addon_name} creation failed! \nRelated build stopped." \
          --button=gtk-ok:1 2> /dev/null &
      exit 1
    } fi
  ) &
  pid=$!
  tail -f --pid=$pid "$BASE_PATH/build/creation-kodi-addon-${addon_name}-$system.log" &

  echo $pid > "$TEMP_DIR/build_thread-$system.pid"
  echo "Build of kodi add-on $system for ${addon_name} started ...";
}

function getLinuxTargetDist
{
  dist_targets=$(ls /var/lib/chroot/ | grep ${SYSTEM_BITS}bit | sed 's/64bit//g' | sed 's/32bit//g' | tr '\n'  '!');
  dist_targets=${dist_targets::-1};
  dist_targets=$(echo ${dist_targets//$USE_LINUX_X86_DISTR/\^${USE_LINUX_X86_DISTR}});
  echo $dist_targets
}

function getAndroidAVDS
{
  local android_system=$1
  local android_avds=
  local android_avds_available=

  if [ -f $HOME/.mupel/android.conf ];then
  {
    . $HOME/.mupel/android.conf;
    if [ ! -f $ANDROID_DEV_ROOT/android-sdk-linux/tools/android ];then
      return 1;fi

    if [[ $android_system = x86 ]];then
      android_sel_avd=$ANDROID_SEL_AVD_X86;
    elif [[ $android_system = x86_64 ]];then
      android_sel_avd=$ANDROID_SEL_AVD_X86_64;
    elif [[ $android_system = arm ]];then
      android_sel_avd=$ANDROID_SEL_AVD_ARM;
    elif [[ $android_system = mips ]];then
      android_sel_avd=$ANDROID_SEL_AVD_MIPS;
    elif [[ $android_system = mips64 ]];then
      android_sel_avd=$ANDROID_SEL_AVD_MIPS64;
    else
      return 1;fi

    sel_target_version=$(echo $ANDROID_SEL_TARGET | awk -F '-' '{print $2}');

    IFS_BU=$IFS;
    IFS=$'\n'
    avd_device="-"
    declare -a android_avds=($($ANDROID_DEV_ROOT/android-sdk-linux/tools/android list avd))
    for (( i = 0; i < ${#android_avds[*]}; ++ i ));do
    {
      if [[ $(echo ${android_avds[i]} | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//') = Name* ]];then
      {
        avd_name=$(echo ${android_avds[i]} | awk -F ': ' '{print $2}');
        for (( j = 1; j < 6; ++ j ));do
        {
          value=$(echo ${android_avds[i+j]} | awk -F ': ' '{print $2}');
          if [[ ${android_avds[i+j]} = "  Device: "* ]];then
            avd_device=$value;
          elif [[ ${android_avds[i+j]} = "    Path: "* ]];then
            avd_path=$value;
          elif [[ ${android_avds[i+j]} = "  Target: "* ]];then
            avd_target=$value;
          elif [[ ${android_avds[i+j]} = " Tag/ABI: "* ]];then
            avd_tag_abi=$value;
          elif [[ ${android_avds[i+j]} = "    Skin: "* ]];then
            avd_skin=$value;fi
        } done

        echo $avd_tag_abi | grep -q $android_system;
        if [ $? != 0 ];then
          continue;fi

        if [[ $sel_target_version > $(echo $avd_target | awk -F 'API level ' '{print $2}' | awk -F ')' '{print $1}') ]];then
          continue;fi

        if [ -z $android_sel_avd ];then
          android_sel_avd=$avd_name;fi
        if [[ $avd_name = $android_sel_avd ]];then
          android_avds_available+="^";fi
        android_avds_available+="${avd_name}; API: $(echo ${avd_target} | awk -F 'level ' '{print $2}' | awk -F ')' '{print $1}'); Tag: $(echo ${avd_tag_abi} | awk -F '/' '{print $1}'); Device: ${avd_device}; ${avd_skin}!"
      } fi
    } done
    android_avds_available=${android_avds_available::-1};
    set IFS=$IFS_BU
  }
  else
    return 1;fi

  echo $android_avds_available;

  return 0;
}

# cleanup
function cleanup
{
  rm -rf "$TEMP_DIR"

  # Remove temp files, from it knows the threads that they are finished
  rm -f "$thread1_in" \
        "$thread2_in" \
        "$thread3_in" \
        "$thread4_in" \
        "$thread5_in" \
        "$thread6_in" \
        "$thread7_in" \
        "$thread8_in" \
        "$thread9_in" \
        "$thread10_in"
  sleep 1.5

  # Check after
  if [[ ! -z $pid_thread1 ]];then
    ps -p $pid_thread1; [[ $? = 0 ]] && killtree $pid_thread1 KILL;fi
  if [[ ! -z $pid_thread2 ]];then
    ps -p $pid_thread2; [[ $? = 0 ]] && killtree $pid_thread2 KILL;fi
  if [[ ! -z $pid_thread3 ]];then
    ps -p $pid_thread3; [[ $? = 0 ]] && killtree $pid_thread3 KILL;fi
  if [[ ! -z $pid_thread4 ]];then
    ps -p $pid_thread4; [[ $? = 0 ]] && killtree $pid_thread4 KILL;fi
  if [[ ! -z $pid_thread5 ]];then
    ps -p $pid_thread5; [[ $? = 0 ]] && killtree $pid_thread5 KILL;fi
  if [[ ! -z $pid_thread6 ]];then
    ps -p $pid_thread6; [[ $? = 0 ]] && killtree $pid_thread6 KILL;fi
  if [[ ! -z $pid_thread7 ]];then
    ps -p $pid_thread7; [[ $? = 0 ]] && killtree $pid_thread7 KILL;fi
  if [[ ! -z $pid_thread8 ]];then
    ps -p $pid_thread8; [[ $? = 0 ]] && killtree $pid_thread8 KILL;fi
  if [[ ! -z $pid_thread9 ]];then
    ps -p $pid_thread9; [[ $? = 0 ]] && killtree $pid_thread9 KILL;fi
  if [[ ! -z $pid_thread10 ]];then
    ps -p $pid_thread10; [[ $? = 0 ]] && killtree $pid_thread10 KILL;fi
}

function usage
{
  echo "Usage: $0 [--options]"
  echo "Options:"
  echo "--info        Shows the information dialog"
  echo "--help        this help message"
  echo "Script will prompt interactively for other values."
  exit 1
}

function process_opts
{
  while test "$1" != "" ; do
    case "$1" in
      --info)                   showSystemInfoDialog "Multi platform build environment for Kodi on Linux (Mupel)"
                                exit 0;;
      --help)                   usage;;
      *)
        echo "invalid command-line option: $OPTARG"
        usage
        ;;
    esac
    shift
  done
}

function getWindowsTargets
{
  local windows_targets=;

  if [ -f "$HOME/.mupel/windows.conf" ];then
  {
    . "$HOME/.mupel/windows.conf";

    windows_targets=$(ls -d $EMU_INSTALL_PREFIX/emu-windows* 2> /dev/null | awk -F"/" '{print $NF}' | tr '\n'  '!');
    windows_targets+=$(ls -d $EMU_INSTALL_PREFIX/ext-windows* 2> /dev/null | awk -F"/" '{print $NF}' | tr '\n'  '!');
#    windows_targets=${windows_targets::-1} > /dev/null
    windows_targets=$(echo ${windows_targets//$WINDOWS_DEFAULT_RUN/\^${WINDOWS_DEFAULT_RUN}});
  } fi
  echo $windows_targets;
  return 0;
}

function getMacOSXTargets
{
  local macosx_targets=;

  if [ -f "$HOME/.mupel/mac-osx.conf" ];then
  {
    . "$HOME/.mupel/mac-osx.conf";

    macosx_targets=$(ls -d $EMU_INSTALL_PREFIX/emu-mac-osx* 2> /dev/null | awk -F"/" '{print $NF}' | tr '\n'  '!');
    macosx_targets+=$(ls -d $EMU_INSTALL_PREFIX/ext-mac-osx* 2> /dev/null | awk -F"/" '{print $NF}' | tr '\n'  '!');
#    macosx_targets=${macosx_targets::-1} > /dev/null 2>&1
    macosx_targets=$(echo ${macosx_targets//$MAC_OS_X_DEFAULT_RUN/\^${MAC_OS_X_DEFAULT_RUN}});
  } fi
  echo $macosx_targets;
  return 0;
}

function getAndroidTargets
{
  local android_targets=;
  IFS_BU=$IFS;
  IFS=$' '

  if [ -f "$HOME/.mupel/android.conf" ];then
  {
    . "$HOME/.mupel/android.conf";

    if [ ! -f "$ANDROID_DEV_ROOT/android-sdk-linux/tools/android" ];then
    {
      printf "${RED}${BRIGHT}Not possible to use android, failure in system! ${NORMAL}\n" > /dev/stderr;
      return 1;
    } fi
    android_targets=$($ANDROID_DEV_ROOT/android-sdk-linux/tools/android list targets | grep "android-" | awk -F '"' '{print $2}' | tr '\n' '!');
    android_targets=${android_targets::-2};
    android_targets=$(echo ${android_targets//$ANDROID_SEL_TARGET/\^${ANDROID_SEL_TARGET}});
  } fi
  echo $android_targets;
  set IFS=$IFS_BU
  return 0;
}

function showAndroidEmulatorKeyHelp
{
  showdialog --skip-taskbar --on-top \
             --title="Android Emulator Keys" \
             --image="$BASE_PATH/icons/icon-info-128x128.png" \
             --image-on-top --form \
             --button=gtk-ok:0 \
             --width=830 --show-uri --editable \
             --text-info \
             --text="<tt>
  When running the emulator, use the following keypresses:

    Home                    Home button
    F2, PageUp              Menu (Soft-Left) button
    Shift-F2, PageDown      Star (Soft-Right) button
    Escape                  Back button
    F3                      Call/Dial button
    F4                      Hangup/EndCall button
    F7                      Power button
    F5                      Search button
    Keypad_Plus, Ctrl-F5    Volume up button
    Keypad_Minus, Ctrl-F6   Volume down button
    Ctrl-Keypad_5, Ctrl-F3  Camera button
    Keypad_7, Ctrl-F11      Switch to previous layout
    Keypad_9, Ctrl-F12      Switch to next layout
    F8                      Toggle cell network on/off
    F9                      Toggle fullscreen mode
    F6                      Toggle trackball mode
    Delete                  Show trackball
    Keypad_5                DPad center
    Keypad_4                DPad left
    Keypad_6                DPad right
    Keypad_8                DPad up
    Keypad_2                DPad down
    Keypad_Multiply         Increase onion alpha
    Keypad_Divide           Decrease onion alpha

  note that NumLock must be deactivated for keypad keys to work</tt>" 2> /dev/null
}

function showGitCommandHelp
{
  showdialog --skip-taskbar --on-top \
             --title="Git commands" \
             --image="$BASE_PATH/icons/icon-info-64x64.png" \
             --image-on-top \
             --button=gtk-ok:0 \
             --width=830 --height=600 \
             --text-info \
             --filename="$BASE_PATH/help/git-help.txt" \
             --text="<tt><b><i><span size=\"large\">Usable Git commands:</span></i></b></tt>" 2> /dev/null
}

function ssh_access_windows
{
  if [[ $USE_MS_WINDOWS_32 != "TRUE" ]] && [[ $USE_MS_WINDOWS_64 != "TRUE" ]];then
  {
    showErrorDialog "<b>\
Use of Windows not installed or enabled.

SSH access console not possible!</b>"
    return
  }
  elif [[ ! -f $HOME/.mupel/windows.conf ]];then
  {
    showErrorDialog "<b>\
Needed Windows configuration file missing.

SSH access console not possible!</b>"
    return
  }
  elif [[ ! -f $BASE_PATH/tools/mac-osx/open-ssh-console-access ]];then
  {
    showErrorDialog "<b>\
Needed Windows SSH access script file missing:</b>
 - $BASE_PATH/tools/windows/open-ssh-console-access

<b>SSH access console not possible!</b>"
    return
  } fi

  $BASE_PATH/tools/windows/open-ssh-console-access
}

function ssh_access_mac_os_x
{
  if [[ $USE_MAC_OS_X_64 != "TRUE" ]];then
  {
    showErrorDialog "<b>\
Use of Mac OS X not installed or enabled.

SSH access console not possible!</b>"
    return
  }
  elif [[ ! -f $HOME/.mupel/mac-osx.conf ]];then
  {
    showErrorDialog "<b>\
Needed Mac OS X configuration file missing.

SSH access console not possible!</b>"
    return
  }
  elif [[ ! -f $BASE_PATH/tools/mac-osx/open-ssh-console-access ]];then
  {
    showErrorDialog "<b>\
Needed Mac OS X SSH access script file missing:</b>
 - $BASE_PATH/tools/mac-osx/open-ssh-console-access

<b>SSH access console not possible!</b>"
    return
  } fi


  $BASE_PATH/tools/mac-osx/open-ssh-console-access
}

function forceKodiSelectedBuild
{
  IFS_BU=$IFS;
  unset IFS;
  local system="$1"
  local caller="$2"
  local kodi_buildstep="$3"

  # Force process active to have right stop from here
  process_active=1

  # Ask user to pick one of the available targets
  local targets="$(cd $BASE_PATH/build/kodi-$GIT_USER/kodi/tools/buildsteps/$kodi_buildstep; ls)"
  local selection="";
  for i in $targets; do
    selection=`printf "$selection FALSE %s" "$i"`;done

  while :; do
  {
    selection=$(showdialog --list \
                           --title="Selectable direct build" \
                           --text="The following Kodi direct build steps are available:" \
                           --radiolist \
                           --column "Use" \
                           --column "Type" \
                           --print-column=2 \
                           $selection \
                           --width=400 --height=390 2> /dev/null)
    selection=${selection%|};
    if [ -z $selection ];then
    {
      showWarningDialog_YesNo "No step selected! \n\nTry again?"
      [ $? != 0 ] && return;
    }
    else
      break;fi
  } done

  if [ ! -d "$BASE_PATH/build/log-old" ];then
    mkdir "$BASE_PATH/build/log-old";fi
  if [ -f "$BASE_PATH/build/creation-kodi-selected-$selection-$system.log" ];then
    mv "$BASE_PATH/build/creation-kodi-selected-$selection-$system.log" \
       "$BASE_PATH/build/log-old/creation-kodi-selected-$selection-$system-`date +%F_%H-%m`.old.log";fi
  touch "$BASE_PATH/build/creation-kodi-selected-$selection-$system.log"
  (
    unset IFS;
    trap 'rm -f $TEMP_DIR/build_thread-$system.pid;' EXIT SIGHUP SIGINT SIGTERM;
    sleep 3
    loadConfigFile
    touch $TEMP_DIR/kodi-$system.failed

    if [[ $system = win* ]];then
      sshpass -p $WINDOWS_SSH_PASSWORD ssh $ssh_name -p $ssh_port -l $WINDOWS_SSH_USERNAME -- \
        bash --login -c >> "printf \"${RED}${BRIGHT}Selection build for Windows not possible! ${NORMAL}\n\"" 2>&1
    elif [[ $system = osx* ]] || [[ $system = ios ]];then
      sshpass -p $MAC_OS_X_SSH_PASSWORD ssh $ssh_name -p $ssh_port -l $MAC_OS_X_SSH_USERNAME -- \
        bash --login -c "\
\#\!/bin/bash;
[[ ! -d \$HOME/Desktop/Mupel/remote_access ]] && mkdir -p \$HOME/Desktop/Mupel/remote_access
[[ -z  \`mount | grep //guest:@$own_ip/qemu\` ]] && mount -t smbfs //guest:@$own_ip/qemu \$HOME/Desktop/Mupel/remote_access" 2>&1
      sshpass -p $MAC_OS_X_SSH_PASSWORD ssh $ssh_name -p $ssh_port -l $MAC_OS_X_SSH_USERNAME -- \
        bash --login -c "\#\!/bin/bash; \$HOME/Desktop/Mupel/remote_access/build/tools/kodi-$system.build $direct --selected $selection" >> "$BASE_PATH/build/creation-kodi-selected-$selection-$system.log" 2>&1
      sshpass -p $MAC_OS_X_SSH_PASSWORD ssh $ssh_name -p $ssh_port -l $MAC_OS_X_SSH_USERNAME -- \
        bash --login -c "\#\!/bin/bash; umount -f //guest:@$own_ip/qemu" 2>&1
    else
      $caller bash "$BASE_PATH/tools/kodi-$system.build" --selected $selection >> "$BASE_PATH/build/creation-kodi-selected-$selection-$system.log" 2>&1
    fi

    rm -f $TEMP_DIR/build_thread-$system.pid;
    if [ -f $TEMP_DIR/kodi-$system.failed ];then
    {
      rm $TEMP_DIR/kodi-$system.failed
      [[ $NO_WARNING_ON_FAIL = FALSE ]] &&
      showdialog --title="Warning" \
          --image="$BASE_PATH/icons/icon-warning-128x128.png" \
          --image-on-top --on-top --form \
          --text="Kodi $system for selection $selected creation failed! \nRelated build stopped." \
          --button=gtk-ok:1 2> /dev/null &
      exit 1
    } fi
  ) &
  pid=$!
  tail -f --pid=$pid "$BASE_PATH/build/creation-kodi-selected-$selection-$system.log" &

  echo $pid > "$TEMP_DIR/build_thread-$system.pid"
  echo "Build of kodi $system part for $selected started ...";

  set IFS=$IFS_BU
}

function checkAndInstallGitPulls
{
  gem list --local | grep -q git-pulls;
  if [ $? != 0 ];then
  {
    showQuestionDialog "<b>Needed part 'git-pulls' not present, do you want to install?</b>";
    [ $? = 0 ] && sudo -A -- gem install git-pulls;
    return $?;
  } fi
  return 0;
}

function openPullRequestInfoDialog
{
  local directory=$1
  local button_id=$2
(
  requests=$(git -C "$directory" pulls list | tail -n +2);
  IFS=$'\n'

  for r in $requests; do
  {
    echo $r | awk -F ' ' '{print $1}'
    echo $r | awk -F ' ' '{print $2}' | awk -F ' ' '{print $1}'
    echo $r | cut -b 12-47
    echo $r | cut -b 48-
  } done |
  showdialog --width=640 --height=480 --title="Open Pull requests" --image="gtk-execute" \
             --text="Double click or press enter on <b>Pull request</b> to show related sub menu" \
             --list --print-column=1 \
             --dclick-action="$BASE_PATH/tools/send-button-msg showDetailedRequestInfo $directory $1" \
             --column="Number" --column="Date" --column="Name" --column="Source" \
             --button=gtk-close:0 > /dev/null 2>&1

  echo "#> msg field $button_id:enable 1;" >> $thread2_in
  exit 0;
) &
}

}
#
###############################################################################


###-------------------------------------------------------------------------###
#                                                                             #
#                            Start of process points                          #
#                                                                             #
[[ $DIST != "Ubuntu" ]] && [[ $DIST != "Debian" ]] && {
  printf "${RED}${BRIGHT}Build not possible, need performed on ubuntu or debian based system (needed for install of dependencies parts)${NORMAL}\n" > /dev/stderr
  exit 1 ;
}

# Check that xserver is running and user is root.
[[ $DISPLAY ]] || {
  printf "${RED}${BRIGHT}There is no xserver running. Exiting...${NORMAL}\n";
  exit 1;
}

if [[ `uname -m` = "x86_64" ]];then
{
  SYSTEM_BITS=64;
  YAD_MUPEL=yad-mupel-x86_64
}
elif [[ `uname -m` = "i686" ]];then
{
  printf "${YELLOW}${BRIGHT}Old system, on a 32 bit linux OS is only be build on itself possible! ${NORMAL}\n";
  SYSTEM_BITS=32;
  YAD_MUPEL=yad-mupel-i686
}
else
{
  printf "${RED}${BRIGHT}Wrong system, a 64 bit linux OS is needed! ${NORMAL}\n";
  exit 1;
} fi

# Check that we are running as a regular user
[ "$(id -nu)" = root ] && {
  printf "${RED}${BRIGHT}Run this script as a regular user and provide your \"sudo\" password if requested!${NORMAL}\n" > /dev/stderr
  exit 1;
}

unset IFS;

process_opts "$@";

mutexUnlock_ConfigFile
mutexUnlock_BaseBuild

##
# Due to sometimes problems of the big app chain from yad make sure on start of
# them here every else is killed, due to the separate name used on this is it
# not direct problematic on system but a hack way
killall $basic_dialog -q;

$basic_dialog --html --width=644 --height=478 \
              --uri=$BASE_PATH/icons/mupel-start-image.png \
              --undecorated --no-buttons --sticky \
              --on-top --center --skip-taskbar 2> /dev/null &
start_dialog_pid=$!;
sleep 1.5

SYSTEM_ACTIVE=1;

DEBUG=
KEY=$RANDOM
TEMP_DIR=$BASE_PATH/build/.tmp;
mkdir -p $TEMP_DIR;

thread1_in=${TEMP_DIR}/thread1_in
touch ${TEMP_DIR}/thread1_in
thread2_in=${TEMP_DIR}/thread2_in
touch ${TEMP_DIR}/thread2_in
thread3_in=${TEMP_DIR}/thread3_in
touch ${TEMP_DIR}/thread3_in
thread4_in=${TEMP_DIR}/thread4_in
touch ${TEMP_DIR}/thread4_in
thread5_in=${TEMP_DIR}/thread5_in
touch ${TEMP_DIR}/thread5_in
thread6_in=${TEMP_DIR}/thread6_in
touch ${TEMP_DIR}/thread6_in
thread7_in=${TEMP_DIR}/thread7_in
touch ${TEMP_DIR}/thread7_in
thread8_in=${TEMP_DIR}/thread8_in
touch ${TEMP_DIR}/thread8_in
thread9_in=${TEMP_DIR}/thread9_in
touch ${TEMP_DIR}/thread9_in
thread10_in=${TEMP_DIR}/thread10_in
touch ${TEMP_DIR}/thread10_in

###############################################################################
# Thread one: General handling
{
  (
    PULSE_ON=0;
    enabled=1
    process_active=0

    while :;do
    {
      if [ -f ./build/global_mupel_install ];then
      {
        sleep 2;
        continue;
      } fi

      loadConfigFile

      # Set buttons to initial state
      echo "#> msg field $GEN__BTN______START_BUILD_ALL:visible 1;";
      echo "#> msg field $GEN__BTN_______STOP_BUILD_ALL:visible 0;";
      echo "#> msg field $GEN__BTN______________DUMMY_2:visible 0;"; # Dummy
      echo "#> msg field $GEN__BTN______________DUMMY_4:visible 0;"; # Dummy
      if [[ $USE_LINUX_X86_32 = "FALSE" ]] &&
         [[ $USE_LINUX_X86_64 = "FALSE" ]] &&
         [[ $USE_LINUX_RPBI = "FALSE" ]] &&
         [[ $USE_MS_WINDOWS_32 = "FALSE" ]] &&
         [[ $USE_MS_WINDOWS_64 = "FALSE" ]] &&
         [[ $USE_MAC_OS_X_64 = "FALSE" ]] &&
         [[ $USE_ANDROID_ARM = "FALSE" ]] &&
         [[ $USE_ANDROID_X86 = "FALSE" ]] &&
         [[ $USE_IOS = "FALSE" ]];then
      {
        echo "#> msg field $GEN__BTN______START_BUILD_ALL:enable 0;";
        echo "#> msg field $GEN__BTN____CREATE_INST_MUPEL:visible 1;";
        echo "#> msg field $GEN__BTN____CREATE_INST_MUPEL:enable 1;";
        enabled=0;
      }
      else
      {
        echo "#> msg field $GEN__BTN______START_BUILD_ALL:enable 0;"; # Leaved disabled until build for all is supported (still in development)
        echo "#> msg field $GEN__BTN____CREATE_INST_MUPEL:visible 0;";
      } fi

      echo "#> msg field $GEN__CHK_________INCLUDE_KODI:set $INCLUDE_KODI;";
      echo "#> msg field $GEN__CHK__INCLUDE_KODI_ADDONS:set $INCLUDE_KODI_ADDONS;";
      echo "#> msg field $GEN__CHK__________INCLUDE_CEF:set $INCLUDE_CEF;";
      echo "#> msg field $GEN__CHK___DISABLE_GIT_UPDATE:set $DISABLE_GIT_UPDATE;";
      [[ $SUPPORT_CEF = "TRUE" ]] &&
        echo "#> msg field $GEN__CHK__________INCLUDE_CEF:enable 1;" ||
        echo "#> msg field $GEN__CHK__________INCLUDE_CEF:enable 0;";

      sleep 2
      kill $start_dialog_pid

      # Main loop
      while :;do
      {
        if [ ! -f "$thread1_in" ];then
          exit 0;fi

        if [ -f ./build/global_mupel_install ];then
        {
          echo "#> msg field $GEN__BTN____CREATE_INST_MUPEL:enable 0;";
          break;
        } fi

        if [ -z $SYSTEM_ACTIVE ];then
          echo "#> msg field -1:values;";fi

        if [[ $enabled = 0 ]] && [ -z $DEBUG ];then
        {
          echo "No systems available, starting install" > /dev/stderr
          bash $BASE_PATH/mupel-install --main-msg $thread1_in;
        } fi

        proc=$(cat "$thread1_in")
        echo -n "" > "$thread1_in";
        IFS_BU=$IFS;
        IFS=$'\n';
        for line in ${proc}; do
        {
          if [[ "$line" == "#< msg"* ]];then
          {
            if [[ "$line" = *"start_build"* ]];then
            {
              echo "#> msg pulse on;";
              echo "#> msg field $GEN__BTN______START_BUILD_ALL:visible 0;";
              echo "#> msg field $GEN__BTN_______STOP_BUILD_ALL:visible 1;";
              echo "#> msg field $GEN__BTN______DOWNLOAD_UPDATE:enable 0;";
              echo "#> msg field $GEN__CHK_________INCLUDE_KODI:enable 0;";
              echo "#> msg field $GEN__CHK__INCLUDE_KODI_ADDONS:enable 0;";
              echo "#> msg field $GEN__CHK__________INCLUDE_CEF:enable 0;";
              echo "#> msg field $GEN__CHK___DISABLE_GIT_UPDATE:enable 0;";
              PULSE_ON=1

              buildThreadBaseGeneral
            }
            elif [[ "$line" = *"stop_build"* ]];then
            {
              [[ $USE_LINUX_X86_32 = "TRUE" ]]  ||
              [[ $USE_LINUX_X86_64 = "TRUE" ]]  && echo "#< msg stop_build;" >> "$thread3_in"
              [[ $USE_LINUX_RPBI = "TRUE" ]]    && echo "#< msg stop_build;" >> "$thread4_in"
              [[ $USE_MS_WINDOWS_32 = "TRUE" ]] ||
              [[ $USE_MS_WINDOWS_64 = "TRUE" ]] && echo "#< msg stop_build;" >> "$thread5_in"
              [[ $USE_MAC_OS_X_64 = "TRUE" ]]   && echo "#< msg stop_build;" >> "$thread6_in"
              [[ $USE_ANDROID_ARM = "TRUE" ]]   ||
              [[ $USE_ANDROID_X86 = "TRUE" ]]   && echo "#< msg stop_build;" >> "$thread7_in"
              [[ $USE_IOS = "TRUE" ]]      && echo "#< msg stop_build;" >> "$thread8_in"

              if [ -f "$TEMP_DIR/build_thread-base_general.pid" ];then
              {
                pid_to_kill=$(cat "$TEMP_DIR/build_thread-base_general.pid");
                ps -p $pid_to_kill > /dev/null
                if [[ $? = 0 ]];then
                {
                  killtree $pid_to_kill KILL;
                  kill $pid_to_kill
                } fi
                rm -f "$TEMP_DIR/build_thread-base_general.pid"
                killall git
                killall python
                rm -f "$TEMP_DIR/.tempLoggerActive"
              } fi
              echo ""
              if [[ $PULSE_ON = 1 ]];then
              {
                echo "#> msg pulse off;";
                PULSE_ON=0;
              } fi
              echo "#> msg percent 0;";
              echo "#> msg field $GEN__BTN______START_BUILD_ALL:visible 1;";
              echo "#> msg field $GEN__BTN_______STOP_BUILD_ALL:visible 0;";
              echo "#> msg field $GEN__CHK_________INCLUDE_KODI:enable 1;";
              echo "#> msg field $GEN__CHK__INCLUDE_KODI_ADDONS:enable 1;";
              echo "#> msg field $GEN__CHK__________INCLUDE_CEF:enable 1;";
              echo "#> msg field $GEN__CHK___DISABLE_GIT_UPDATE:enable 1;";
            }
            elif [[ "$line" = *"download_only"* ]];then
            {
              mutexLock_BaseBuild
              echo "#> msg field $GEN__BTN______DOWNLOAD_UPDATE:enable 0;";
              buildThreadBaseGeneralProcess 0;
              loadKodiBuildDir linux-x86_64 "Linux x86-64bit";
              if [ -d $BASE_PATH/build/kodi-$GIT_USER/kodi-linux-x86_32 ];then
                loadKodiBuildDir linux-x86_32 "Linux x86-32bit";fi
              if [ -d $BASE_PATH/build/kodi-$GIT_USER/kodi-linux-rpbi ];then
                loadKodiBuildDir linux-rpbi "Linux Raspberry PI";fi
              echo "#> msg field $GEN__BTN______DOWNLOAD_UPDATE:enable 1;";
              printf "\n${YELLOW}${BRIGHT}Note: ${WHITE}Only linux based parts are updated (Mac OS X and Windows need normal build)${NORMAL} ...\n";
              mutexUnlock_BaseBuild
            }
            elif [[ "$line" = *"open_console"* ]];then
            {
              exec $BASE_PATH/tools/terminal
            }
            elif [[ "$line" = *"delete_old_logs"* ]];then
            {
              unset IFS;
              echo "#> msg field $GEN__BTN____DEL_OLD_LOG_FILES:enable 0;";

              if [ ! -d "$BASE_PATH/build/log-old" ] &&
                 [[ ! -z  `ls $BASE_PATH/build/log-old/*.old.log 2> /dev/null` ]];then
              {
                showWarningDialog_YesNo "<b>\
All old log files with '*.old.log' becomes deleted!

Are you sure?</b>"
                if [ $? = 0 ];then
                  rm -vf $BASE_PATH/build/log-old/*.old.log;fi
              }
              else
                echo "No old log files present, skipped.";fi

              echo "#> msg field $GEN__BTN____DEL_OLD_LOG_FILES:enable 1;";
            }
            elif [[ "$line" = *"field"* ]];then
            {
              IFS=$'\n'; for p in ${line}; do
                id=$(echo ${p} | awk -F ' ' '{print $4}' | awk -F ':' '{print $1}')
                value=$(echo ${p#*:} | awk -F ';' '{print $1}')
                IFS=$'|';
                if [[ "$id" -ge "0" ]];then
                  parse_values "general" $id "$value"
                else
                  id2=0
                  IFS=$'|';
                  for value2 in ${value}; do
                  {
                    parse_values "general" $id2 "$value2"
                    ((id2++))
                  } done;
                fi; IFS=$'\n';
              done; unset IFS;
              [ -z $SYSTEM_ACTIVE ] && exit 0;
            }
            else
            {
              echo "Wrong command! $line" > /dev/stderr
            } fi
          }
          else
          {
            echo "$line"
          } fi
        } done
        set IFS=$IFS_BU

        if [ -f "$TEMP_DIR/build_thread-base_general.pid" ];then
        {
          process_active=1
        }
        elif [[ $process_active != 0 ]];then
        {
          #echo "#< msg stop_build;" >> "$thread1_in";
          process_active=0;
        } fi

        sleep 0.5;
      } done
    } done
  ) | \
  $YAD_MUPEL --plug=$KEY --tabnum=1 --form \
            --text="General settings" \
            --pulsate \
            --xcom-log=$thread1_in \
            --field="Start build all:FBTN@0,8,0,2"                  "bash -c 'echo \"#< msg start_build;\" >> $thread1_in'" \
            --field="Stop build all:FBTN@0,8,2,4"                   "bash -c 'echo \"#< msg stop_build;\" >> $thread1_in'" \
            --field="Create and install Mupel system:FBTN@0,8,4,6"  "bash $BASE_PATH/mupel-install --main-msg $thread1_in" \
            --field="Download/Update only:FBTN@0,0,12,14"           "bash -c 'echo \"#< msg download_only;\" >> $thread1_in'" \
            --field="Open console window:FBTN@1,1,12,14"            "bash -c 'echo \"#< msg open_console;\" >> $thread1_in'" \
            --field="dummy:FBTN@2,2,12,14"                          "" \
            --field="Delete old log files:FBTN@7,7,12,14"           "bash -c 'echo \"#< msg delete_old_logs;\" >> $thread1_in'" \
            --field="Clear log:FBTN@8,8,12,14"                      "bash -c 'echo \"#> msg field 15:clear;\" >> $thread1_in'" \
            --field=":lbl@0,8,16,18"                                "" \
            --field="Include Kodi:chk@0,0,20,22"                    $INCLUDE_KODI \
            --field="Include Kodi add-ons:chk@1,1,20,22"            $INCLUDE_KODI_ADDONS \
            --field="Include CEF:chk@2,2,20,22"                     $INCLUDE_CEF \
            --field="Disable build git update:chk@7,8,20,22"        $DISABLE_GIT_UPDATE \
            --field="dummy:FBTN@0,1,24,26" "" \
            --field="Build log:termproc@0,9,28,30" "" > /dev/null 2>&1 &
  pid_thread1=$!
}
#
###############################################################################

TAB_LIST=
TAB_NUM=2

###############################################################################
# Thread two: GIT Handling
{
  (
    sleep 0.5;

    pulse_on=0;
    process_active=0

    while :;do
    {
      if [ -f ./build/global_mupel_install ];then
      {
        [ -z $SYSTEM_ACTIVE ] && exit 0;
        sleep 2;
        continue;
      } fi

      loadConfigFile
      loadGitConfigFile

      [ -z $NEXT_UPDATE_TIME ] && NEXT_UPDATE_TIME=0;
      update_timeout=$(($NEXT_UPDATE_TIME - `date +%s`))
      update_enabled=$(`gem list --local | grep -q git-pulls` && echo 1 || echo 0)
      echo "#> msg field $GIT_KODI________LIST_REQ__OWN:enable ${GIT_KODI_LIST_REQ_OWN:-0};"
      echo "#> msg field $GIT_KODI_______LIST_REQ__BASE:enable ${GIT_KODI_LIST_REQ_BASE:-0};"
      echo "#> msg field $GIT_CEF_________LIST_REQ__OWN:enable ${GIT_CEF_LIST_REQ_OWN:-0};"
      echo "#> msg field $GIT_CEF________LIST_REQ__BASE:enable ${GIT_CEF_LIST_REQ_BASE:-0};"
      checkAndInstallGitPulls

      # Main loop
      while :;do
      {
        if [ ! -f "$thread2_in" ];then
        {
          loadGitConfigFile noOutLock:
          NEXT_UPDATE_TIME=$((`date +%s`+$update_timeout))
          GIT_KODI_LIST_REQ_OWN=${local_GIT_KODI_LIST_REQ_OWN:-0}
          GIT_KODI_LIST_REQ_BASE=${local_GIT_KODI_LIST_REQ_BASE:-0}
          GIT_CEF_LIST_REQ_OWN=${local_GIT_CEF_LIST_REQ_OWN:-0}
          GIT_CEF_LIST_REQ_BASE=${local_GIT_CEF_LIST_REQ_BASE:-0}
          saveGitConfigFile noInLock;
          exit 0;
        } fi

        if [ -f ./build/global_mupel_install ];then
        {
          [ -z $SYSTEM_ACTIVE ] && exit 0;
          break;
        } fi

        if [ -z $SYSTEM_ACTIVE ];then
          echo "#> msg field -1:values;";fi

        proc="$(cat "$thread2_in")"
        echo -n "" > "$thread2_in";
        IFS=$'\n';
        for line in ${proc}; do
        {
          if [[ "$line" == "#< msg"* ]];then
          {
            loadConfigFile

            if [[ "$line" = *"show_own_kodi_requests"* ]];then
            {
              echo "#> msg field $GIT_KODI________LIST_REQ__OWN:enable 0;";
              $BASE_PATH/tools/send-button-msg openPullRequestListDialog $BASE_PATH/build/kodi-$GIT_USER/kodi/
              echo "#> msg field $GIT_KODI________LIST_REQ__OWN:enable 1;";
            }
            elif [[ "$line" = *"show_base_kodi_requests"* ]];then
            {
              echo "#> msg field $GIT_KODI_______LIST_REQ__BASE:enable 0;";
              if [ ! -d $BASE_PATH/build/kodi-xbmc/kodi ];then
              {
                showQuestionDialog "<b>Kodi base repository not present. Do you want to load?</b>";
                [ $? != 0 ] && continue;

                printf "\n${WHITE}${BRIGHT}Loading Kodi base repository from $KODI_SOURCE_URL_BASE${NORMAL} ...\n" >> $thread1_in;
                [ ! -d "$BASE_PATH/build/kodi-xbmc" ] && mkdir -p "$BASE_PATH/build/kodi-xbmc"
                handleGITLoad "$BASE_PATH/build/kodi-xbmc" kodi $KODI_SOURCE_URL_BASE master >> $thread1_in;
              } fi
              $BASE_PATH/tools/send-button-msg openPullRequestListDialog $BASE_PATH/build/kodi-xbmc/kodi/
              echo "#> msg field $GIT_KODI_______LIST_REQ__BASE:enable 1;";
            }
            elif [[ "$line" = *"kodi_prepare_patches"* ]];then
            {
              unset IFS;
              printf "\
/------------------------------------------------------------------------------

${BRIGHT}${WHITE}Prepare each commit with its patch in one file per commit ...${NORMAL}
"
              echo "#> msg field GIT_KODI______PREPARE_PATCHES:enable 0;" >> $thread2_in
              PATCH_STORE=$BASE_PATH/build/.tmp/patches-kodi
              [ ! -d $PATCH_STORE ] && mkdir $PATCH_STORE

              rm -f $PATCH_STORE/*.patch
              git -C $BASE_PATH/build/kodi-$GIT_USER/kodi format-patch origin -o $PATCH_STORE
              if [ ! -f $PATCH_STORE/0001-*.patch ];then
              {
                amount=$(showdialog --image="$BASE_PATH/icons/icon-info-128x128.png" \
                                    --entry --numeric \
                                    --title="Select already merged changes" \
                                    --text="<b>No new changes present. You can show the by selected amount already merged changes on them.</b>" \
                                    --entry-label="Number of changes to view:" \
                                    --entry-text=1);
                [ $? != 0 ] && continue;
                amount=${amount%,000000}
                [ -z $amount ] || [ $amount = 0 ] && continue;

                git -C $BASE_PATH/build/kodi-$GIT_USER/kodi format-patch -$amount -o $PATCH_STORE > /dev/stderr
              } fi

              for f in `ls $PATCH_STORE/*.patch`; do
              {
                echo $f
                cat $f | head -n 4 | tail -1 | awk -F 'PATCH ' '{print $2}' | awk -F '/' '{print $1}'
                cat $f | head -n 2 | tail -1 | awk -F 'From: ' '{print $2}' | awk -F ' <' '{print $1}'
                cat $f | tail -n +4 | tr -d '\n' | awk -F '---' '{print $1}' | cut -d ']' -f2- | cut -d ' ' -f2-
                cat $f | head -n 2 | tail -1 | awk -F '<' '{print $2}' | awk -F '>' '{print $1}'
                cat $f | head -n 3 | tail -1 | awk -F 'Date: ' '{print $2}'
              } done |
              showdialog --width=1024 --height=480 --title="Commit changes" --image="gtk-execute" \
                         --text="Double click or press enter on <b>Commit</b> to show related changes" \
                         --list --print-column=1 --hide-column=1 \
                         --dclick-action="$BASE_PATH/tools/send-button-msg openCommitChangeView $BASE_PATH/build/kodi-$GIT_USER/kodi/ $1" \
                         --column="File" --column="No.:NUM" --column="From" --column="Description" --column="Mail" --column="Date" \
                         --button=gtk-close:0 > /dev/null 2>&1

              echo "#> msg field GIT_KODI______PREPARE_PATCHES:enable 1;" >> $thread2_in

              printf "\
${BRIGHT}${WHITE}Done for '$BASE_PATH/build/kodi-$GIT_USER/kodi'${NORMAL}
Available on $PATCH_STORE

\\-------------------------------------------------------------------------------\n"
            }
            elif [[ "$line" = *"kodi_add_commit"* ]];then
            {
              unset IFS;
              echo "#> msg field $GIT_KODI___ADD_COMMIT_CHANGES:enable 0;";
              while :;do
              {
                new_commit=$(showdialog --entry \
                                             --title="Add and commit changes" \
                                             --text="<b>Enter name of the commit</b>\nBecomes also loaded up if possible" \
                                             --width=260 --center);
                if [[ -z $new_commit ]];then
                {
                  showErrorDialog_YesNo "<b>Your commit contains no text</b>\n - '${new_commit}'\n\nDo you want to try again?";
                  [ $? != 0 ] && break;
                  continue;
                }
                else
                {
                (
                  printf "\
/------------------------------------------------------------------------------

Creating new kodi commit '$new_commit' on Branch '$KODI_SOURCE_BRANCH' ...
"
                git -C $BASE_PATH/build/kodi-$GIT_USER/kodi add .
                git -C $BASE_PATH/build/kodi-$GIT_USER/kodi commit -m "$new_commit"
                if [ $? != 0 ];then
                  showWarningDialog "<b>\
Add of the new commit failed!

Does your code contains changes?</b>"
                  exit 1
                fi
                git -C $BASE_PATH/build/kodi-$GIT_USER/kodi push
                if [ $? != 0 ];then
                  showWarningDialog "<b>\
Transfer of the new commit to '$KODI_SOURCE_URL' with Branch '$KODI_SOURCE_BRANCH' failed!</b>"
                  exit 1
                fi

                printf "\
Done for '$BASE_PATH/build/kodi-$GIT_USER/kodi'

\\-------------------------------------------------------------------------------\n"
                ) | sed -u "s/.*/# &/" |
                showdialog --title="New Commit on Kodi" --image="$BASE_PATH/icons/icon-install-128x128.png" --progress --width=600 \
                           --text="Create Commit '$new_commit' on '$KODI_SOURCE_URL' ..." \
                           --pulsate --enable-log --log-expanded --log-height=300 > /dev/null;
                } fi
                break;
              } done
              echo "#> msg field $GIT_KODI___ADD_COMMIT_CHANGES:enable 1;";
            }
            elif [[ "$line" = *"kodi_new_branch"* ]];then
            {
              unset IFS;
              echo "#> msg field $GIT_KODI____CREATE_NEW_BRANCH:enable 0;";
              while :;do
              {
                new_kodi_branch=$(showdialog --entry \
                                             --title="New kodi branch" \
                                             --text="<b>Enter new kodi branch name</b>\nBecomes also loaded up if possible" \
                                             --width=260 --center);
                if [[ ! -z  `echo $new_kodi_branch | grep " "` ]];then
                {
                  showErrorDialog_YesNo "<b>Your new branch contains not allowed spaced</b>\n - '${new_kodi_branch}'\n\nDo you want to try again?";
                  [ $? != 0 ] && break;
                  continue;
                } fi
                if [ ! -z $new_kodi_branch ];then
                {
                (
                  printf "\
/------------------------------------------------------------------------------

Creating new kodi branch '$new_kodi_branch' ...
"
                git -C $BASE_PATH/build/kodi-$GIT_USER/kodi checkout master
                git -C $BASE_PATH/build/kodi-$GIT_USER/kodi checkout -b $new_kodi_branch;
                # If new branch is not on kodi source from github.com/xbmc and is loaded
                # with access rights ask to upload new branch
                if [ $GIT_USER != xbmc ] && [ ! -z `echo $KODI_SOURCE_URL | grep ":" | grep "@"` ];then
                {
                  showQuestionDialog "Do you want also upload '$new_kodi_branch' to $KODI_SOURCE_URL?";
                  if [ $? = 0 ];then
                    git -C $BASE_PATH/build/kodi-$GIT_USER/kodi push --set-upstream origin $new_kodi_branch;fi
                } fi;
                git -C $BASE_PATH/build/kodi-$GIT_USER/kodi checkout $KODI_SOURCE_BRANCH
                # Trigger to reload available branches
                echo "#< msg field SET_2_KODI________SOURCE_REPOSI:$KODI_SOURCE_URL;" >> $thread10_in

                printf "\
Done for '$BASE_PATH/build/kodi-$GIT_USER/kodi'

\\-------------------------------------------------------------------------------\n"
                ) | sed -u "s/.*/# &/" |
                showdialog --title="New Branch" --image="$BASE_PATH/icons/icon-install-128x128.png" --progress --width=600 \
                           --text="Create Branch '$new_kodi_branch' on '$KODI_SOURCE_URL' ..." \
                           --pulsate --enable-log --log-expanded --log-height=300 > /dev/null;
                } fi
                break;
              } done
              echo "#> msg field $GIT_KODI____CREATE_NEW_BRANCH:enable 1;";
            }
            elif [[ "$line" = *"show_own_cef_requests"* ]];then
            {
              echo "#> msg field $GIT_CEF_________LIST_REQ__OWN:enable 0;";
              $BASE_PATH/tools/send-button-msg openPullRequestListDialog $BASE_PATH/build/cef-$GIT_CEF_USER/cef/
              echo "#> msg field $GIT_CEF_________LIST_REQ__OWN:enable 1;";
            }
            elif [[ "$line" = *"show_base_cef_requests"* ]];then
            {
              echo "#> msg field $GIT_CEF________LIST_REQ__BASE:enable 0;";
              if [ ! -d $BASE_PATH/build/cef-chromiumembedded/cef ];then
              {
                showQuestionDialog "<b>Kodi base repository not present. Do you want to load?</b>";
                [ $? != 0 ] && continue;

                printf "\n${WHITE}${BRIGHT}Loading CEF base repository from $CEF_SOURCE_URL_BASE${NORMAL} ...\n" >> $thread1_in;
                [ ! -d "$BASE_PATH/build/cef-chromiumembedded" ] && mkdir -p "$BASE_PATH/build/cef-chromiumembedded"
                handleGITLoad "$BASE_PATH/build/cef-chromiumembedded" cef $CEF_SOURCE_URL_BASE master >> $thread1_in;
              } fi
              $BASE_PATH/tools/send-button-msg openPullRequestListDialog $BASE_PATH/build/cef-chromiumembedded/cef/
              echo "#> msg field $GIT_CEF________LIST_REQ__BASE:enable 1;";
            }
            elif [[ "$line" = *"cef_prepare_patches"* ]];then
            {
              unset IFS;
              printf "\
/------------------------------------------------------------------------------

${BRIGHT}${WHITE}Prepare each commit with its patch in one file per commit ...${NORMAL}
"
              echo "#> msg field GIT_CEF_______PREPARE_PATCHES:enable 0;" >> $thread2_in
              PATCH_STORE=$BASE_PATH/build/.tmp/patches-cef
              [ ! -d $PATCH_STORE ] && mkdir $PATCH_STORE

              rm -f $PATCH_STORE/*.patch
              git -C $BASE_PATH/build/cef-$GIT_CEF_USER/cef format-patch origin -o $PATCH_STORE
              if [ ! -f $PATCH_STORE/*.patch ];then
              {
                amount=$(showdialog --image="$BASE_PATH/icons/icon-info-128x128.png" \
                                    --entry --numeric \
                                    --title="Select already merged changes" \
                                    --text="<b>No new changes present. You can show the by selected amount already merged changes on them.</b>" \
                                    --entry-label="Number of changes to view:" \
                                    --entry-text=1);
                [ $? != 0 ] && continue;
                amount=${amount%,000000}
                [ -z $amount ] || [ $amount = 0 ] && continue;
                git -C $BASE_PATH/build/cef-$GIT_CEF_USER/cef format-patch -$amount -o $PATCH_STORE
              } fi

              for f in `ls $PATCH_STORE/*.patch`; do
              {
                echo $f
                cat $f | head -n 4 | tail -1 | awk -F 'PATCH ' '{print $2}' | awk -F '/' '{print $1}'
                cat $f | head -n 2 | tail -1 | awk -F 'From: ' '{print $2}' | awk -F ' <' '{print $1}'
                cat $f | tail -n +4 | tr -d '\n' | awk -F '---' '{print $1}' | cut -d ']' -f2- | cut -d ' ' -f2-
                cat $f | head -n 2 | tail -1 | awk -F '<' '{print $2}' | awk -F '>' '{print $1}'
                cat $f | head -n 3 | tail -1 | awk -F 'Date: ' '{print $2}'
              } done |
              showdialog --width=1024 --height=480 --title="Commit changes" --image="gtk-execute" \
                         --text="Double click or press enter on <b>Commit</b> to show related changes" \
                         --list --print-column=1 --hide-column=1 \
                         --dclick-action="$BASE_PATH/tools/send-button-msg openCommitChangeView $BASE_PATH/build/cef-$GIT_CEF_USER/cef/ $1" \
                         --column="File" --column="No.:NUM" --column="From" --column="Description" --column="Mail" --column="Date" \
                         --button=gtk-close:0 > /dev/null 2>&1

              echo "#> msg field GIT_CEF_______PREPARE_PATCHES:enable 1;" >> $thread2_in

              printf "\
${BRIGHT}${WHITE}Done for '$BASE_PATH/build/cef-$GIT_CEF_USER/cef'${NORMAL}
Available on $PATCH_STORE

\\-------------------------------------------------------------------------------\n"
            }
            elif [[ "$line" = *"cef_add_commit"* ]];then
            {
              unset IFS;
              echo "#> msg field $GIT_CEF____ADD_COMMIT_CHANGES:enable 0;";
              while :;do
              {
                new_commit=$(showdialog --entry \
                                             --title="Add and commit changes" \
                                             --text="<b>Enter name of the commit</b>\nBecomes also loaded up if possible" \
                                             --width=260 --center);
                if [[ -z $new_commit ]];then
                {
                  showErrorDialog_YesNo "<b>Your commit contains no text</b>\n - '${new_commit}'\n\nDo you want to try again?";
                  [ $? != 0 ] && break;
                  continue;
                }
                else
                {
                (
                  printf "\
/------------------------------------------------------------------------------

Creating new CEF commit '$new_commit' on Branch '$CEF_SOURCE_BRANCH' ...
"
                git -C $BASE_PATH/build/cef-$GIT_CEF_USER/cef add .
                git -C $BASE_PATH/build/cef-$GIT_CEF_USER/cef commit -m "$new_commit"
                if [ $? != 0 ];then
                  showWarningDialog "<b>\
Add of the new commit failed!

Does your code contains changes?</b>"
                  exit 1
                fi
                git -C $BASE_PATH/build/cef-$GIT_CEF_USER/cef push
                if [ $? != 0 ];then
                  showWarningDialog "<b>\
Transfer of the new commit to '$CEF_SOURCE_URL' with Branch '$CEF_SOURCE_BRANCH' failed!</b>"
                  exit 1
                fi

                printf "\
Done for '$BASE_PATH/build/cef-$GIT_CEF_USER/cef'

\\-------------------------------------------------------------------------------\n"
                ) | sed -u "s/.*/# &/" |
                showdialog --title="New Commit on CEF" --image="$BASE_PATH/icons/icon-install-128x128.png" --progress --width=600 \
                           --text="Create Commit '$new_commit' on '$CEF_SOURCE_URL' ..." \
                           --pulsate --enable-log --log-expanded --log-height=300 > /dev/null;
                } fi
                break;
              } done
              echo "#> msg field $GIT_CEF____ADD_COMMIT_CHANGES:enable 1;";
            }
            elif [[ "$line" = *"cef_new_branch"* ]];then
            {
              unset IFS;
              echo "#> msg field $GIT_CEF_____CREATE_NEW_BRANCH:enable 0;";
              while :;do
              {
                new_cef_branch=$(showdialog --entry \
                                             --title="New CEF branch" \
                                             --text="<b>Enter new CEF branch name</b>\nBecomes also loaded up if possible" \
                                             --width=260 --center);
                if [[ ! -z  `echo $new_cef_branch | grep " "` ]];then
                {
                  showErrorDialog_YesNo "<b>Your new branch contains not allowed spaced</b>\n - '${new_cef_branch}'\n\nDo you want to try again?";
                  [ $? != 0 ] && break;
                  continue;
                } fi
                if [ ! -z $new_cef_branch ];then
                {
                (
                  printf "\
/------------------------------------------------------------------------------

Creating new CEF branch '$new_cef_branch' ...
"
                git -C $BASE_PATH/build/cef-$GIT_CEF_USER/cef checkout master
                git -C $BASE_PATH/build/cef-$GIT_CEF_USER/cef checkout -b $new_cef_branch;
                # If new branch is not on cef source from github.com/xbmc and is loaded
                # with access rights ask to upload new branch
                if [ $GIT_CEF_USER != xbmc ] && [ ! -z `echo $CEF_SOURCE_URL | grep ":" | grep "@"` ];then
                {
                  showQuestionDialog "Do you want also upload '$new_cef_branch' to $CEF_SOURCE_URL?";
                  if [ $? = 0 ];then
                    git -C $BASE_PATH/build/cef-$GIT_CEF_USER/cef push --set-upstream origin $new_cef_branch;fi
                } fi;
                git -C $BASE_PATH/build/cef-$GIT_CEF_USER/cef checkout $CEF_SOURCE_BRANCH
                # Trigger to reload available branches
                echo "#< msg field SET_2_CEF_________SOURCE_REPOSI:$CEF_SOURCE_URL;" >> $thread10_in

                printf "\
Done for '$BASE_PATH/build/cef-$GIT_CEF_USER/cef'

\\-------------------------------------------------------------------------------\n"
                ) | sed -u "s/.*/# &/" |
                showdialog --title="New Branch" --image="$BASE_PATH/icons/icon-install-128x128.png" --progress --width=600 \
                           --text="Create Branch '$new_cef_branch' on '$CEF_SOURCE_URL' ..." \
                           --pulsate --enable-log --log-expanded --log-height=300 --button=gtk-cancel:1 > /dev/null;
                } fi
                break;
              } done
              echo "#> msg field $GIT_CEF_____CREATE_NEW_BRANCH:enable 1;";
            }
            else
              echo "Wrong command! $line" > /dev/stderr;fi
          }
          else
          {
            echo "$line"
          } fi
        } done

        if [ $update_enabled = 1 ];then
        {
          ((update_timeout--))
          if (( $update_timeout <= 0 ));then
          {
            update_timeout=$(( $REQUEST_UPDATE_TIMEOUT * 2 ));

            [ -d $BASE_PATH/build/kodi-$GIT_USER/kodi/ ]      &&
              git -C $BASE_PATH/build/kodi-$GIT_USER/kodi/      pulls update &&
                local_GIT_KODI_LIST_REQ_OWN=1 || local_GIT_KODI_LIST_REQ_OWN=0;
            [ -d $BASE_PATH/build/kodi-xbmc/kodi/ ]           &&
              git -C $BASE_PATH/build/kodi-xbmc/kodi/           pulls update &&
                local_GIT_KODI_LIST_REQ_BASE=1 || local_GIT_KODI_LIST_REQ_BASE=0;
            [ -d $BASE_PATH/build/cef-$GIT_CEF_USER/cef/ ]    &&
              git -C $BASE_PATH/build/cef-$GIT_CEF_USER/cef/    pulls update &&
                local_GIT_CEF_LIST_REQ_OWN=1 || local_GIT_CEF_LIST_REQ_OWN=0;
            [ -d $BASE_PATH/build/cef-chromiumembedded/cef/ ] &&
              git -C $BASE_PATH/build/cef-chromiumembedded/cef/ pulls update &&
                local_GIT_CEF_LIST_REQ_BASE=1 || local_GIT_CEF_LIST_REQ_BASE=0;

            echo "#> msg field $GIT_KODI________LIST_REQ__OWN:enable $local_GIT_KODI_LIST_REQ_OWN;";
            echo "#> msg field $GIT_KODI_______LIST_REQ__BASE:enable $local_GIT_KODI_LIST_REQ_BASE;";
            echo "#> msg field $GIT_CEF_________LIST_REQ__OWN:enable $local_GIT_CEF_LIST_REQ_OWN;";
            echo "#> msg field $GIT_CEF________LIST_REQ__BASE:enable $local_GIT_CEF_LIST_REQ_BASE;";

            loadGitConfigFile noOutLock:
            NEXT_UPDATE_TIME=$((`date +%s`+$update_timeout))
            GIT_KODI_LIST_REQ_OWN=${local_GIT_KODI_LIST_REQ_OWN:-0}
            GIT_KODI_LIST_REQ_BASE=${local_GIT_KODI_LIST_REQ_BASE:-0}
            GIT_CEF_LIST_REQ_OWN=${local_GIT_CEF_LIST_REQ_OWN:-0}
            GIT_CEF_LIST_REQ_BASE=${local_GIT_CEF_LIST_REQ_BASE:-0}
            saveGitConfigFile noInLock;
          } fi
        } fi

        sleep 0.5;
      } done
    }
    done
  ) | \
  $YAD_MUPEL --plug=$KEY --tabnum=$TAB_NUM --form \
                   --text="Git checks" \
                   --pulsate \
                   --xcom-log=$thread2_in \
                   --field="<b>Kodi:</b>:LBL@0,8,0,2" '' \
                   --field="Pull requests (Own):FBTN@0,1,2,4"     "bash -c 'echo \"#< msg show_own_kodi_requests;\" >> $thread2_in'" \
                   --field="Pull requests (Base):FBTN@2,3,2,4"    "bash -c 'echo \"#< msg show_base_kodi_requests;\" >> $thread2_in'" \
                   --field="Create new branch:FBTN@4,4,2,4"       "bash -c 'echo \"#< msg kodi_new_branch;\" >> $thread2_in'" \
                   --field="Show changes:FBTN@5,5,2,4"            "bash -c 'echo \"#< msg kodi_prepare_patches;\" >> $thread2_in'" \
                   --field="Add and commit changes:FBTN@6,7,2,4"  "bash -c 'echo \"#< msg kodi_add_commit;\" >> $thread2_in'" \
                   --field=":LBL@0,8,4,6"                         '' \
                   --field="<b>CEF (Chromium embedded framwork):</b>:LBL@0,8,6,8" '' \
                   --field="Pull requests (Own):FBTN@0,1,8,10"    "bash -c 'echo \"#< msg show_own_cef_requests;\" >> $thread2_in'" \
                   --field="Pull requests (Base):FBTN@2,3,8,10"   "bash -c 'echo \"#< msg show_base_cef_requests;\" >> $thread2_in'" \
                   --field="Create new branch:FBTN@4,4,8,10"      "bash -c 'echo \"#< msg cef_new_branch;\" >> $thread2_in'" \
                   --field="Show changes:FBTN@5,5,8,10"           "bash -c 'echo \"#< msg cef_prepare_patches;\" >> $thread2_in'" \
                   --field="Add and commit changes:FBTN@6,7,8,10" "bash -c 'echo \"#< msg cef_add_commit;\" >> $thread2_in'" \
                   --field=":LBL@0,8,10,12"                       '' \
                   --field="<b>Other options:</b>:LBL@0,8,12,14"  '' \
                   --field="Show used Git SSH key:FBTN@0,1,14,16" "$BASE_PATH/tools/send-button-msg showSSHkey" \
                   --field=":XTALK" '' > /dev/null 2>&1 &
  pid_thread2=$!
}

TAB_LIST+="--tab=Git checks "
((TAB_NUM++))

#
###############################################################################

###############################################################################
# Thread three: Handle Linux 64 bit (or 32 bit on single OS build system, to match my old Laptop ;D )
if [[ $USE_LINUX_X86_32 = "TRUE" ]] || [[ $USE_LINUX_X86_64 = "TRUE" ]];then
{
  (
    sleep 0.5;

    pulse_on=0;
    process_active=0;
    KODI_DEBUG_PID="";

    while :;do
    {
      if [ -f ./build/global_mupel_install ];then
      {
        [ -z $SYSTEM_ACTIVE ] && exit 0;
        sleep 2;
        continue;
      } fi

      loadConfigFile;

      check_sleep_time=0;

      # Force on start remove of active running kodi flags
      [ -f $BASE_PATH/build/kodi-$GIT_USER/kodi-linux-x86_32/active ] && rm $BASE_PATH/build/kodi-$GIT_USER/kodi-linux-x86_32/active
      [ -f $BASE_PATH/build/kodi-$GIT_USER/kodi-linux-x86_64/active ] && rm $BASE_PATH/build/kodi-$GIT_USER/kodi-linux-x86_64/active

      # Set buttons to initial state
      echo "#> msg field $BUILD__BTN_____BUILD_COMPLETE:visible 1;";
      echo "#> msg field $BUILD__BTN__BUILD_KODI_DIRECT:visible 1;";
      echo "#> msg field $BUILD__BTN___BUILD_CEF_DIRECT:visible 1;";
      echo "#> msg field $BUILD__BTN____BUILD_SEL_ADDON:visible 1;";
      echo "#> msg field $BUILD__BTN_________STOP_BUILD:visible 0;";
      if [ -f "$BASE_PATH/build/kodi-$GIT_USER/kodi-linux-$LINUX_BUILD_TYPE/kodi.bin" ];then
      {
        kodi_direct=1
        parse_values "add-ons" "linux-$LINUX_BUILD_TYPE"
      }
      else
        kodi_direct=0;fi

      echo "#> msg field $BUILD__BTN__BUILD_KODI_DIRECT:enable $([ -f "$BASE_PATH/build/kodi-$GIT_USER/kodi-linux-$LINUX_BUILD_TYPE/configure" ] && echo 1 || echo 0);";
      echo "#> msg field $BUILD__BTN____BUILD_SEL_ADDON:enable $kodi_direct;";
      echo "#> msg field $BUILD__BTN________LAUNCH_KODI:enable $kodi_direct;";

      kodiPID=$(pgrep kodi.bin);
      ret=$?;
      echo "#> msg field $BUILD__BTN________LAUNCH_KODI:visible $([ $ret = 0 ] && echo 0 || echo 1);";
      echo "#> msg field $BUILD__BTN___________DEBUGGER:visible $([ $ret = 0 ] && echo 1 || echo 0);";

      echo "#> msg field $BUILD__BTN___FORCE_BUILD_STEP:enable 1;";
      echo "#> msg field $BUILD__BTN_PERF_CODE_DEPCLEAN:enable 1;";
      echo "#> msg field $BUILD__CB______________ADD_ON:enable $kodi_direct;";
      echo "#> msg field $BUILD__BTN___BUILD_CEF_DIRECT:enable $([ -f "$BASE_PATH/build/cef-$GIT_CEF_USER/cef-$CEF_SOURCE_BRANCH-linux-$LINUX_BUILD_TYPE.active" ] && echo 1 || echo 0);";

      # Main loop
      while :;do
      {
        if [ ! -f "$thread3_in" ];then
          exit 0;fi

        if [ -f ./build/global_mupel_install ];then
        {
          [ -z $SYSTEM_ACTIVE ] && exit 0;
          break;
        } fi

        if [ -z $SYSTEM_ACTIVE ];then
          echo "#> msg field -1:values;";fi

        proc="$(cat "$thread3_in")"
        echo -n "" > "$thread3_in";
        IFS=$'\n';
        for line in ${proc}; do
        {
          if [[ "$line" == "#< msg"* ]];then
          {
            [[ "$line" = *"start_direct_build_kodi"* ]] &&
              is_direct_kodi=1 || is_direct_kodi=0;
            [[ "$line" = *"start_direct_build_cef"* ]] &&
              is_direct_cef=1 || is_direct_cef=0;
            [[ "$line" = *"update_binary_distrib"* ]] &&
              is_update=1 || is_update=0;

            if [[ "$line" = *"start_build"* ]] ||
               [[ "$is_direct_cef" = 1 ]] ||
               [[ "$is_direct_kodi" = 1 ]] ||
               [[ "$line" = *"start_addon_build"* ]] ||
               [[ "$line" = *"kodi_force_build_step"* ]] ||
               [[ "$line" = *"update_binary_distrib"* ]];then
            {
              loadConfigFile;

              echo "#> msg pulse on;";
              echo "#> msg field $BUILD__BTN_____BUILD_COMPLETE:visible 0;";
              echo "#> msg field $BUILD__BTN__BUILD_KODI_DIRECT:visible 0;";
              echo "#> msg field $BUILD__BTN___BUILD_CEF_DIRECT:visible 0;";
              echo "#> msg field $BUILD__BTN____BUILD_SEL_ADDON:visible 0;";
              echo "#> msg field $BUILD__BTN_UPDATE_BINARY_DIST:visible 0;";
              echo "#> msg field $BUILD__BTN_________STOP_BUILD:visible 1;";
              echo "#> msg field $BUILD__BTN________LAUNCH_KODI:enable 0;";
              echo "#> msg field $BUILD__BTN___FORCE_BUILD_STEP:enable 0;";
              echo "#> msg field $BUILD__BTN_PERF_CODE_DEPCLEAN:enable 0;";
              echo "#> msg field $BUILD__CB______________ADD_ON:enable 0;";

              [ $LINUX_BUILD_TYPE = x86_64 ] && BITSIZE=64 || BITSIZE=32;

              pulse_on=1
              echo "#> msg field $BUILD__TERMPROC_____BUILD_LOG:clear;"
              if [[ "$line" = *"start_build"* ]] ||
                 [[ "$is_direct_cef" = 1 ]]      ||
                 [[ "$is_direct_kodi" = 1 ]]     ||
                 [[ "$is_update" = 1 ]];then
                buildThreadForOS "linux-$LINUX_BUILD_TYPE" "${USE_LINUX_X86_DISTR}${BITSIZE}" $is_direct_cef $is_direct_kodi $is_update;
              elif [[ "$line" = *"start_addon_build"* ]];then
                buildThreadKodiAddonForOS "linux-$LINUX_BUILD_TYPE" "${USE_LINUX_X86_DISTR}${BITSIZE}" "$KODI_SEL_ADDON";
              elif [[ "$line" = *"kodi_force_build_step"* ]];then
                forceKodiSelectedBuild "linux-$LINUX_BUILD_TYPE" "${USE_LINUX_X86_DISTR}${BITSIZE}" linux${BITSIZE};fi
            }
            elif [[ "$line" = *"stop_build"* ]];then
            {
              if [ -f "$TEMP_DIR/build_thread-linux-$LINUX_BUILD_TYPE.pid" ];then
              {
                pid_to_kill=$(cat "$TEMP_DIR/build_thread-linux-$LINUX_BUILD_TYPE.pid");
                ps -p $pid_to_kill > /dev/null
                if [[ $? = 0 ]];then
                {
                  killtree $pid_to_kill KILL;
                  kill $pid_to_kill
                } fi
                rm -f "$TEMP_DIR/build_thread-linux-$LINUX_BUILD_TYPE.pid"
              } fi

              echo ""
              if [[ $pulse_on = 1 ]];then
              {
                echo "#> msg pulse off;";
                pulse_on=0;
              } fi
              echo "#> msg percent 0;";
              echo "#> msg field $BUILD__BTN_____BUILD_COMPLETE:visible 1;";
              echo "#> msg field $BUILD__BTN__BUILD_KODI_DIRECT:visible 1;";
              echo "#> msg field $BUILD__BTN___BUILD_CEF_DIRECT:visible 1;";
              echo "#> msg field $BUILD__BTN____BUILD_SEL_ADDON:visible 1;";
              echo "#> msg field $BUILD__BTN_UPDATE_BINARY_DIST:visible 1;";
              echo "#> msg field $BUILD__BTN_________STOP_BUILD:visible 0;";
              if [ -f "$BASE_PATH/build/kodi-$GIT_USER/kodi-linux-$LINUX_BUILD_TYPE/kodi.bin" ];then
                kodi_direct=1
              else
                kodi_direct=0;fi
              echo "#> msg field $BUILD__BTN__BUILD_KODI_DIRECT:enable $([ -f "$BASE_PATH/build/kodi-$GIT_USER/kodi-linux-$LINUX_BUILD_TYPE/configure" ] && echo 1 || echo 0);";
              echo "#> msg field $BUILD__BTN____BUILD_SEL_ADDON:enable $kodi_direct;";
              echo "#> msg field $BUILD__BTN_UPDATE_BINARY_DIST:enable $kodi_direct;";
              echo "#> msg field $BUILD__BTN________LAUNCH_KODI:enable $kodi_direct;";
              echo "#> msg field $BUILD__BTN___________DEBUGGER:visible 0;";
              echo "#> msg field $BUILD__BTN___FORCE_BUILD_STEP:enable 1;";
              echo "#> msg field $BUILD__BTN_PERF_CODE_DEPCLEAN:enable 1;";
              echo "#> msg field $BUILD__CB______________ADD_ON:enable $kodi_direct;";
              echo "#> msg field $BUILD__BTN___BUILD_CEF_DIRECT:enable $([ -f "$BASE_PATH/build/cef-$GIT_CEF_USER/cef-$CEF_SOURCE_BRANCH-linux-$LINUX_BUILD_TYPE.active" ] && echo 1 || echo 0);";
            }
            elif [[ "$line" = *"depclean"* ]];then
            {
              showWarningDialog_YesNo "<b>All extra files on kodi not included in GIT becomes removed! \n\nAre you sure?</b>"
              if [ $? = 0 ];then
              {
                echo "#> msg field $BUILD__BTN___FORCE_BUILD_STEP:enable 0;";
                git -C "$BASE_PATH/build/kodi-$GIT_USER/kodi-linux-$LINUX_BUILD_TYPE" clean -dffx;
                echo "Cleanup done"
                echo "#> msg field $BUILD__BTN___FORCE_BUILD_STEP:enable 1;";
                echo "#> msg field $BUILD__BTN__BUILD_KODI_DIRECT:enable 0;";
                echo "#> msg field $BUILD__BTN____BUILD_SEL_ADDON:enable 0;";
                echo "#> msg field $BUILD__BTN_UPDATE_BINARY_DIST:enable 0;";
                echo "#> msg field $BUILD__BTN_PERF_CODE_DEPCLEAN:enable 0;";
                echo "#> msg field $BUILD__CB______________ADD_ON:enable 0;";
              } fi
            }
            elif [[ "$line" = *"openlogs"* ]];then
            {
              $TEXT_VIEVER \
                $BASE_PATH/build/creation-general.log \
                $BASE_PATH/build/creation-kodi-linux-$LINUX_BUILD_TYPE.log \
                $BASE_PATH/build/creation-cef-linux-$LINUX_BUILD_TYPE.log;
            }
            elif [[ "$line" = *"kodilaunch"* ]];then
            {
              bash $BASE_PATH/tools/kodi.launch kodi-linux-$LINUX_BUILD_TYPE $thread3_in
            }
            elif [[ "$line" = *"debugger"* ]];then
            {
              loadConfigFile;

              # @todo remove forced type and make selectable
              INSTALL_DIR_TYPE="Release"

              kodiPID=$(pgrep kodi.bin)
              ret=$?
              if [ $ret = 0 ];then
              {
                if [[ $KODI_DEBUG_PID != "" ]];then
                {
                  showWarningDialog_YesNo "<b>\
Debugger already be active!

Do you want to kill active one and restart?
</b>"
                  if [ $? != 0 ];then
                    continue;fi

                  sudo -A -- killtree $KODI_DEBUG_PID KILL;

                  KODI_DEBUG_PID="";
                } fi

                echo "#> msg field $BUILD__BTN___________DEBUGGER:enable 0;";

                if [ $USE_GUI_DEBUG = TRUE ];then
                {
                  # Helpfull URL to find GUI controlled debugger: https://sourceware.org/gdb/wiki/GDB%20Front%20Ends

                  sudo -A -- kdbg -l CPP -p $kodiPID $BASE_PATH/build/kodi-$GIT_USER/binary_distrib/$INSTALL_DIR_TYPE/kodi/$LINUX_BUILD_TYPE-linux-gnu/lib/kodi/kodi.bin > /dev/null 2>&1 &
                  KODI_DEBUG_PID=$!
                }
                else
                {
                  which konsole >/dev/null
                  if [ "$?" = "0" ];then
                    sudo -A -- konsole --hide-tabbar --hide-menubar --e gdb --pid=$kodiPID --directory=$BASE_PATH/build/kodi-$GIT_USER/kodi-linux-$LINUX_BUILD_TYPE > /dev/null 2>&1 &
                    KODI_DEBUG_PID=$!
                    continue;
                  fi

                  which gnome-terminal >/dev/null
                  if [ "$?" = "0" ];then
                    sudo -A -- gnome-terminal --hide-menubar --title="GNU Project Debugger" -- gdb --pid=$kodiPID --directory=$BASE_PATH/build/kodi-$GIT_USER/kodi-linux-$LINUX_BUILD_TYPE > /dev/null 2>&1 &
                    KODI_DEBUG_PID=$!
                    continue;
                  fi

                  sudo -A -- xterm -T "GNU Project Debugger" -bg black -fg white -e gdb --pid=$kodiPID --directory=$BASE_PATH/build/kodi-$GIT_USER/kodi-linux-$LINUX_BUILD_TYPE > /dev/null 2>&1 &
                  KODI_DEBUG_PID=$!
                } fi
              }
              else
              {
                showWarningDialog "<b>
Needed kodi.bin PID for use on GNU Project Debugger not found! </b>

If Kodi crash immediately after start add a temporary 'sleep(10);' to 'bool CApplication::Create()' in Application.cpp.

This give 10 seconds time to start debugger."
              } fi
            }
            elif [[ "$line" = *"field $BUILD__BTN________LAUNCH_KODI:"* ]];then
            {
              enable=$(echo ${line} | awk -F'enable ' '{ print $2 }' | awk -F\; '{ print $1 }')
              echo "#> msg field $BUILD__BTN________LAUNCH_KODI:enable $enable;"
              if [ $enable = 1 ];then
              {
                kodiPID=$(pgrep kodi.bin)
                ret=$?
                echo "#> msg field $BUILD__BTN________LAUNCH_KODI:visible $([ $ret = 0 ] && echo 0 || echo 1);";
                echo "#> msg field $BUILD__BTN___________DEBUGGER:visible $([ $ret = 0 ] && echo 1 || echo 0);";
              } fi
            }
            elif [[ "$line" = *"field $BUILD__CB______________ADD_ON:"* ]];then
            {
              KODI_SEL_ADDON=$(echo ${line} | awk -F\| '{ print $1 }' | awk -F\: '{ print $2 }')
              if [[ $KODI_SEL_ADDON != "(null)" ]];then
              {
                export KODI_SEL_ADDON
                saveConfigFile;
              } fi
            }
            elif [[ "$line" = *"field"* ]];then
            {
              IFS=$'\n'; for p in ${line}; do
                id=$(echo ${p} | awk -F ' ' '{print $4}' | awk -F ':' '{print $1}')
                value=$(echo ${p#*:} | awk -F ';' '{print $1}')
                IFS=$'|';
                if [[ "$id" -ge "0" ]];then
                  parse_values "linux-$LINUX_BUILD_TYPE" $id "$value"
                else
                  id2=0
                  IFS=$'|';
                  for value2 in ${value}; do
                    parse_values "linux-$LINUX_BUILD_TYPE" $id2 "$value2"
                    ((id2++))
                  done;
                fi; IFS=$'\n';
              done; unset IFS;
              saveConfigFile;
              [ -z $SYSTEM_ACTIVE ] && exit 0;
            }
            else
              echo "Wrong command! $line" > /dev/stderr;fi
          }
          else
          {
            echo "$line"
          } fi
        } done

        if [ -f "$TEMP_DIR/build_thread-linux-$LINUX_BUILD_TYPE.pid" ];then
        {
          process_active=1
        }
        elif [[ $process_active != 0 ]];then
        {
          echo "#< msg stop_build;" >> "$thread3_in";
          process_active=0;
        } fi

        if [ $check_sleep_time = 8 ];then
        {
          check_sleep_time=0;

          # Check Kodi running to set start and debug buttons
          kodiPID=$(pgrep kodi.bin)
          ret=$?
          echo "#> msg field $BUILD__BTN________LAUNCH_KODI:visible $([ $ret = 0 ] && echo 0 || echo 1);";
          echo "#> msg field $BUILD__BTN___________DEBUGGER:visible $([ $ret = 0 ] && echo 1 || echo 0);";

          if [[ $KODI_DEBUG_PID != "" ]];then
          {
            ps -f $KODI_DEBUG_PID | tail -1 | grep -q 'kdbg'
            [ $? != 0 ] && KODI_DEBUG_PID="";
          } fi

          echo "#> msg field $BUILD__BTN___________DEBUGGER:enable $([[ $KODI_DEBUG_PID = "" ]] && echo 1 || echo 0);";
        } fi
        ((check_sleep_time++))

        sleep 0.75;
      } done
    }
    done
  ) | \
  $YAD_MUPEL --plug=$KEY --tabnum=$TAB_NUM --form \
             --text="Linux x86 (Debian/Ubuntu based)" \
             --pulsate \
             --xcom-log=$thread3_in \
             --field="Build complete:FBTN@0,1,0,2"        "bash -c 'echo \"#< msg start_build\" >> $thread3_in'" \
             --field="Build kodi direct:FBTN@2,3,0,2"     "bash -c 'echo \"#< msg start_direct_build_kodi\" >> $thread3_in'" \
             --field="Build CEF direct:FBTN@4,4,0,2"      "bash -c 'echo \"#< msg start_direct_build_cef\" >> $thread3_in'" \
             --field="Update binary distrib:FBTN@5,5,0,2" "bash -c 'echo \"#< msg update_binary_distrib\" >> $thread3_in'" \
             --field="Build selected addon:FBTN@8,8,0,2"  "bash -c 'echo \"#< msg start_addon_build\" >> $thread3_in'" \
             --field="Stop build:FBTN@0,8,2,4"            "bash -c 'echo \"#< msg stop_build\" >> $thread3_in'" \
             --field="Clear log:FBTN@0,0,4,6"             "bash -c 'echo \"#> msg field 12:clear;\" >> $thread3_in'" \
             --field="Open last logs:FBTN@1,1,4,6"        "bash -c 'echo \"#< msg openlogs\" >> $thread3_in'" \
             --field="Launch Kodi:FBTN@2,3,4,6"           "bash -c 'echo \"#< msg kodilaunch\" >> $thread3_in'" \
             --field="Open debugger:FBTN@2,3,4,6"         "bash -c 'echo \"#< msg debugger\" >> $thread3_in'" \
             --field="Force build step:FBTN@4,4,4,6"      "bash -c 'echo \"#< msg kodi_force_build_step\" >> $thread3_in'" \
             --field="Perform code depclean:FBTN@5,5,4,6" "bash -c 'echo \"#< msg depclean\" >> $thread3_in'" \
             --field="Add-on:CB@7,8,4,6" '' \
             --field="Build log:termproc@0,9,8,10" "" > /dev/null 2>&1 &
  pid_thread3=$!

  TAB_LIST+="--tab=Linux-x86 "
  ((TAB_NUM++))
} fi
#
###############################################################################

###############################################################################
# Thread four: Handle Linux Raspberry PI
if [[ $USE_LINUX_RPBI = "TRUE" ]];then
{
  (
    sleep 0.5;

    pulse_on=0;
    process_active=0

    while :;do
    {
      if [ -f ./build/global_mupel_install ];then
      {
        [ -z $SYSTEM_ACTIVE ] && exit 0;
        sleep 2;
        continue;
      } fi

      loadConfigFile

      # Set buttons to initial state
      echo "#> msg field $BUILD__BTN_____BUILD_COMPLETE:visible 1;";
      echo "#> msg field $BUILD__BTN__BUILD_KODI_DIRECT:visible 1;";
      echo "#> msg field $BUILD__BTN___BUILD_CEF_DIRECT:visible 1;";
      echo "#> msg field $BUILD__BTN____BUILD_SEL_ADDON:visible 1;";
      echo "#> msg field $BUILD__BTN_________STOP_BUILD:visible 0;";
      echo "#> msg field $BUILD__BTN_UPDATE_BINARY_DIST:visible 0;"; # Set off (currenly not supported)
      if [ -f "$BASE_PATH/build/kodi-$GIT_USER/kodi-linux-rpbi/kodi.bin" ];then
      {
        kodi_direct=1
        parse_values "add-ons" "linux-rpbi"
      }
      else
        kodi_direct=0;fi
      echo "#> msg field $BUILD__BTN__BUILD_KODI_DIRECT:enable $([ -f "$BASE_PATH/build/kodi-$GIT_USER/kodi-linux-rpbi/configure" ] && echo 1 || echo 0);";
      echo "#> msg field $BUILD__BTN____BUILD_SEL_ADDON:enable $kodi_direct;";
      echo "#> msg field $BUILD__BTN________LAUNCH_KODI:enable $kodi_direct;";
      echo "#> msg field $BUILD__BTN___________DEBUGGER:visible 0;";

      echo "#> msg field $BUILD__BTN___FORCE_BUILD_STEP:enable 1;";
      echo "#> msg field $BUILD__BTN_PERF_CODE_DEPCLEAN:enable 1;";
      echo "#> msg field $BUILD__CB______________ADD_ON:enable $kodi_direct;";
      echo "#> msg field $BUILD__BTN___BUILD_CEF_DIRECT:enable $([ -f "$BASE_PATH/build/cef-$GIT_CEF_USER/cef-$CEF_SOURCE_BRANCH-linux-rpbi.active" ] && echo 1 || echo 0);";

      # Main loop
      while :;do
      {
        if [ ! -f "$thread4_in" ];then
          exit 0;fi

        if [ -f ./build/global_mupel_install ];then
        {
          [ -z $SYSTEM_ACTIVE ] && exit 0;
          break;
        } fi

        if [ -z $SYSTEM_ACTIVE ];then
          echo "#> msg field -1:values;";fi

        proc="$(cat "$thread4_in")"
        echo -n "" > "$thread4_in";
        IFS=$'\n';
        for line in ${proc}; do
        {
          if [[ "$line" == "#< msg"* ]];then
          {
            [[ "$line" = *"start_direct_build_kodi"* ]] &&
              is_direct_kodi=1 || is_direct_kodi=0;
            [[ "$line" = *"start_direct_build_cef"* ]] &&
              is_direct_cef=1 || is_direct_cef=0;
            [[ "$line" = *"update_binary_distrib"* ]] &&
              is_update=1 || is_update=0;

            if [[ "$line" = *"start_build"* ]] ||
               [[ "$is_direct_cef" = 1 ]] ||
               [[ "$is_direct_kodi" = 1 ]] ||
               [[ "$line" = *"start_addon_build"* ]] ||
               [[ "$line" = *"kodi_force_build_step"* ]] ||
               [[ "$line" = *"update_binary_distrib"* ]];then
            {
              loadConfigFile

              echo "#> msg pulse on;";
              echo "#> msg field $BUILD__BTN_____BUILD_COMPLETE:visible 0;";
              echo "#> msg field $BUILD__BTN__BUILD_KODI_DIRECT:visible 0;";
              echo "#> msg field $BUILD__BTN___BUILD_CEF_DIRECT:visible 0;";
              echo "#> msg field $BUILD__BTN____BUILD_SEL_ADDON:visible 0;";
              echo "#> msg field $BUILD__BTN_UPDATE_BINARY_DIST:visible 0;";
              echo "#> msg field $BUILD__BTN_________STOP_BUILD:visible 1;";
              echo "#> msg field $BUILD__BTN________LAUNCH_KODI:enable 0;";
              echo "#> msg field $BUILD__BTN___FORCE_BUILD_STEP:enable 0;";
              echo "#> msg field $BUILD__BTN_PERF_CODE_DEPCLEAN:enable 0;";
              echo "#> msg field $BUILD__CB______________ADD_ON:enable 0;";

              pulse_on=1
              echo "#> msg field $BUILD__TERMPROC_____BUILD_LOG:clear;"
              if [[ "$line" = *"start_build"* ]] ||
                 [[ "$is_direct_cef" = 1 ]]      ||
                 [[ "$is_direct_kodi" = 1 ]]     ||
                 [[ "$is_update" = 1 ]];then
                buildThreadForOS "linux-rpbi" "${USE_LINUX_X86_DISTR}32" $is_direct_cef $is_direct_kodi $is_update;
              elif [[ "$line" = *"start_addon_build"* ]];then
                buildThreadKodiAddonForOS "linux-rpbi" "${USE_LINUX_X86_DISTR}32" "$KODI_SEL_ADDON";
              elif [[ "$line" = *"kodi_force_build_step"* ]];then
                forceKodiSelectedBuild "linux-rpbi" "${USE_LINUX_X86_DISTR}32" linux32;fi
            }
            elif [[ "$line" = *"stop_build"* ]];then
            {
              if [ -f "$TEMP_DIR/build_thread-linux-rpbi.pid" ];then
              {
                pid_to_kill=$(cat "$TEMP_DIR/build_thread-linux-rpbi.pid");
                ps -p $pid_to_kill > /dev/null
                if [[ $? = 0 ]];then
                {
                  killtree $pid_to_kill KILL;
                  kill $pid_to_kill
                } fi
                rm -f "$TEMP_DIR/build_thread-linux-rpbi.pid"
              } fi

              echo ""
              if [[ $pulse_on = 1 ]];then
              {
                echo "#> msg pulse off;";
                pulse_on=0;
              } fi
              echo "#> msg percent 0;";
              echo "#> msg field $BUILD__BTN_____BUILD_COMPLETE:visible 1;";
              echo "#> msg field $BUILD__BTN__BUILD_KODI_DIRECT:visible 1;";
              echo "#> msg field $BUILD__BTN___BUILD_CEF_DIRECT:visible 1;";
              echo "#> msg field $BUILD__BTN____BUILD_SEL_ADDON:visible 1;";
              echo "#> msg field $BUILD__BTN_________STOP_BUILD:visible 0;";
              if [ -f "$BASE_PATH/build/kodi-$GIT_USER/kodi-linux-rpbi/kodi.bin" ];then
                kodi_direct=1
              else
                kodi_direct=0;fi
              echo "#> msg field $BUILD__BTN__BUILD_KODI_DIRECT:enable $([ -f "$BASE_PATH/build/kodi-$GIT_USER/kodi-linux-rpbi/configure" ] && echo 1 || echo 0);";
              echo "#> msg field $BUILD__BTN____BUILD_SEL_ADDON:enable $kodi_direct;";
              echo "#> msg field $BUILD__BTN________LAUNCH_KODI:enable $kodi_direct;";
              echo "#> msg field $BUILD__BTN___________DEBUGGER:visible 0;";
              echo "#> msg field $BUILD__BTN___FORCE_BUILD_STEP:enable 1;";
              echo "#> msg field $BUILD__BTN_PERF_CODE_DEPCLEAN:enable 1;";
              echo "#> msg field $BUILD__CB______________ADD_ON:enable $kodi_direct;";
              echo "#> msg field $BUILD__BTN___BUILD_CEF_DIRECT:enable $([ -f "$BASE_PATH/build/cef-$GIT_CEF_USER/cef-$CEF_SOURCE_BRANCH-linux-rpbi.active" ] && echo 1 || echo 0);";
            }
            elif [[ "$line" = *"depclean"* ]];then
            {
              showWarningDialog_YesNo "<b>All extra files on kodi not included in GIT becomes removed! \n\nAre you sure?</b>"
              if [ $? = 0 ];then
              {
                echo "#> msg field $BUILD__BTN___FORCE_BUILD_STEP:enable 0;";
                git -C "$BASE_PATH/build/kodi-$GIT_USER/kodi-linux-rpbi" clean -dffx;
                echo "Cleanup done"
                echo "#> msg field $BUILD__BTN___FORCE_BUILD_STEP:enable 1;";
                echo "#> msg field $BUILD__BTN__BUILD_KODI_DIRECT:enable 0;";
                echo "#> msg field $BUILD__BTN____BUILD_SEL_ADDON:enable 0;";
                echo "#> msg field $BUILD__BTN_PERF_CODE_DEPCLEAN:enable 0;";
                echo "#> msg field $BUILD__CB______________ADD_ON:enable 0;";
              } fi
            }
            elif [[ "$line" = *"openlogs"* ]];then
            {
              $TEXT_VIEVER \
                $BASE_PATH/build/creation-general.log \
                $BASE_PATH/build/creation-kodi-linux-rpbi.log \
                $BASE_PATH/build/creation-cef-linux-rpbi.log;
            }
            elif [[ "$line" = *"debugger"* ]];then
            {
              echo "Not supported!"
            }
            elif [[ "$line" = *"field $BUILD__BTN________LAUNCH_KODI:"* ]];then
            {
              enable=$(echo ${line} | awk -F'enable ' '{ print $2 }' | awk -F\; '{ print $1 }')
              echo "#> msg field $BUILD__BTN________LAUNCH_KODI:enable $enable;"
            }
            elif [[ "$line" = *"field $BUILD__CB______________ADD_ON:"* ]];then
            {
              KODI_SEL_ADDON=$(echo ${line} | awk -F\| '{ print $1 }' | awk -F\: '{ print $2 }')
              if [[ $KODI_SEL_ADDON != "(null)" ]];then
              {
                export KODI_SEL_ADDON
                saveConfigFile;
              } fi
            }
            elif [[ "$line" = *"field"* ]];then
            {
              IFS=$'\n'; for p in ${line}; do
                id=$(echo ${p} | awk -F ' ' '{print $4}' | awk -F ':' '{print $1}')
                value=$(echo ${p#*:} | awk -F ';' '{print $1}')
                IFS=$'|';
                if [[ "$id" -ge "0" ]];then
                  parse_values "linux-rpbi" $id "$value"
                else
                  id2=0
                  IFS=$'|';
                  for value2 in ${value}; do
                    parse_values "linux-rpbi" $id2 "$value2"
                    ((id2++))
                  done;
                fi; IFS=$'\n';
              done; unset IFS;
              saveConfigFile;
              [ -z $SYSTEM_ACTIVE ] && exit 0;
            }
            else
              echo "Wrong command! $line" > /dev/stderr;fi
          }
          else
          {
            echo "$line"
          } fi
        } done

        if [ -f "$TEMP_DIR/build_thread-linux-rpbi.pid" ];then
        {
          process_active=1
        }
        elif [[ $process_active != 0 ]];then
        {
          echo "#< msg stop_build;" >> "$thread4_in";
          process_active=0;
        } fi

        sleep 0.75;
      } done
    }
    done
  ) | \
  $YAD_MUPEL --plug=$KEY --tabnum=$TAB_NUM --form \
             --text="Linux Raspberry PI build" \
             --pulsate \
             --xcom-log=$thread4_in \
             --field="Build complete:FBTN@0,1,0,2"        "bash -c 'echo \"#< msg start_build\" >> $thread4_in'" \
             --field="Build kodi direct:FBTN@2,3,0,2"     "bash -c 'echo \"#< msg start_direct_build_kodi\" >> $thread4_in'" \
             --field="Build CEF direct:FBTN@4,4,0,2"      "bash -c 'echo \"#< msg start_direct_build_cef\" >> $thread4_in'" \
             --field="Update binary distrib:FBTN@5,6,0,2" "bash -c 'echo \"#< msg update_binary_distrib\" >> $thread4_in'" \
             --field="Build selected addon:FBTN@8,8,0,2"  "bash -c 'echo \"#< msg start_addon_build\" >> $thread4_in'" \
             --field="Stop build:FBTN@0,8,2,4"            "bash -c 'echo \"#< msg stop_build\" >> $thread4_in'" \
             --field="Clear log:FBTN@0,0,4,6"             "bash -c 'echo \"#> msg field $BUILD__TERMPROC_____BUILD_LOG:clear;\" >> $thread4_in'" \
             --field="Open last logs:FBTN@1,1,4,6"        "bash -c 'echo \"#< msg openlogs\" >> $thread4_in'" \
             --field="Launch Kodi:FBTN@2,3,4,6"           "bash $BASE_PATH/tools/kodi.launch kodi-linux-rpbi $thread4_in" \
             --field="Open debugger:FBTN@2,3,4,6"         "bash -c 'echo \"#< msg debugger\" >> $thread4_in'" \
             --field="Force build step:FBTN@4,4,4,6"      "bash -c 'echo \"#< msg kodi_force_build_step\" >> $thread4_in'" \
             --field="Perform code depclean:FBTN@5,5,4,6" "bash -c 'echo \"#< msg depclean\" >> $thread4_in'" \
             --field="Add-on:CB@7,8,4,6" '' \
             --field="Build log:termproc@0,9,8,10" "" > /dev/null 2>&1 &
  pid_thread4=$!

  TAB_LIST+="--tab=Linux-Raspberry-PI "
  ((TAB_NUM++))
} fi
#
###############################################################################

###############################################################################
# Thread five: Handle Windows
if [[ $USE_MS_WINDOWS_32 = "TRUE" ]] || [[ $USE_MS_WINDOWS_64 = "TRUE" ]];then
{
  (
    sleep 0.5;

    pulse_on=0;
    process_active=0

    while :;do
    {
      if [ -f ./build/global_mupel_install ];then
      {
        [ -z $SYSTEM_ACTIVE ] && exit 0;
        sleep 2;
        continue;
      } fi

      loadConfigFile

      # Set buttons to initial state
      echo "#> msg field $BUILD__BTN_____BUILD_COMPLETE:visible 1;";
      echo "#> msg field $BUILD__BTN__BUILD_KODI_DIRECT:visible 1;";
      echo "#> msg field $BUILD__BTN___BUILD_CEF_DIRECT:visible 1;";
      echo "#> msg field $BUILD__BTN____BUILD_SEL_ADDON:visible 1;";
      echo "#> msg field $BUILD__BTN_________STOP_BUILD:visible 0;";
      echo "#> msg field $BUILD__BTN_UPDATE_BINARY_DIST:visible 0;"; # Set off (currenly not supported)
      if [ -f "$BASE_PATH/build/kodi-$GIT_USER/kodi-win-${WINDOWS_BUILD_TYPE}/kodi.bin" ];then
      {
        kodi_direct=1
        parse_values "add-ons" "win-${WINDOWS_BUILD_TYPE}"
      }
      else
        kodi_direct=0;fi
      echo "#> msg field $BUILD__BTN__BUILD_KODI_DIRECT:enable $kodi_direct;";
      echo "#> msg field $BUILD__BTN____BUILD_SEL_ADDON:enable $kodi_direct;";
      echo "#> msg field $BUILD__BTN________LAUNCH_KODI:enable $kodi_direct;";
      echo "#> msg field $BUILD__BTN________LAUNCH_KODI:visible 0;"; # Hide "Launch Kodi" until a good way is found to start on windows
      echo "#> msg field $BUILD__BTN___________DEBUGGER:visible 0;";
      echo "#> msg field $BUILD__BTN___FORCE_BUILD_STEP:enable 1;";
      echo "#> msg field $BUILD__BTN_PERF_CODE_DEPCLEAN:visible 0;";
      echo "#> msg field $BUILD__CB______________ADD_ON:enable $kodi_direct;";
      echo "#> msg field $BUILD__BTN___BUILD_CEF_DIRECT:enable $([ -f "$BASE_PATH/build/cef-$GIT_CEF_USER/cef-$CEF_SOURCE_BRANCH-win-${WINDOWS_BUILD_TYPE}.active" ] && echo 1 || echo 0);";

      # Main loop
      while :;do
      {
        if [ ! -f "$thread5_in" ];then
          exit 0;fi

        if [ -f ./build/global_mupel_install ];then
        {
          [ -z $SYSTEM_ACTIVE ] && exit 0;
          break;
        } fi

        if [ -z $SYSTEM_ACTIVE ];then
          echo "#> msg field -1:values;";fi

        proc="$(cat "$thread5_in")"
        echo -n "" > "$thread5_in";
        IFS=$'\n';
        for line in ${proc}; do
        {
          if [[ "$line" == "#< msg"* ]];then
          {
            [[ "$line" = *"start_direct_build_kodi"* ]] &&
              is_direct_kodi=1 || is_direct_kodi=0;
            [[ "$line" = *"start_direct_build_cef"* ]] &&
              is_direct_cef=1 || is_direct_cef=0;
            [[ "$line" = *"update_binary_distrib"* ]] &&
              is_update=1 || is_update=0;

            if [[ "$line" = *"start_build"* ]] ||
               [[ "$is_direct_cef" = 1 ]] ||
               [[ "$is_direct_kodi" = 1 ]] ||
               [[ "$line" = *"start_addon_build"* ]] ||
               [[ "$line" = *"kodi_force_build_step"* ]] ||
               [[ "$line" = *"update_binary_distrib"* ]];then
            {
              loadConfigFile

              echo "#> msg pulse on;";
              echo "#> msg field $BUILD__BTN_____BUILD_COMPLETE:visible 0;";
              echo "#> msg field $BUILD__BTN__BUILD_KODI_DIRECT:visible 0;";
              echo "#> msg field $BUILD__BTN___BUILD_CEF_DIRECT:visible 0;";
              echo "#> msg field $BUILD__BTN____BUILD_SEL_ADDON:visible 0;";
              echo "#> msg field $BUILD__BTN_UPDATE_BINARY_DIST:visible 0;";
              echo "#> msg field $BUILD__BTN_________STOP_BUILD:visible 1;";
              echo "#> msg field $BUILD__BTN________LAUNCH_KODI:enable 0;";
              echo "#> msg field $BUILD__BTN___FORCE_BUILD_STEP:enable 0;";
              echo "#> msg field $BUILD__BTN_PERF_CODE_DEPCLEAN:enable 0;";
              echo "#> msg field $BUILD__CB______________ADD_ON:enable 0;";

              pulse_on=1
              echo "#> msg field $BUILD__TERMPROC_____BUILD_LOG:clear;"
              if [[ "$line" = *"start_build"* ]] ||
                 [[ "$is_direct_cef" = 1 ]]      ||
                 [[ "$is_direct_kodi" = 1 ]]     ||
                 [[ "$is_update" = 1 ]];then
                buildThreadForOS "win-${WINDOWS_BUILD_TYPE}" "${USE_LINUX_X86_DISTR}64" $is_direct_cef $is_direct_kodi $is_update;
              elif [[ "$line" = *"start_addon_build"* ]];then
                buildThreadKodiAddonForOS "win-${WINDOWS_BUILD_TYPE}" "${USE_LINUX_X86_DISTR}64" "$KODI_SEL_ADDON";
              elif [[ "$line" = *"kodi_force_build_step"* ]];then
                echo "NOT SUPPORTED!";fi
            }
            elif [[ "$line" = *"stop_build"* ]];then
            {
              if [ -f "$TEMP_DIR/build_thread-win-${WINDOWS_BUILD_TYPE}.pid" ];then
              {
                pid_to_kill=$(cat "$TEMP_DIR/build_thread-win-${WINDOWS_BUILD_TYPE}.pid");
                ps -p $pid_to_kill > /dev/null
                if [[ $? = 0 ]];then
                {
                  killtree $pid_to_kill KILL;
                  kill $pid_to_kill
                } fi
                rm -f "$TEMP_DIR/build_thread-win-${WINDOWS_BUILD_TYPE}.pid"
              } fi

              echo ""
              if [[ $pulse_on = 1 ]];then
              {
                echo "#> msg pulse off;";
                pulse_on=0;
              } fi
              echo "#> msg percent 0;";
              echo "#> msg field $BUILD__BTN_____BUILD_COMPLETE:visible 1;";
              echo "#> msg field $BUILD__BTN__BUILD_KODI_DIRECT:visible 1;";
              echo "#> msg field $BUILD__BTN___BUILD_CEF_DIRECT:visible 1;";
              echo "#> msg field $BUILD__BTN____BUILD_SEL_ADDON:visible 1;";
              echo "#> msg field $BUILD__BTN_________STOP_BUILD:visible 0;";
              if [ -f "$BASE_PATH/build/kodi-$GIT_USER/kodi-win-${WINDOWS_BUILD_TYPE}/kodi.bin" ];then
                kodi_direct=1
              else
                kodi_direct=0;fi
              echo "#> msg field $BUILD__BTN__BUILD_KODI_DIRECT:enable $kodi_direct;";
              echo "#> msg field $BUILD__BTN____BUILD_SEL_ADDON:enable $kodi_direct;";
              echo "#> msg field $BUILD__BTN________LAUNCH_KODI:enable $kodi_direct;";
              echo "#> msg field $BUILD__BTN___________DEBUGGER:visible 0;";
              echo "#> msg field $BUILD__BTN___FORCE_BUILD_STEP:enable 1;";
              echo "#> msg field $BUILD__BTN_PERF_CODE_DEPCLEAN:enable 1;";
              echo "#> msg field $BUILD__CB______________ADD_ON:enable $kodi_direct;";
              echo "#> msg field $BUILD__BTN___BUILD_CEF_DIRECT:enable $([ -f "$BASE_PATH/build/cef-$GIT_CEF_USER/cef-$CEF_SOURCE_BRANCH-win-${WINDOWS_BUILD_TYPE}.active" ] && echo 1 || echo 0);";
            }
            elif [[ "$line" = *"depclean"* ]];then
            {
              showWarningDialog_YesNo "<b>All extra files on kodi not included in GIT becomes removed! \n\nAre you sure?</b>"
              if [ $? = 0 ];then
              {
                echo "NOT SUPPORTED!";







              } fi
            }
            elif [[ "$line" = *"openlogs"* ]];then
            {
              $TEXT_VIEVER \
                $BASE_PATH/build/creation-general.log \
                $BASE_PATH/build/creation-kodi-win-$WINDOWS_BUILD_TYPE.log \
                $BASE_PATH/build/creation-cef-win-$WINDOWS_BUILD_TYPE.log;
            }
            elif [[ "$line" = *"kodilaunch"* ]];then
            {
              bash $BASE_PATH/tools/kodi.launch kodi-win-$WINDOWS_BUILD_TYPE $thread5_in
            }
            elif [[ "$line" = *"debugger"* ]];then
            {
              echo "Not supported!"
            }
            elif [[ "$line" = *"field $BUILD__BTN________LAUNCH_KODI:"* ]];then
            {
              enable=$(echo ${line} | awk -F'enable ' '{ print $2 }' | awk -F\; '{ print $1 }')
              echo "#> msg field $BUILD__BTN________LAUNCH_KODI:enable $enable;"
            }
            elif [[ "$line" = *"field $BUILD__CB______________ADD_ON:"* ]];then
            {
              KODI_SEL_ADDON=$(echo ${line} | awk -F\| '{ print $1 }' | awk -F\: '{ print $2 }')
              if [[ $KODI_SEL_ADDON != "(null)" ]];then
              {
                export KODI_SEL_ADDON
                saveConfigFile;
              } fi
            }
            elif [[ "$line" = *"field"* ]];then
            {
              IFS=$'\n'; for p in ${line}; do
                id=$(echo ${p} | awk -F ' ' '{print $4}' | awk -F ':' '{print $1}')
                value=$(echo ${p#*:} | awk -F ';' '{print $1}')
                IFS=$'|';
                if [[ "$id" -ge "0" ]];then
                  parse_values "win-${WINDOWS_BUILD_TYPE}" $id "$value"
                else
                  id2=0
                  IFS=$'|';
                  for value2 in ${value}; do
                    parse_values "win-${WINDOWS_BUILD_TYPE}" $id2 "$value2"
                    ((id2++))
                  done;
                fi; IFS=$'\n';
              done; unset IFS;
              saveConfigFile;
              [ -z $SYSTEM_ACTIVE ] && exit 0;
            }
            else
              echo "Wrong command! $line" > /dev/stderr;fi
          }
          else
          {
            echo "$line"
          } fi
        } done

        if [ -f "$TEMP_DIR/build_thread-win-${WINDOWS_BUILD_TYPE}.pid" ];then
        {
          process_active=1
        }
        elif [[ $process_active != 0 ]];then
        {
          echo "#< msg stop_build;" >> "$thread5_in";
          process_active=0;
        } fi

        sleep 0.75;
      } done
    }
    done
  ) | \
  $YAD_MUPEL --plug=$KEY --tabnum=$TAB_NUM --form \
             --text="Windows build" \
             --pulsate \
             --xcom-log=$thread5_in \
             --field="Build complete:FBTN@0,1,0,2"        "bash -c 'echo \"#< msg start_build\" >> $thread5_in'" \
             --field="Build kodi direct:FBTN@2,3,0,2"     "bash -c 'echo \"#< msg start_direct_build_kodi\" >> $thread5_in'" \
             --field="Build CEF direct:FBTN@4,4,0,2"      "bash -c 'echo \"#< msg start_direct_build_cef\" >> $thread5_in'" \
             --field="Update binary distrib:FBTN@5,6,0,2" "bash -c 'echo \"#< msg update_binary_distrib\" >> $thread5_in'" \
             --field="Build selected addon:FBTN@8,8,0,2"  "bash -c 'echo \"#< msg start_addon_build\" >> $thread5_in'" \
             --field="Stop build:FBTN@0,8,2,4"            "bash -c 'echo \"#< msg stop_build\" >> $thread5_in'" \
             --field="Clear log:FBTN@0,0,4,6"             "bash -c 'echo \"#> msg field $BUILD__TERMPROC_____BUILD_LOG:clear;\" >> $thread5_in'" \
             --field="Open last logs:FBTN@1,1,4,6"        "bash -c 'echo \"#< msg openlogs\" >> $thread5_in'" \
             --field="Launch Kodi:FBTN@2,3,4,6"           "bash -c 'echo \"#< msg kodilaunch\" >> $thread5_in'" \
             --field="Open debugger:FBTN@2,3,4,6"         "bash -c 'echo \"#< msg debugger\" >> $thread5_in'" \
             --field="Force build step:FBTN@4,4,4,6"      "bash -c 'echo \"#< msg kodi_force_build_step\" >> $thread5_in'" \
             --field="Perform code depclean:FBTN@5,5,4,6" "bash -c 'echo \"#< msg depclean\" >> $thread5_in'" \
             --field="Add-on:CB@7,8,4,6" '' \
             --field="Build log:termproc@0,9,8,10" "" > /dev/null 2>&1 &
  pid_thread5=$!

  TAB_LIST+="--tab=Microsoft-Windows "
  ((TAB_NUM++))
} fi
#
###############################################################################

###############################################################################
# Thread six: Handle Mac OS X
if [[ $USE_MAC_OS_X_64 = "TRUE" ]];then
{
  (
    sleep 0.5;

    pulse_on=0;
    process_active=0

    while :;do
    {
      if [ -f ./build/global_mupel_install ];then
      {
        [ -z $SYSTEM_ACTIVE ] && exit 0;
        sleep 2;
        continue;
      } fi

      loadConfigFile

      # Set buttons to initial state
      echo "#> msg field $BUILD__BTN_____BUILD_COMPLETE:visible 1;";
      echo "#> msg field $BUILD__BTN__BUILD_KODI_DIRECT:visible 1;";
      echo "#> msg field $BUILD__BTN___BUILD_CEF_DIRECT:visible 1;";
      echo "#> msg field $BUILD__BTN____BUILD_SEL_ADDON:visible 1;";
      echo "#> msg field $BUILD__BTN_________STOP_BUILD:visible 0;";
      echo "#> msg field $BUILD__BTN_UPDATE_BINARY_DIST:visible 0;"; # Set off (currenly not supported)
      if [ -f "$BASE_PATH/build/kodi-$GIT_USER/kodi-osx-x86_64/kodi.bin" ];then
      {
        kodi_direct=1
        parse_values "add-ons" "osx-x86_64"
      }
      else
        kodi_direct=0;fi
      echo "#> msg field $BUILD__BTN__BUILD_KODI_DIRECT:enable $kodi_direct;";
      echo "#> msg field $BUILD__BTN____BUILD_SEL_ADDON:enable $kodi_direct;";
      echo "#> msg field $BUILD__BTN________LAUNCH_KODI:enable $kodi_direct;";
      echo "#> msg field $BUILD__BTN___________DEBUGGER:visible 0;";
      echo "#> msg field $BUILD__BTN___FORCE_BUILD_STEP:enable 1;";
      echo "#> msg field $BUILD__BTN_PERF_CODE_DEPCLEAN:enable 1;";
      echo "#> msg field $BUILD__CB______________ADD_ON:enable $kodi_direct;";
      echo "#> msg field $BUILD__BTN___BUILD_CEF_DIRECT:enable $([ -f "$BASE_PATH/build/cef-$GIT_CEF_USER/cef-$CEF_SOURCE_BRANCH-osx-x86_64.active" ] && echo 1 || echo 0);";

      # Main loop
      while :;do
      {
        if [ ! -f "$thread6_in" ];then
          exit 0;fi

        if [ -f ./build/global_mupel_install ];then
        {
          [ -z $SYSTEM_ACTIVE ] && exit 0;
          break;
        } fi

        if [ -z $SYSTEM_ACTIVE ];then
          echo "#> msg field -1:values;";fi

        proc="$(cat "$thread6_in")"
        echo -n "" > "$thread6_in";
        IFS=$'\n';
        for line in ${proc}; do
        {
          if [[ "$line" == "#< msg"* ]];then
          {
            [[ "$line" = *"start_direct_build_kodi"* ]] &&
              is_direct_kodi=1 || is_direct_kodi=0;
            [[ "$line" = *"start_direct_build_cef"* ]] &&
              is_direct_cef=1 || is_direct_cef=0;
            [[ "$line" = *"update_binary_distrib"* ]] &&
              is_update=1 || is_update=0;

            if [[ "$line" = *"start_build"* ]] ||
               [[ "$is_direct_cef" = 1 ]] ||
               [[ "$is_direct_kodi" = 1 ]] ||
               [[ "$line" = *"start_addon_build"* ]] ||
               [[ "$line" = *"kodi_force_build_step"* ]] ||
               [[ "$line" = *"update_binary_distrib"* ]];then
            {
              loadConfigFile

              echo "#> msg pulse on;";
              echo "#> msg field $BUILD__BTN_____BUILD_COMPLETE:visible 0;";
              echo "#> msg field $BUILD__BTN__BUILD_KODI_DIRECT:visible 0;";
              echo "#> msg field $BUILD__BTN___BUILD_CEF_DIRECT:visible 0;";
              echo "#> msg field $BUILD__BTN____BUILD_SEL_ADDON:visible 0;";
              echo "#> msg field $BUILD__BTN_UPDATE_BINARY_DIST:visible 0;";
              echo "#> msg field $BUILD__BTN_________STOP_BUILD:visible 1;";
              echo "#> msg field $BUILD__BTN________LAUNCH_KODI:enable 0;";
              echo "#> msg field $BUILD__BTN___FORCE_BUILD_STEP:enable 0;";
              echo "#> msg field $BUILD__BTN_PERF_CODE_DEPCLEAN:enable 0;";
              echo "#> msg field $BUILD__CB______________ADD_ON:enable 0;";

              pulse_on=1
              echo "#> msg field $BUILD__TERMPROC_____BUILD_LOG:clear;"
              if [[ "$line" = *"start_build"* ]] ||
                 [[ "$is_direct_cef" = 1 ]]      ||
                 [[ "$is_direct_kodi" = 1 ]]     ||
                 [[ "$is_update" = 1 ]];then
                buildThreadForOS "osx-x86_64" "${USE_LINUX_X86_DISTR}64" $is_direct_cef $is_direct_kodi $is_update;
              elif [[ "$line" = *"start_addon_build"* ]];then
                buildThreadKodiAddonForOS "osx-x86_64" "${USE_LINUX_X86_DISTR}64" "$KODI_SEL_ADDON";
              elif [[ "$line" = *"kodi_force_build_step"* ]];then
                forceKodiSelectedBuild "osx-x86_64" "${USE_LINUX_X86_DISTR}64" osxx86_64;fi
            }
            elif [[ "$line" = *"stop_build"* ]];then
            {
              if [ -f "$TEMP_DIR/build_thread-osx-x86_64.pid" ];then
              {
                pid_to_kill=$(cat "$TEMP_DIR/build_thread-osx-x86_64.pid");
                ps -p $pid_to_kill > /dev/null
                if [[ $? = 0 ]];then
                {
                  killtree $pid_to_kill KILL;
                  kill $pid_to_kill
                } fi
                rm -f "$TEMP_DIR/build_thread-osx-x86_64.pid"
              } fi

              echo ""
              if [[ $pulse_on = 1 ]];then
              {
                echo "#> msg pulse off;";
                pulse_on=0;
              } fi
              echo "#> msg percent 0;";
              echo "#> msg field $BUILD__BTN_____BUILD_COMPLETE:visible 1;";
              echo "#> msg field $BUILD__BTN__BUILD_KODI_DIRECT:visible 1;";
              echo "#> msg field $BUILD__BTN___BUILD_CEF_DIRECT:visible 1;";
              echo "#> msg field $BUILD__BTN____BUILD_SEL_ADDON:visible 1;";
              echo "#> msg field $BUILD__BTN_________STOP_BUILD:visible 0;";
              if [ -f "$BASE_PATH/build/kodi-$GIT_USER/kodi-osx-x86_64/kodi.bin" ];then
                kodi_direct=1
              else
                kodi_direct=0;fi
              echo "#> msg field $BUILD__BTN__BUILD_KODI_DIRECT:enable $kodi_direct;";
              echo "#> msg field $BUILD__BTN____BUILD_SEL_ADDON:enable $kodi_direct;";
              echo "#> msg field $BUILD__BTN________LAUNCH_KODI:enable $kodi_direct;";
              echo "#> msg field $BUILD__BTN___________DEBUGGER:visible 0;";
              echo "#> msg field $BUILD__BTN___FORCE_BUILD_STEP:enable 1;";
              echo "#> msg field $BUILD__BTN_PERF_CODE_DEPCLEAN:enable 1;";
              echo "#> msg field $BUILD__CB______________ADD_ON:enable $kodi_direct;";
              echo "#> msg field $BUILD__BTN___BUILD_CEF_DIRECT:enable $([ -f "$BASE_PATH/build/cef-$GIT_CEF_USER/cef-$CEF_SOURCE_BRANCH-osx-x86_64.active" ] && echo 1 || echo 0);";
            }
            elif [[ "$line" = *"depclean"* ]];then
            {
              showWarningDialog_YesNo "<b>All extra files on kodi not included in GIT becomes removed! \n\nAre you sure?</b>"
              if [ $? = 0 ];then
              {
                echo "NOT SUPPORTED!";







              } fi
            }
            elif [[ "$line" = *"openlogs"* ]];then
            {
              $TEXT_VIEVER \
                $BASE_PATH/build/creation-general.log \
                $BASE_PATH/build/creation-kodi-osx-x86_64.log \
                $BASE_PATH/build/creation-cef-osx-x86_64.log;
            }
            elif [[ "$line" = *"debugger"* ]];then
            {
              echo "Not supported!"
            }
            elif [[ "$line" = *"field $BUILD__BTN________LAUNCH_KODI:"* ]];then
            {
              enable=$(echo ${line} | awk -F'enable ' '{ print $2 }' | awk -F\; '{ print $1 }')
              echo "#> msg field $BUILD__BTN________LAUNCH_KODI:enable $enable;"
            }
            elif [[ "$line" = *"field $BUILD__CB______________ADD_ON:"* ]];then
            {
              KODI_SEL_ADDON=$(echo ${line} | awk -F\| '{ print $1 }' | awk -F\: '{ print $2 }')
              if [[ $KODI_SEL_ADDON != "(null)" ]];then
              {
                export KODI_SEL_ADDON
                saveConfigFile;
              } fi
            }
            elif [[ "$line" = *"field"* ]];then
            {
              IFS=$'\n'; for p in ${line}; do
                id=$(echo ${p} | awk -F ' ' '{print $4}' | awk -F ':' '{print $1}')
                value=$(echo ${p#*:} | awk -F ';' '{print $1}')
                IFS=$'|';
                if [[ "$id" -ge "0" ]];then
                  parse_values "osx-x86_64" $id "$value"
                else
                  id2=0
                  IFS=$'|';
                  for value2 in ${value}; do
                    parse_values "osx-x86_64" $id2 "$value2"
                    ((id2++))
                  done;
                fi; IFS=$'\n';
              done; unset IFS;
              saveConfigFile;
              [ -z $SYSTEM_ACTIVE ] && exit 0;
            }
            else
              echo "Wrong command! $line" > /dev/stderr;fi
          }
          else
          {
            echo "$line"
          } fi
        } done

        if [ -f "$TEMP_DIR/build_thread-osx-x86_64.pid" ];then
        {
          process_active=1
        }
        elif [[ $process_active != 0 ]];then
        {
          echo "#< msg stop_build;" >> "$thread6_in";
          process_active=0;
        } fi

        sleep 0.75;
      } done
    }
    done
  ) | \
  $YAD_MUPEL --plug=$KEY --tabnum=$TAB_NUM --form \
             --text="Mac OS X build" \
             --pulsate \
             --xcom-log=$thread6_in \
             --field="Build complete:FBTN@0,1,0,2"        "bash -c 'echo \"#< msg start_build\" >> $thread6_in'" \
             --field="Build kodi direct:FBTN@2,3,0,2"     "bash -c 'echo \"#< msg start_direct_build_kodi\" >> $thread6_in'" \
             --field="Build CEF direct:FBTN@4,4,0,2"      "bash -c 'echo \"#< msg start_direct_build_cef\" >> $thread6_in'" \
             --field="Update binary distrib:FBTN@5,6,0,2" "bash -c 'echo \"#< msg update_binary_distrib\" >> $thread6_in'" \
             --field="Build selected addon:FBTN@8,8,0,2"  "bash -c 'echo \"#< msg start_addon_build\" >> $thread6_in'" \
             --field="Stop build:FBTN@0,8,2,4"            "bash -c 'echo \"#< msg stop_build\" >> $thread6_in'" \
             --field="Clear log:FBTN@0,0,4,6"             "bash -c 'echo \"#> msg field $BUILD__TERMPROC_____BUILD_LOG:clear;\" >> $thread6_in'" \
             --field="Open last logs:FBTN@1,1,4,6"        "bash -c 'echo \"#< msg openlogs\" >> $thread6_in'" \
             --field="Launch Kodi:FBTN@2,3,4,6"           "bash $BASE_PATH/tools/kodi.launch kodi-osx64 $thread6_in" \
             --field="Open debugger:FBTN@2,3,4,6"         "bash -c 'echo \"#< msg debugger\" >> $thread6_in'" \
             --field="Force build step:FBTN@4,4,4,6"      "bash -c 'echo \"#< msg kodi_force_build_step\" >> $thread6_in'" \
             --field="Perform code depclean:FBTN@5,5,4,6" "bash -c 'echo \"#< msg depclean\" >> $thread6_in'" \
             --field="Add-on:CB@7,8,4,6" '' \
             --field="Build log:termproc@0,9,8,10" "" > /dev/null 2>&1 &
  pid_thread6=$!

  TAB_LIST+="--tab=Mac-OS-X "
  ((TAB_NUM++))
} fi
#
###############################################################################

###############################################################################
# Thread seven: Handle Android
if [[ $USE_ANDROID_ARM = "TRUE" ]] || [[ $USE_ANDROID_X86 = "TRUE" ]];then
{
  (
    sleep 0.5;

    pulse_on=0;
    process_active=0

    while :;do
    {
      if [ -f ./build/global_mupel_install ];then
      {
        [ -z $SYSTEM_ACTIVE ] && exit 0;
        sleep 2;
        continue;
      } fi

      loadConfigFile

      # Set buttons to initial state
      echo "#> msg field $BUILD__BTN_____BUILD_COMPLETE:visible 1;";
      echo "#> msg field $BUILD__BTN__BUILD_KODI_DIRECT:visible 1;";
      echo "#> msg field $BUILD__BTN___BUILD_CEF_DIRECT:visible 1;";
      echo "#> msg field $BUILD__BTN____BUILD_SEL_ADDON:visible 1;";
      echo "#> msg field $BUILD__BTN_________STOP_BUILD:visible 0;";
      echo "#> msg field $BUILD__BTN_UPDATE_BINARY_DIST:visible 0;"; # Set off (currenly not supported)
      if [ -f $BASE_PATH/build/kodi-$GIT_USER/kodi-android-x86/*.apk ];then
      {
        kodi_direct=1
        parse_values "add-ons" "android-x86"
      }
      else
        kodi_direct=0;fi
      echo "#> msg field $BUILD__BTN__BUILD_KODI_DIRECT:enable $kodi_direct;";
      echo "#> msg field $BUILD__BTN____BUILD_SEL_ADDON:enable $kodi_direct;";
      echo "#> msg field $BUILD__BTN________LAUNCH_KODI:enable $kodi_direct;";
      echo "#> msg field $BUILD__BTN___________DEBUGGER:visible 0;";

      echo "#> msg field $BUILD__BTN___FORCE_BUILD_STEP:enable 1;";
      echo "#> msg field $BUILD__BTN_PERF_CODE_DEPCLEAN:enable 1;";
      echo "#> msg field $BUILD__CB______________ADD_ON:enable $kodi_direct;";
      echo "#> msg field $BUILD__BTN___BUILD_CEF_DIRECT:enable $([ -f "$BASE_PATH/build/cef-$GIT_CEF_USER/cef-$CEF_SOURCE_BRANCH-android-${ANDROID_BUILD_TYPE}.active" ] && echo 1 || echo 0);";

      # Main loop
      while :;do
      {
        if [ ! -f "$thread7_in" ];then
          exit 0;fi

        if [ -f ./build/global_mupel_install ];then
        {
          [ -z $SYSTEM_ACTIVE ] && exit 0;
          break;
        } fi

        if [ -z $SYSTEM_ACTIVE ];then
          echo "#> msg field -1:values;";fi

        proc="$(cat "$thread7_in")"
        echo -n "" > "$thread7_in";
        IFS=$'\n';
        for line in ${proc}; do
        {
          if [[ "$line" == "#< msg"* ]];then
          {
            [[ "$line" = *"start_direct_build_kodi"* ]] &&
              is_direct_kodi=1 || is_direct_kodi=0;
            [[ "$line" = *"start_direct_build_cef"* ]] &&
              is_direct_cef=1 || is_direct_cef=0;
            [[ "$line" = *"update_binary_distrib"* ]] &&
              is_update=1 || is_update=0;

            if [[ "$line" = *"start_build"* ]] ||
               [[ "$is_direct_cef" = 1 ]] ||
               [[ "$is_direct_kodi" = 1 ]] ||
               [[ "$line" = *"start_addon_build"* ]] ||
               [[ "$line" = *"kodi_force_build_step"* ]] ||
               [[ "$line" = *"update_binary_distrib"* ]];then
            {
              loadConfigFile

              echo "#> msg pulse on;";
              echo "#> msg field $BUILD__BTN_____BUILD_COMPLETE:visible 0;";
              echo "#> msg field $BUILD__BTN__BUILD_KODI_DIRECT:visible 0;";
              echo "#> msg field $BUILD__BTN___BUILD_CEF_DIRECT:visible 0;";
              echo "#> msg field $BUILD__BTN____BUILD_SEL_ADDON:visible 0;";
              echo "#> msg field $BUILD__BTN_UPDATE_BINARY_DIST:visible 0;";
              echo "#> msg field $BUILD__BTN_________STOP_BUILD:visible 1;";
              echo "#> msg field $BUILD__BTN________LAUNCH_KODI:enable 0;";
              echo "#> msg field $BUILD__BTN___FORCE_BUILD_STEP:enable 0;";
              echo "#> msg field $BUILD__BTN_PERF_CODE_DEPCLEAN:enable 0;";
              echo "#> msg field $BUILD__CB______________ADD_ON:enable 0;";

              pulse_on=1
              echo "#> msg field $BUILD__TERMPROC_____BUILD_LOG:clear;"
              if [[ "$line" = *"start_build"* ]] ||
                 [[ "$is_direct_cef" = 1 ]]      ||
                 [[ "$is_direct_kodi" = 1 ]]     ||
                 [[ "$is_update" = 1 ]];then
                buildThreadForOS "android-${ANDROID_BUILD_TYPE}" "${USE_LINUX_X86_DISTR}64" $is_direct_cef $is_direct_kodi $is_update
              elif [[ "$line" = *"start_addon_build"* ]];then
                buildThreadKodiAddonForOS "android-${ANDROID_BUILD_TYPE}" "${USE_LINUX_X86_DISTR}64" "$KODI_SEL_ADDON";
              elif [[ "$line" = *"kodi_force_build_step"* ]];then
                forceKodiSelectedBuild "android-${ANDROID_BUILD_TYPE}" "${USE_LINUX_X86_DISTR}64" `[ ${ANDROID_BUILD_TYPE} = x86 ] && echo androidx86 || echo android`;fi
            }
            elif [[ "$line" = *"stop_build"* ]];then
            {
              if [ -f "$TEMP_DIR/build_thread-android-${ANDROID_BUILD_TYPE}.pid" ];then
              {
                pid_to_kill=$(cat "$TEMP_DIR/build_thread-android-${ANDROID_BUILD_TYPE}.pid");
                ps -p $pid_to_kill > /dev/null
                if [[ $? = 0 ]];then
                {
                  killtree $pid_to_kill KILL;
                  kill $pid_to_kill
                } fi
                rm -f "$TEMP_DIR/build_thread-android-${ANDROID_BUILD_TYPE}.pid"
              } fi

              echo ""
              if [[ $pulse_on = 1 ]];then
              {
                echo "#> msg pulse off;";
                pulse_on=0;
              } fi
              echo "#> msg percent 0;";
              echo "#> msg field $BUILD__BTN_____BUILD_COMPLETE:visible 1;";
              echo "#> msg field $BUILD__BTN__BUILD_KODI_DIRECT:visible 1;";
              echo "#> msg field $BUILD__BTN___BUILD_CEF_DIRECT:visible 1;";
              echo "#> msg field $BUILD__BTN____BUILD_SEL_ADDON:visible 1;";
              echo "#> msg field $BUILD__BTN_________STOP_BUILD:visible 0;";
              if [ -f $BASE_PATH/build/kodi-$GIT_USER/kodi-android-${ANDROID_BUILD_TYPE}/*.apk ];then
                kodi_direct=1
              else
                kodi_direct=0;fi
              echo "#> msg field $BUILD__BTN__BUILD_KODI_DIRECT:enable $kodi_direct;";
              echo "#> msg field $BUILD__BTN____BUILD_SEL_ADDON:enable $kodi_direct;";
              echo "#> msg field $BUILD__BTN________LAUNCH_KODI:enable $kodi_direct;";
              echo "#> msg field $BUILD__BTN___________DEBUGGER:visible 0;";
              echo "#> msg field $BUILD__BTN___FORCE_BUILD_STEP:enable 1;";
              echo "#> msg field $BUILD__BTN_PERF_CODE_DEPCLEAN:enable 1;";
              echo "#> msg field $BUILD__CB______________ADD_ON:enable $kodi_direct;";
              echo "#> msg field $BUILD__BTN___BUILD_CEF_DIRECT:enable $([ -f "$BASE_PATH/build/cef-$GIT_CEF_USER/cef-$CEF_SOURCE_BRANCH-android-${ANDROID_BUILD_TYPE}.active" ] && echo 1 || echo 0);";
            }
            elif [[ "$line" = *"depclean"* ]];then
            {
              showWarningDialog_YesNo "<b>All extra files on kodi not included in GIT becomes removed! \n\nAre you sure?</b>"
              if [ $? = 0 ];then
              {
                echo "#> msg field $BUILD__BTN___FORCE_BUILD_STEP:enable 0;";
                git -C "$BASE_PATH/build/kodi-$GIT_USER/kodi-android-${ANDROID_BUILD_TYPE}" clean -dffx;
                echo "Cleanup done"
                echo "#> msg field $BUILD__BTN___FORCE_BUILD_STEP:enable 1;";
                echo "#> msg field $BUILD__BTN__BUILD_KODI_DIRECT:enable 0;";
                echo "#> msg field $BUILD__BTN____BUILD_SEL_ADDON:enable 0;";
                echo "#> msg field $BUILD__BTN_PERF_CODE_DEPCLEAN:enable 0;";
                echo "#> msg field $BUILD__CB______________ADD_ON:enable 0;";
              } fi
            }
            elif [[ "$line" = *"openlogs"* ]];then
            {
              $TEXT_VIEVER \
                $BASE_PATH/build/creation-general.log \
                $BASE_PATH/build/creation-kodi-android-${ANDROID_BUILD_TYPE}.log \
                $BASE_PATH/build/creation-cef-android-${ANDROID_BUILD_TYPE}.log;
            }
            elif [[ "$line" = *"kodilaunch"* ]];then
            {
              bash $BASE_PATH/tools/kodi.launch kodi-android-$ANDROID_BUILD_TYPE $thread7_in
            }
            elif [[ "$line" = *"debugger"* ]];then
            {
              echo "Not supported!"
            }
            elif [[ "$line" = *"field $BUILD__BTN________LAUNCH_KODI:"* ]];then
            {
              enable=$(echo ${line} | awk -F'enable ' '{ print $2 }' | awk -F\; '{ print $1 }')
              echo "#> msg field $BUILD__BTN________LAUNCH_KODI:enable $enable;"
            }
            elif [[ "$line" = *"field $BUILD__CB______________ADD_ON:"* ]];then
            {
              KODI_SEL_ADDON=$(echo ${line} | awk -F\| '{ print $1 }' | awk -F\: '{ print $2 }')
              if [[ $KODI_SEL_ADDON != "(null)" ]];then
              {
                export KODI_SEL_ADDON
                saveConfigFile;
              } fi
            }
            elif [[ "$line" = *"field"* ]];then
            {
              IFS=$'\n'; for p in ${line}; do
                id=$(echo ${p} | awk -F ' ' '{print $4}' | awk -F ':' '{print $1}')
                value=$(echo ${p#*:} | awk -F ';' '{print $1}')
                IFS=$'|';
                if [[ "$id" -ge "0" ]];then
                  parse_values "android-${ANDROID_BUILD_TYPE}" $id "$value"
                else
                  id2=0
                  IFS=$'|';
                  for value2 in ${value}; do
                    parse_values "android-${ANDROID_BUILD_TYPE}" $id2 "$value2"
                    ((id2++))
                  done;
                fi; IFS=$'\n';
              done; unset IFS;
              saveConfigFile;
              [ -z $SYSTEM_ACTIVE ] && exit 0;
            }
            else
              echo "Wrong command! $line" > /dev/stderr;fi
          }
          else
          {
            echo "$line"
          } fi
        } done

        if [ -f "$TEMP_DIR/build_thread-android-${ANDROID_BUILD_TYPE}.pid" ];then
        {
          process_active=1
        }
        elif [[ $process_active != 0 ]];then
        {
          echo "#< msg stop_build;" >> "$thread7_in";
          process_active=0;
        } fi

        sleep 0.75;
      } done
    }
    done
  ) | \
  $YAD_MUPEL --plug=$KEY --tabnum=$TAB_NUM --form \
             --text="Android" \
             --pulsate \
             --xcom-log=$thread7_in \
             --field="Build complete:FBTN@0,1,0,2"        "bash -c 'echo \"#< msg start_build\" >> $thread7_in'" \
             --field="Build kodi direct:FBTN@2,3,0,2"     "bash -c 'echo \"#< msg start_direct_build_kodi\" >> $thread7_in'" \
             --field="Build CEF direct:FBTN@4,4,0,2"      "bash -c 'echo \"#< msg start_direct_build_cef\" >> $thread7_in'" \
             --field="Update binary distrib:FBTN@5,6,0,2" "bash -c 'echo \"#< msg update_binary_distrib\" >> $thread7_in'" \
             --field="Build selected addon:FBTN@8,8,0,2"  "bash -c 'echo \"#< msg start_addon_build\" >> $thread7_in'" \
             --field="Stop build:FBTN@0,8,2,4"            "bash -c 'echo \"#< msg stop_build\" >> $thread7_in'" \
             --field="Clear log:FBTN@0,0,4,6"             "bash -c 'echo \"#> msg field $BUILD__TERMPROC_____BUILD_LOG:clear;\" >> $thread7_in'" \
             --field="Open last logs:FBTN@1,1,4,6"        "bash -c 'echo \"#< msg openlogs\" >> $thread7_in'" \
             --field="Launch Kodi:FBTN@2,3,4,6"           "bash -c 'echo \"#< msg kodilaunch\" >> $thread7_in'" \
             --field="Open debugger:FBTN@2,3,4,6"         "bash -c 'echo \"#< msg debugger\" >> $thread7_in'" \
             --field="Force build step:FBTN@4,4,4,6"      "bash -c 'echo \"#< msg kodi_force_build_step\" >> $thread7_in'" \
             --field="Perform code depclean:FBTN@5,5,4,6" "bash -c 'echo \"#< msg depclean\" >> $thread7_in'" \
             --field="Add-on:CB@7,8,4,6" '' \
             --field="Build log:termproc@0,9,8,10" "" > /dev/null 2>&1 &
  pid_thread7=$!

  TAB_LIST+="--tab=Android "
  ((TAB_NUM++))
} fi
#
###############################################################################

###############################################################################
# Thread eight: Handle iOS
if [[ $USE_IOS = "TRUE" ]];then
{
  (
    sleep 0.5;

    pulse_on=0;
    process_active=0

    while :;do
    {
      if [ -f ./build/global_mupel_install ];then
      {
        [ -z $SYSTEM_ACTIVE ] && exit 0;
        sleep 2;
        continue;
      } fi

      loadConfigFile

      # Set buttons to initial state
      echo "#> msg field $BUILD__BTN_____BUILD_COMPLETE:visible 1;";
      echo "#> msg field $BUILD__BTN__BUILD_KODI_DIRECT:visible 1;";
      echo "#> msg field $BUILD__BTN___BUILD_CEF_DIRECT:visible 1;";
      echo "#> msg field $BUILD__BTN____BUILD_SEL_ADDON:visible 1;";
      echo "#> msg field $BUILD__BTN_________STOP_BUILD:visible 0;";
      echo "#> msg field $BUILD__BTN_UPDATE_BINARY_DIST:visible 0;"; # Set off (currenly not supported)
      if [ -f "$BASE_PATH/build/kodi-$GIT_USER/kodi-ios.build/kodi.bin" ];then
      {
        kodi_direct=1
        parse_values "add-ons" "iOS"
      }
      else
        kodi_direct=0;fi
      echo "#> msg field $BUILD__BTN__BUILD_KODI_DIRECT:enable $kodi_direct;";
      echo "#> msg field $BUILD__BTN____BUILD_SEL_ADDON:enable $kodi_direct;";
      echo "#> msg field $BUILD__BTN________LAUNCH_KODI:enable $kodi_direct;";
      echo "#> msg field $BUILD__BTN___________DEBUGGER:visible 0;";

      echo "#> msg field $BUILD__BTN___FORCE_BUILD_STEP:enable 1;";
      echo "#> msg field $BUILD__BTN_PERF_CODE_DEPCLEAN:enable 1;";
      echo "#> msg field $BUILD__CB______________ADD_ON:enable $kodi_direct;";
      echo "#> msg field $BUILD__BTN___BUILD_CEF_DIRECT:enable $([ -f "$BASE_PATH/build/cef-$GIT_CEF_USER/cef-$CEF_SOURCE_BRANCH-ios.active" ] && echo 1 || echo 0);";

      # Main loop
      while :;do
      {
        if [ ! -f "$thread8_in" ];then
          exit 0;fi

        if [ -f ./build/global_mupel_install ];then
        {
          [ -z $SYSTEM_ACTIVE ] && exit 0;
          break;
        } fi

        if [ -z $SYSTEM_ACTIVE ];then
          echo "#> msg field -1:values;";fi

        proc="$(cat "$thread8_in")"
        echo -n "" > "$thread8_in";
        IFS=$'\n';
        for line in ${proc}; do
        {
          if [[ "$line" == "#< msg"* ]];then
          {
            [[ "$line" = *"start_direct_build_kodi"* ]] &&
              is_direct_kodi=1 || is_direct_kodi=0;
            [[ "$line" = *"start_direct_build_cef"* ]] &&
              is_direct_cef=1 || is_direct_cef=0;
            [[ "$line" = *"update_binary_distrib"* ]] &&
              is_update=1 || is_update=0;

            if [[ "$line" = *"start_build"* ]] ||
               [[ "$is_direct_cef" = 1 ]] ||
               [[ "$is_direct_kodi" = 1 ]] ||
               [[ "$line" = *"start_addon_build"* ]] ||
               [[ "$line" = *"kodi_force_build_step"* ]] ||
               [[ "$line" = *"update_binary_distrib"* ]];then
            {
              loadConfigFile

              echo "#> msg pulse on;";
              echo "#> msg field $BUILD__BTN_____BUILD_COMPLETE:visible 0;";
              echo "#> msg field $BUILD__BTN__BUILD_KODI_DIRECT:visible 0;";
              echo "#> msg field $BUILD__BTN___BUILD_CEF_DIRECT:visible 0;";
              echo "#> msg field $BUILD__BTN____BUILD_SEL_ADDON:visible 0;";
              echo "#> msg field $BUILD__BTN_UPDATE_BINARY_DIST:visible 0;";
              echo "#> msg field $BUILD__BTN_________STOP_BUILD:visible 1;";
              echo "#> msg field $BUILD__BTN________LAUNCH_KODI:enable 0;";
              echo "#> msg field $BUILD__BTN___FORCE_BUILD_STEP:enable 0;";
              echo "#> msg field $BUILD__BTN_PERF_CODE_DEPCLEAN:enable 0;";
              echo "#> msg field $BUILD__CB______________ADD_ON:enable 0;";

              pulse_on=1
              echo "#> msg field $BUILD__TERMPROC_____BUILD_LOG:clear;"
              if [[ "$line" = *"start_build"* ]] ||
                 [[ "$is_direct_cef" = 1 ]]      ||
                 [[ "$is_direct_kodi" = 1 ]]     ||
                 [[ "$is_update" = 1 ]];then
                buildThreadForOS "iOS" "${USE_LINUX_X86_DISTR}64" $is_direct_cef $is_direct_kodi $is_update;
              elif [[ "$line" = *"start_addon_build"* ]];then
                buildThreadKodiAddonForOS "iOS" "${USE_LINUX_X86_DISTR}64" "$KODI_SEL_ADDON";
              elif [[ "$line" = *"kodi_force_build_step"* ]];then
                forceKodiSelectedBuild "iOS" "${USE_LINUX_X86_DISTR}64" "ios";fi
            }
            elif [[ "$line" = *"stop_build"* ]];then
            {
              if [ -f "$TEMP_DIR/build_thread-ios.pid" ];then
              {
                pid_to_kill=$(cat "$TEMP_DIR/build_thread-ios.pid");
                ps -p $pid_to_kill > /dev/null
                if [[ $? = 0 ]];then
                {
                  killtree $pid_to_kill KILL;
                  kill $pid_to_kill
                } fi
                rm -f "$TEMP_DIR/build_thread-ios.pid"
              } fi

              echo ""
              if [[ $pulse_on = 1 ]];then
              {
                echo "#> msg pulse off;";
                pulse_on=0;
              } fi
              echo "#> msg percent 0;";
              echo "#> msg field $BUILD__BTN_____BUILD_COMPLETE:visible 1;";
              echo "#> msg field $BUILD__BTN__BUILD_KODI_DIRECT:visible 1;";
              echo "#> msg field $BUILD__BTN___BUILD_CEF_DIRECT:visible 1;";
              echo "#> msg field $BUILD__BTN____BUILD_SEL_ADDON:visible 1;";
              echo "#> msg field $BUILD__BTN_________STOP_BUILD:visible 0;";
              if [ -f "$BASE_PATH/build/kodi-$GIT_USER/kodi-ios/kodi.bin" ];then
                kodi_direct=1
              else
                kodi_direct=0;fi
              echo "#> msg field $BUILD__BTN__BUILD_KODI_DIRECT:enable $kodi_direct;";
              echo "#> msg field $BUILD__BTN____BUILD_SEL_ADDON:enable $kodi_direct;";
              echo "#> msg field $BUILD__BTN________LAUNCH_KODI:enable $kodi_direct;";
              echo "#> msg field $BUILD__BTN___________DEBUGGER:visible 0;";
              echo "#> msg field $BUILD__BTN___FORCE_BUILD_STEP:enable 1;";
              echo "#> msg field $BUILD__BTN_PERF_CODE_DEPCLEAN:enable 1;";
              echo "#> msg field $BUILD__CB______________ADD_ON:enable $kodi_direct;";
              echo "#> msg field $BUILD__BTN___BUILD_CEF_DIRECT:enable $([ -f "$BASE_PATH/build/cef-$GIT_CEF_USER/cef-$CEF_SOURCE_BRANCH-ios.active" ] && echo 1 || echo 0);";
            }
            elif [[ "$line" = *"depclean"* ]];then
            {
              showWarningDialog_YesNo "<b>All extra files on kodi not included in GIT becomes removed! \n\nAre you sure?</b>"
              if [ $? = 0 ];then
              {
                echo "NOT SUPPORTED!";







              } fi
            }
            elif [[ "$line" = *"openlogs"* ]];then
            {
              $TEXT_VIEVER \
                $BASE_PATH/build/creation-general.log \
                $BASE_PATH/build/creation-kodi-ios.log \
                $BASE_PATH/build/creation-cef-ios.log;
            }
            elif [[ "$line" = *"debugger"* ]];then
            {
              echo "Not supported!"
            }
            elif [[ "$line" = *"field $BUILD__BTN________LAUNCH_KODI:"* ]];then
            {
              enable=$(echo ${line} | awk -F'enable ' '{ print $2 }' | awk -F\; '{ print $1 }')
              echo "#> msg field $BUILD__BTN________LAUNCH_KODI:enable $enable;"
            }
            elif [[ "$line" = *"field $BUILD__CB______________ADD_ON:"* ]];then
            {
              KODI_SEL_ADDON=$(echo ${line} | awk -F\| '{ print $1 }' | awk -F\: '{ print $2 }')
              if [[ $KODI_SEL_ADDON != "(null)" ]];then
              {
                export KODI_SEL_ADDON
                saveConfigFile;
              } fi
            }
            elif [[ "$line" = *"field"* ]];then
            {
              IFS=$'\n'; for p in ${line}; do
                id=$(echo ${p} | awk -F ' ' '{print $4}' | awk -F ':' '{print $1}')
                value=$(echo ${p#*:} | awk -F ';' '{print $1}')
                IFS=$'|';
                if [[ "$id" -ge "0" ]];then
                  parse_values "iOS" $id "$value"
                else
                  id2=0
                  IFS=$'|';
                  for value2 in ${value}; do
                    parse_values "iOS" $id2 "$value2"
                    ((id2++))
                  done;
                fi; IFS=$'\n';
              done; unset IFS;
              saveConfigFile;
              [ -z $SYSTEM_ACTIVE ] && exit 0;
            }
            else
              echo "Wrong command! $line" > /dev/stderr;fi
          }
          else
          {
            echo "$line"
          } fi
        } done

        if [ -f "$TEMP_DIR/build_thread-ios.pid" ];then
        {
          process_active=1
        }
        elif [[ $process_active != 0 ]];then
        {
          echo "#< msg stop_build;" >> "$thread8_in";
          process_active=0;
        } fi

        sleep 0.75;
      } done
    }
    done
  ) | \
  $YAD_MUPEL --plug=$KEY --tabnum=$TAB_NUM --form \
             --text="iOS" \
             --pulsate \
             --xcom-log=$thread8_in \
             --field="Build complete:FBTN@0,1,0,2"        "bash -c 'echo \"#< msg start_build\" >> $thread8_in'" \
             --field="Build kodi direct:FBTN@2,3,0,2"     "bash -c 'echo \"#< msg start_direct_build_kodi\" >> $thread8_in'" \
             --field="Build CEF direct:FBTN@4,4,0,2"      "bash -c 'echo \"#< msg start_direct_build_cef\" >> $thread8_in'" \
             --field="Update binary distrib:FBTN@5,6,0,2" "bash -c 'echo \"#< msg update_binary_distrib\" >> $thread8_in'" \
             --field="Build selected addon:FBTN@8,8,0,2"  "bash -c 'echo \"#< msg start_addon_build\" >> $thread8_in'" \
             --field="Stop build:FBTN@0,8,2,4"            "bash -c 'echo \"#< msg stop_build\" >> $thread8_in'" \
             --field="Clear log:FBTN@0,0,4,6"             "bash -c 'echo \"#> msg field $BUILD__TERMPROC_____BUILD_LOG:clear;\" >> $thread8_in'" \
             --field="Open last logs:FBTN@1,1,4,6"        "bash -c 'echo \"#< msg openlogs\" >> $thread8_in'" \
             --field="Launch Kodi:FBTN@2,3,4,6"           "bash $BASE_PATH/tools/kodi.launch kodi-ios $thread8_in" \
             --field="Open debugger:FBTN@2,3,4,6"         "bash -c 'echo \"#< msg debugger\" >> $thread8_in'" \
             --field="Force build step:FBTN@4,4,4,6"      "bash -c 'echo \"#< msg kodi_force_build_step\" >> $thread8_in'" \
             --field="Perform code depclean:FBTN@5,5,4,6" "bash -c 'echo \"#< msg depclean\" >> $thread8_in'" \
             --field="Add-on:CB@7,8,4,6" '' \
             --field="Build log:termproc@0,9,8,10" "" > /dev/null 2>&1 &
  pid_thread8=$!

  TAB_LIST+="--tab=iOS "
  ((TAB_NUM++))
} fi
#
###############################################################################

###############################################################################
# Thread nine: Handle Settings

if [ -f $HOME/.mupel/android.conf ];then
  . $HOME/.mupel/android.conf;fi
if [ -f $HOME/.mupel/windows.conf ];then
. $HOME/.mupel/windows.conf;fi
if [ -f $HOME/.mupel/mac-osx.conf ];then
. $HOME/.mupel/mac-osx.conf;fi

{
  (
    while :;do
    {
      if [ -f ./build/global_mupel_install ];then
      {
        [ -z $SYSTEM_ACTIVE ] && exit 0;
        sleep 2;
        continue;
      } fi

      loadConfigFile

      if [ $SYSTEM_BITS = 64 ];then
      {
        [[ $USE_LINUX_X86_32 = "TRUE" ]] && [[ $USE_LINUX_X86_64 = "TRUE" ]] &&
          use_it=1 || use_it=0
        targets="x86_32!x86_64";
      }
      else
      {
        targets="x86_32";
        use_it=0
      } fi
      echo "#> msg field $SET_LINUX__________BUILD_TYPE:enable $use_it;"
      targets=$(echo ${targets//$LINUX_BUILD_TYPE/\^${LINUX_BUILD_TYPE}});
      echo "#> msg field $SET_LINUX__________BUILD_TYPE:set $targets;"

      [[ $SYSTEM_BITS = 64 ]] && [[ $USE_MS_WINDOWS_32 = "TRUE" ]] || [[ $USE_MS_WINDOWS_64 = "TRUE" ]] &&
        use_it=1 || use_it=0
      echo "#> msg field $SET_WINDOWS____________TARGET:visible $use_it;"
      echo "#> msg field $SET_WINDOWS______SSH_USERNAME:visible $use_it;"
      echo "#> msg field $SET_WINDOWS______SSH_PASSWORD:visible $use_it;"
      echo "#> msg field $SET_WINDOWS____________SSH_IP:visible $use_it;"
      echo "#> msg field $SET_WINDOWS__________SSH_PORT:visible $use_it;"
      echo "#> msg field $SET_WINDOWS________SSH_ACCESS:visible $use_it;"
      echo "#> msg field $SET_WINDOWS_________INSTALLER:visible $use_it;"
      echo "#> msg field $SET_WINDOWS______OPEN_CONTROL:visible $use_it;"
      echo "#> msg field $SET_WINDOWS________BUILD_TYPE:visible $use_it;"

      [ $use_it = 1 ] && [[ -f $BASE_PATH/tools/windows/install-systembuild-windows ]] &&
        use_it_2=1 || use_it_2=0;
      [ $use_it = 1 ] && [[ -n $WINDOWS_DEFAULT_RUN ]] && [[ -n $(ps aux | grep qemu-system-x86_64 | grep $WINDOWS_DEFAULT_RUN) ]] &&
        use_it_2=1 || use_it_2=0;
      echo "#> msg field $SET_WINDOWS______OPEN_CONTROL:visible $use_it_2;"
      [ $use_it = 1 ] && [[ -n $WINDOWS_DEFAULT_RUN ]] && [[ -z $(ps aux | grep qemu-system-x86_64 | grep $WINDOWS_DEFAULT_RUN) ]] &&
        use_it_2=1 || use_it_2=0;
      echo "#> msg field $SET_WINDOWS_____________START:visible $use_it_2;"
      [ $use_it = 1 ] && [[ $WINDOWS_DEFAULT_RUN = "emu-"* ]] &&
        use_it_2=1 || use_it_2=0;
      echo "#> msg field $SET_WINDOWS_____________START:enable $use_it_2;"
      [[ $WINDOWS_DEFAULT_RUN = "emu-"* ]] && use_it=1 || use_it=0;
      echo "#> msg field $SET_WINDOWS______OPEN_CONTROL:enable $use_it;"
      [[ $WINDOWS_DEFAULT_RUN = "ext-"* ]] && use_it=1 || use_it=0;
      echo "#> msg field $SET_WINDOWS____________SSH_IP:enable $use_it;"
      echo "#> msg field $SET_WINDOWS__________SSH_PORT:enable $use_it;"
      [[ $USE_MS_WINDOWS_32 = "TRUE" ]] && [[ $USE_MS_WINDOWS_64 = "TRUE" ]] &&
        use_it=1 || use_it=0
      echo "#> msg field $SET_WINDOWS________BUILD_TYPE:enable $use_it;"
      targets="x86_32!x86_64"
      targets=$(echo ${targets//$WINDOWS_BUILD_TYPE/\^${WINDOWS_BUILD_TYPE}});
      echo "#> msg field $SET_WINDOWS________BUILD_TYPE:set $targets;"

      [[ $SYSTEM_BITS = 64 ]] && [[ $USE_MAC_OS_X_64 = "TRUE" ]] && use_it=1 || use_it=0
      echo "#> msg field $SET_MAC________________TARGET:visible $use_it;"
      echo "#> msg field $SET_MAC__________SSH_USERNAME:visible $use_it;"
      echo "#> msg field $SET_MAC__________SSH_PASSWORD:visible $use_it;"
      echo "#> msg field $SET_MAC________________SSH_IP:visible $use_it;"
      echo "#> msg field $SET_MAC______________SSH_PORT:visible $use_it;"
      echo "#> msg field $SET_MAC_________________START:visible $use_it;"
      echo "#> msg field $SET_MAC____________SSH_ACCESS:visible $use_it;"
      echo "#> msg field $SET_MAC__________OPEN_CONTROL:visible $use_it;"
      [[ $SYSTEM_BITS = 64 ]] && [ $use_it = 1 ] && [[ -f $BASE_PATH/tools/mac-osx/install-systembuild-mac-osx ]] &&
        use_it_2=1 || use_it_2=0;
      echo "#> msg field $SET_MAC_____________INSTALLER:visible $use_it_2;"
      [ $use_it = 1 ] && [[ -n $MAC_OS_X_DEFAULT_RUN ]] && [[ -n $(ps aux | grep qemu-system-x86_64 | grep $MAC_OS_X_DEFAULT_RUN) ]] &&
        use_it_2=1 || use_it_2=0;
      echo "#> msg field $SET_MAC__________OPEN_CONTROL:visible $use_it_2;"
      [ $use_it = 1 ] && [[ -n $MAC_OS_X_DEFAULT_RUN ]] && [[ -z $(ps aux | grep qemu-system-x86_64 | grep $MAC_OS_X_DEFAULT_RUN) ]] &&
        use_it_2=1 || use_it_2=0;
      echo "#> msg field $SET_MAC_________________START:visible $use_it_2;"
      [ $use_it = 1 ] && [[ $MAC_OS_X_DEFAULT_RUN = "emu-"* ]] &&
        use_it_2=1 || use_it_2=0;
      echo "#> msg field $SET_MAC_________________START:enable $use_it_2;"
      [[ $MAC_OS_X_DEFAULT_RUN = "emu-"* ]] && use_it=1 || use_it=0;
      echo "#> msg field $SET_MAC__________OPEN_CONTROL:enable $use_it;"
      [[ $MAC_OS_X_DEFAULT_RUN = "ext-"* ]] && use_it=1 || use_it=0;
      echo "#> msg field $SET_MAC________________SSH_IP:enable $use_it;"
      echo "#> msg field $SET_MAC______________SSH_PORT:enable $use_it;"

      [[ $SYSTEM_BITS = 64 ]] && [[ $USE_ANDROID_ARM = "TRUE" ]] || [[ $USE_ANDROID_X86 = "TRUE" ]] &&
        use_it=1 || use_it=0
      echo "#> msg field $SET_ANDROID________BUILD_TYPE:visible $use_it;"
      echo "#> msg field $SET_ANDROID__BUILD_SYS_TARGET:visible $use_it;"
      echo "#> msg field $SET_ANDROID_________INSTALLER:visible $use_it;"
      echo "#> msg field $SET_ANDROID_______AVD_MANAGER:visible $use_it;"
      [[ $SYSTEM_BITS = 64 ]] && [[ $USE_ANDROID_ARM = "TRUE" ]] &&
        use_it=1 || use_it=0
      echo "#> msg field $SET_ANDROID____ARM_EMU_SOURCE:visible $use_it;"
      [[ $SYSTEM_BITS = 64 ]] && [[ $USE_ANDROID_X86 = "TRUE" ]] &&
        use_it=1 || use_it=0
      echo "#> msg field $SET_ANDROID____x86_EMU_SOURCE:visible $use_it;"

      update_counter=10

      # Main loop
      while :;do
      {
        if [ ! -f "$thread9_in" ];then
          exit 0;fi

        if [ -f ./build/global_mupel_install ];then
        {
          [ -z $SYSTEM_ACTIVE ] && exit 0;
          break;
        } fi

        proc=$(cat "$thread9_in")
        echo -n "" > "$thread9_in";
        IFS=$'\n';
        for line in ${proc}; do
        {
          if [[ "$line" == "#< msg"* ]];then
          {
            if [[ "$line" = *"field"* ]];then
            {
              IFS=$'\n';
              for p in ${line}; do
              {
                id=$(echo ${p} | awk -F ' ' '{print $4}' | awk -F ':' '{print $1}')
                value=$(echo ${p#*:} | awk -F ';' '{print $1}')
                IFS=$'|';
                if [[ "$id" -ge "0" ]];then
                  parse_values "settings" $id "$value"
                else
                  id2=0
                  IFS=$'|'; for value2 in ${value}; do
                    parse_values "settings" $id2 "$value2"
                    ((id2++))
                  done;
                  [ -z $SYSTEM_ACTIVE ] && exit 0;
                fi; IFS=$'\n';
              } done; unset IFS;
            }
            elif [[ "$line" = *"open_windows_control"* ]];then
            {
              /usr/local/bin/qemu-windows &
            }
            elif [[ "$line" = *"start_windows"* ]];then
            {
              /usr/local/bin/qemu-windows &
              update_counter=8
            }
            elif [[ "$line" = *"open_windows_installer"* ]];then
            {
              (
                $BASE_PATH/tools/windows/install-systembuild-windows;
                echo "#> msg field $SET_WINDOWS____________TARGET:set $(getWindowsTargets x86);";
              ) &
            }
            elif [[ "$line" = *"open_android_x86_emu"* ]];then
            {
              /usr/local/bin/qemu-android-x86 &
            }
            elif [[ "$line" = *"open_android_x86_image"* ]];then
            {
              $BASE_PATH/tools/open-android-x86-image-browser &
            }
            elif [[ "$line" = *"android_virtual_sdcard"* ]];then
            {
              $BASE_PATH/tools/generate-android-virtual-sdcard &
            }
            elif [[ "$line" = *"open_mac_os_x_control"* ]];then
            {
              /usr/local/bin/qemu-mac-osx &
            }
            elif [[ "$line" = *"start_mac_os_x"* ]];then
            {
              /usr/local/bin/qemu-mac-osx &
              update_counter=8
            }
            elif [[ "$line" = *"open_mac_os_x_installer"* ]];then
            {
              (
                $BASE_PATH/tools/mac-osx/install-systembuild-mac-osx;
                echo "#> msg field $SET_MAC________________TARGET:set $(getMacOSXTargets x86);";
              ) &
            }
            elif [[ "$line" = *"open_android_virt_disk"* ]];then
            {
              ssh_access_mac_os_x &
            }
            elif [[ "$line" = *"open_avd_control"* ]];then
            {
              (
                $ANDROID_DEV_ROOT/android-sdk-linux/tools/android avd

                echo "#> msg field $SET_ANDROID____ARM_EMU_SOURCE:set $(getAndroidAVDS arm);"
                echo "#> msg field $SET_ANDROID____x86_EMU_SOURCE:set $(getAndroidAVDS x86);"
              ) &
            }
            elif [[ "$line" = *"open_android_installer"* ]];then
            {
              (
                $BASE_PATH/tools/android/install-systembuild-android;
                echo "#> msg field $SET_MAC________________TARGET:set $(getAndroidTargets x86);";
              ) &
            }
            elif [[ "$line" = *"open_dist_control"* ]];then
            {
              (
                $BASE_PATH/tools/linux/install-systembuild-linux
                echo "#> msg field $SET_LINUX_____USED_LINUX_DIST:set $(getLinuxTargetDist);";
              ) &
            }
            else
              echo "Wrong command! $line" > /dev/stderr;fi
          } fi
        } done;
        unset IFS

        if [ $update_counter -lt 20 ];then
        {
          let update_counter=update_counter+1;
        }
        else
        {
          update_counter=0;

          if [[ -z $WINDOWS_DEFAULT_RUN ]];then
          {
            echo "#> msg field $SET_WINDOWS______OPEN_CONTROL:visible 0;"
            echo "#> msg field $SET_WINDOWS_____________START:visible 0;"
          }
          elif [[ -n $(ps aux | grep qemu-system-x86_64 | grep $WINDOWS_DEFAULT_RUN) ]];then
          {
            echo "#> msg field $SET_WINDOWS______OPEN_CONTROL:visible 1;"
            echo "#> msg field $SET_WINDOWS_____________START:visible 0;"
          }
          else
          {
            echo "#> msg field $SET_WINDOWS______OPEN_CONTROL:visible 0;"
            echo "#> msg field $SET_WINDOWS_____________START:visible 1;"
          } fi
          [[ $WINDOWS_DEFAULT_RUN = "ext-"* ]] && use_it=1 || use_it=0;
          echo "#> msg field $SET_WINDOWS____________SSH_IP:enable $use_it;"
          echo "#> msg field $SET_WINDOWS__________SSH_PORT:enable $use_it;"

          if [[ -z $MAC_OS_X_DEFAULT_RUN ]];then
          {
            echo "#> msg field $SET_MAC__________OPEN_CONTROL:visible 0;"
            echo "#> msg field $SET_MAC_________________START:visible 0;"
          }
          elif [[ -n $(ps aux | grep qemu-system-x86_64 | grep $MAC_OS_X_DEFAULT_RUN) ]];then
          {
            echo "#> msg field $SET_MAC__________OPEN_CONTROL:visible 1;"
            echo "#> msg field $SET_MAC_________________START:visible 0;"
          }
          else
          {
            echo "#> msg field $SET_MAC__________OPEN_CONTROL:visible 0;"
            echo "#> msg field $SET_MAC_________________START:visible 1;"
          } fi
          [[ $MAC_OS_X_DEFAULT_RUN = "ext-"* ]] && use_it=1 || use_it=0;
          echo "#> msg field $SET_MAC________________SSH_IP:enable $use_it;"
          echo "#> msg field $SET_MAC______________SSH_PORT:enable $use_it;"

        } fi

        sleep 0.25
      } done
    } done
  ) | \
  $YAD_MUPEL --plug=$KEY --tabnum=$TAB_NUM --form \
             --xcom-log=$thread9_in \
             --field=":LBL@0,8,15,16" '' \
             --field="<b>Linux settings:</b>:LBL@0,0,16,17" '' \
             --field="Used 32/64bit Distribution:CB@1,2,16,17" "$(getLinuxTargetDist)" \
             --field="Distribution control:FBTN@3,4,16,17" "bash -c 'echo \"#< msg open_dist_control\" >> $thread9_in'" \
             --field="Use GUI debug:CHK@5,5,16,17" "${USE_GUI_DEBUG:-TRUE}" \
             \
             --field="Build type:CB@1,2,17,18" 'x86_32!x86_64' \
             \
             \
             --field=":LBL@0,8,21,22" '' \
             --field="<b>Windows settings:</b>:LBL@0,0,22,23" '' \
             --field="Build system target:CB@1,4,22,23" "$(getWindowsTargets)" \
             --field="Installer:FBTN@5,6,22,23" "bash -c 'echo \"#< msg open_windows_installer\" >> $thread9_in'" \
             \
             --field="Build type:CB@1,2,23,24" 'x86_32!x86_64' \
             --field="Username / Password (ssh):@3,4,23,24" "$WINDOWS_SSH_USERNAME" \
             --field=":H@4,5,23,24" "$WINDOWS_SSH_PASSWORD" \
             \
             --field="Emulation control:FBTN@1,1,25,26" "bash -c 'echo \"#< msg open_windows_control\" >> $thread9_in'" \
             --field="Start Windows:FBTN@1,1,25,26" "bash -c 'echo \"#< msg start_windows\" >> $thread9_in'" \
             --field="SSH access:FBTN@2,2,25,26" "bash -c 'echo \"#< msg ssh_access_windows\" >> $thread9_in'" \
             --field="URL or IP / Port (ssh):@3,4,25,26" "$WINDOWS_SSH_IP" \
             --field=":NUM@4,5,25,26" "$WINDOWS_SSH_PORT" \
             \
             \
             --field=":LBL@0,8,28,29" '' \
             --field="<b>Mac OS X settings:</b>:LBL@0,8,29,30" '' \
             --field="Build system target:CB@1,4,29,30" "$(getMacOSXTargets)" \
             --field="Installer:FBTN@5,6,29,30" "bash -c 'echo \"#< msg open_mac_os_x_installer\" >> $thread9_in'" \
             \
             --field="Emulation control:FBTN@1,1,30,31" "bash -c 'echo \"#< msg open_mac_os_x_control\" >> $thread9_in'" \
             --field="Start Mac OS X:FBTN@1,1,30,31" "bash -c 'echo \"#< msg start_mac_os_x\" >> $thread9_in'" \
             --field="SSH access:FBTN@2,2,30,31" "bash -c 'echo \"#< msg ssh_access_mac_os_x\" >> $thread9_in'" \
             --field="Username / Password (ssh):@3,4,30,31" "$MAC_OS_X_SSH_USERNAME" \
             --field=":H@4,5,30,31" "$MAC_OS_X_SSH_PASSWORD" \
             \
             --field="URL or IP / Port (ssh):@3,4,31,32" "$MAC_OS_X_SSH_IP" \
             --field=":NUM@4,5,31,32" "$MAC_OS_X_SSH_PORT" \
             \
             \
             --field=":LBL@0,8,37,38" '' \
             --field="<b>Android settings:</b>:LBL@0,8,38,39" '' \
             --field="Build type:CB@1,2,38,39" 'arm!x86' \
             --field="Build system target:CB@3,4,38,39" "$(getAndroidTargets)" \
             --field="Installer:FBTN@5,6,38,39" "bash -c 'echo \"#< msg open_android_installer\" >> $thread9_in'" \
             \
             --field="ARM AVD emulation:CB@1,6,39,40" "$(getAndroidAVDS arm)" \
             \
             --field="x86 AVD emulation:CB@1,6,40,41" "$(getAndroidAVDS x86)" \
             \
             --field="Virtual disk manager:FBTN@1,2,41,42" "bash -c 'echo \"#< msg android_virtual_sdcard\" >> $thread9_in'" \
             --field="Open x86 disk:FBTN@3,4,41,42" "bash -c 'echo \"#< msg open_android_x86_image\" >> $thread9_in'" \
             --field="Android Virtual Device (AVD) Manager:FBTN@5,6,41,42" "bash -c 'echo \"#< msg open_avd_control\" >> $thread9_in'" \
             \
             --field=":XTALK" '' > /dev/null &
  pid_thread9=$!
  ((TAB_NUM++))
}
#
###############################################################################

###############################################################################
# Thread ten: Handle help
{
  (
    while :;do
    {
      if [ -f ./build/global_mupel_install ];then
      {
        [ -z $SYSTEM_ACTIVE ] && exit 0;
        sleep 2;
        continue;
      } fi

      loadConfigFile

      [ $KODI_SOURCE_USE_BASE != "TRUE" ] &&
        use_it=1 || use_it=0
      echo "#> msg field $SET_2_KODI________SOURCE_REPOSI:enable $use_it;"

      [ $CEF_SOURCE_USE_BASE != "TRUE" ] &&
        use_it=1 || use_it=0
      echo "#> msg field $SET_2_CEF_________SOURCE_REPOSI:enable $use_it;"
      [[ $SUPPORT_CEF = "TRUE" ]] &&
        use_it=1 || use_it=0
      echo "#> msg field $SET_2_CEF_________SOURCE_BRANCH:visible $use_it;"
      echo "#> msg field $SET_2_CEF_________VERBOSE_BUILD:visible $use_it;"
      echo "#> msg field $SET_2_CEF_________VERBOSE_BUILD:set $CEF_VERBOSE_BUILD;";
      echo "#> msg field $SET_2_VAR_________CPU_PROC_JOBS:set $CPU_PROC_JOBS;"
      echo "#> msg field $SET_2_VAR____EMU_INSTALL_PREFIX:set $EMU_INSTALL_PREFIX;"

      parse_values "settings2" 6 "$KODI_SOURCE_URL";
      parse_values "settings2" 14 "$CEF_SOURCE_URL";

      update_counter=10

      # Main loop
      while :;do
      {
        if [ ! -f "$thread10_in" ];then
          exit 0;fi

        if [ -f ./build/global_mupel_install ];then
        {
          [ -z $SYSTEM_ACTIVE ] && exit 0;
          break;
        } fi

        proc=$(cat "$thread10_in")
        echo -n "" > "$thread10_in";
        IFS=$'\n';
        for line in ${proc}; do
        {
          if [[ "$line" == "#< msg"* ]];then
          {
            if [[ "$line" = *"field"* ]];then
            {
              IFS=$'\n';
              for p in ${line}; do
              {
                id=$(echo ${p} | awk -F ' ' '{print $4}' | awk -F ':' '{print $1}')
                value=$(echo ${p#*:} | awk -F ';' '{print $1}')
                IFS=$'|';
                if [[ "$id" -ge "0" ]];then
                  parse_values "settings2" $id "$value"
                else
                  id2=0
                  IFS=$'|'; for value2 in ${value}; do
                    parse_values "settings2" $id2 "$value2"
                    ((id2++))
                  done;
                  [ -z $SYSTEM_ACTIVE ] && exit 0;
                fi; IFS=$'\n';
              } done; unset IFS;
            }
            elif [[ "$line" = *"ssh_access_windows"* ]];then
            {
              ssh_access_windows &
            }
            elif [[ "$line" = *"ssh_access_mac_os_x"* ]];then
            {
              ssh_access_mac_os_x &
            }
            elif [[ "$line" = *"android_emu_keys"* ]];then
            {
              showAndroidEmulatorKeyHelp &
            }
            elif [[ "$line" = *"git_command_help"* ]];then
            {
              showGitCommandHelp &
            }
            elif [[ "$line" = *"open_krusader"* ]];then
            {
              krusader $HOME &
            }
            elif [[ "$line" = *"jenkins"* ]];then
            {
              showdialog --title="Mupel - Jenkins place" \
                         --width=520 --height=474 --html \
                         --uri=$BASE_PATH/icons/jenkins-holiday.png \
                         --text="<i><span size=\"large\">Hi, I'm still in holiday</span></i>" \
                         --button=gtk-ok:0 &
            }
            else
              echo "Wrong command! $line" > /dev/stderr;fi
          } fi
        } done;
        unset IFS

        if [ $update_counter -lt 20 ];then
        {
          let update_counter=update_counter+1;
        }
        else
        {
          update_counter=0;

        } fi

        sleep 0.25
      } done
    } done
  ) | \
  $YAD_MUPEL --plug=$KEY --tabnum=$TAB_NUM --form \
             --text="Settings / Help" \
             --xcom-log=$thread10_in \
             --field=":LBL@0,8,0,1"                                       '' \
             --field="<b>General:</b>:LBL@0,8,2,3"                        '' \
             --field="CPU process jobs:NUM@0,1,4,5"                       "${CPU_PROC_JOBS:-8}!1..32" \
             --field="Emulation prefix:MDIR@2,4,4,5"                      "${EMU_INSTALL_PREFIX:-$HOME/.mupel/systems}" \
             --field="Include last open requests in branch:CHK@5,6,4,5"   "${INCLUDE_OPEN_PULL_REQUESTS:-FALSE}" \
             --field="No warning dialog on fail:CHK@7,8,4,5"              "${NO_WARNING_ON_FAIL:-FALSE}" \
             \
             --field=":LBL@0,8,10,11"                                     '' \
             --field="<b>Kodi:</b>:LBL@0,8,12,13"                         '' \
             --field="Repository:@0,3,14,15"                              "$KODI_SOURCE_URL" \
             --field="Use base:CHK@4,5,14,15"                             "${KODI_SOURCE_USE_BASE:-FALSE}" \
             --field="Branch:CB@6,8,14,15"                                '' \
             --field="Run tests:CHK@0,0,17,18"                            "${KODI_RUN_TESTS:-FALSE}" \
             --field="Configure in direct build:CHK@1,2,17,18"            "${KODI_CONF_IN_DIRECT_BUILD:-FALSE}" \
             --field="Depclean on branch change:CHK@3,4,17,18"            "${KODI_DEP_CLEAN:-FALSE}" \
             \
             --field=":LBL@0,8,20,21"                                     '' \
             --field="<b>CEF (Chromium embedded framwork):</b>:LBL@0,8,21,22" '' \
             --field="Repository:@0,3,22,23"                              "$CEF_SOURCE_URL" \
             --field="Use base:CHK@4,5,22,23"                             "${CEF_SOURCE_USE_BASE:-FALSE}" \
             --field="Branch:CB@6,8,22,23"                                '' \
             --field="Debug:CHK@0,0,24,25"                                "${CEF_DEBUG:-FALSE}" \
             --field="Force update:CHK@1,1,24,25"                         "${CEF_FORCE_UPDATE:-FALSE}" \
             --field="No update:CHK@2,2,24,25"                            "${CEF_NO_UPDATE:-FALSE}" \
             --field="Force config:CHK@3,3,24,25"                         "${CEF_FORCE_CONFIG:-FALSE}" \
             --field="Force clean:CHK@4,4,24,25"                          "${CEF_FORCE_CLEAN:-FALSE}" \
             --field="Force clean deps:CHK@5,6,24,25"                     "${CEF_FORCE_CLEAN_DEPS:-FALSE}" \
             --field="Build tests:CHK@7,7,24,25"                          "${CEF_BUILD_TESTS:-FALSE}" \
             --field="Verbose build:CHK@8,8,24,25"                        "${CEF_VERBOSE_BUILD:-FALSE}" \
             \
             --field=":LBL@0,8,40,41"                                     '' \
             --field="<b>Helper commands:</b>:LBL@0,8,41,42"              '' \
             --field="Open file browser (Krusader):FBTN@0,2,42,43"        "bash -c 'echo \"#< msg open_krusader\" >> $thread10_in'" \
             --field="Open ssh access console to Windows:FBTN@3,5,42,43"  "bash -c 'echo \"#< msg ssh_access_windows\" >> $thread10_in'" \
             --field="Open ssh access console to Mac OS X:FBTN@6,8,42,43" "bash -c 'echo \"#< msg ssh_access_mac_os_x\" >> $thread10_in'" \
             \
             --field=":LBL@0,8,47,48"                                     '' \
             --field="<b>Help documentation:</b>:LBL@0,8,48,49"           '' \
             --field="Git command help:FBTN@0,4,49,50"                    "bash -c 'echo \"#< msg git_command_help\" >> $thread10_in'" \
             --field="Android emulator keys:FBTN@5,8,49,50"               "bash -c 'echo \"#< msg android_emu_keys\" >> $thread10_in'" \
             \
             --field=":LBL@0,8,51,52"                                     '' \
             --field="What does jenkins?:FBTN@0,3,52,53"                  "bash -c 'echo \"#< msg hello_jenkins\" >> $thread10_in'" \
             --field="About:FBTN@4,8,52,53"                               "bash ./mupel --info" \
             \
             --field=":XTALK" '' > /dev/null &
  pid_thread10=$!
  ((TAB_NUM++))
}
#
###############################################################################

###############################################################################
# Thread main
{
  $YAD_MUPEL --notebook \
             --width=1024 --height=768 \
             --title="Mupel" \
             --window-icon="$BASE_PATH/icons/icon-mupel-128x128.png" \
             --image="$BASE_PATH/icons/icon-kodi-mbe.png" \
             --image-on-top \
             --text="\
<i><span size=\"larger\">Multi platform build environment for Kodi on Linux (Mupel)</span></i>
<i>Version:</i> $MUPEL_VERSION" \
             --key=$KEY \
             --tab-pos=top \
             --tab="General" \
             $TAB_LIST \
             --tab="Settings" \
             --tab="Settings / Help" \
             --button=gtk-ok:0 > /dev/null 2>&1

  unset SYSTEM_ACTIVE
}
#
###############################################################################

cleanup > /dev/null

exit
