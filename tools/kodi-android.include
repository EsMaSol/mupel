#!/bin/bash -e
###############################################################################
#                                                                             #
#     Copyright (C) 2015 Team KODI                                            #
#     http://kodi.tv                                                          #
#                                                                             #
#  This program is free software: you can redistribute it and/or modify       #
#  it under the terms of the GNU General Public License as published by       #
#  the Free Software Foundation, either version 3 of the License, or          #
#  (at your option) any later version.                                        #
#                                                                             #
#  This program is distributed in the hope that it will be useful,            #
#  but WITHOUT ANY WARRANTY; without even the implied warranty of             #
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              #
#  GNU General Public License for more details.                               #
#                                                                             #
#  You should have received a copy of the GNU General Public License          #
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.      #
#                                                                             #
###############################################################################

BASE_PATH=${BASE_PATH:-$(cd $(dirname $0)/.. ; pwd -P)}

. "$HOME/.mupel/mupel.conf";
. "$BASE_PATH/tools/tool_functions";
. "$BASE_PATH/tools/tool_cef.include";
. "$BASE_PATH/tools/tool_kodi.include";

TEMP_DIR=$BASE_PATH/build/.tmp;
BUILD_SYSTEM="android-${ANDROID_SYSTEM}"

function exitBuild
{
  rm -f $TEMP_DIR/build_thread-kodi_active-$BUILD_SYSTEM;
  rm -f $TEMP_DIR/build_thread-kodi_active;
}

###############################################################################
# Start of main process

[ ! -d $TEMP_DIR ] && mkdir -p $TEMP_DIR;

INSTALL_DIR_TYPE="Release"
processOptsKodi "$@";

initBuildScript_Kodi;

# Set error return
trap 'trapError ${LINENO};' ERR;
trap exitBuild EXIT

# Add failed file which becomes removed if everything is ok, this way is more
# secure
touch $TEMP_DIR/kodi-$BUILD_SYSTEM.failed;

. "$HOME/.mupel/android.conf"
. "$BASE_PATH/versions"

# Load or update kodi
if [ ! -d $BASE_PATH/build/kodi-$GIT_USER/kodi-$BUILD_SYSTEM ] ||
   [[ $DISABLE_GIT_UPDATE = FALSE ]];then
  loadKodiBuildDir $BUILD_SYSTEM "Android ${ANDROID_SYSTEM}";fi

ANDROID_SDK_DEFAULT_VERSION=$(cat $BASE_PATH/build/kodi-$GIT_USER/kodi-$BUILD_SYSTEM/tools/buildsteps/defaultenv | \
                                awk '/^  android)$/{i=1;next} i && i++ <= 2' | grep "DEFAULT_SDK_VERSION" | awk -F '="' '{print $2}' | awk -F '"' '{print $1}')
ANDROID_NDK_DEFAULT_VERSION=$(cat $BASE_PATH/build/kodi-$GIT_USER/kodi-$BUILD_SYSTEM/tools/buildsteps/defaultenv | \
                                awk '/^  android)$/{i=1;next} i && i++ <= 2' | grep "DEFAULT_NDK_VERSION" | awk -F '="' '{print $2}' | awk -F '"' '{print $1}')
ANDROID_SEL_TARGET_VERSION=$(echo $ANDROID_SEL_TARGET | awk -F '-' '{print $2}');

if [[ $ANDROID_SEL_TARGET_VERSION = $ANDROID_SDK_DEFAULT_VERSION ]];then
{
  export SDK_VERSION=$ANDROID_SDK_DEFAULT_VERSION
  export NDK_VERSION=$ANDROID_NDK_DEFAULT_VERSION
}
else
{
  export SDK_VERSION=$ANDROID_SEL_TARGET_VERSION
  export NDK_VERSION=$ANDROID_NDK_ADDITIONAL_VERSION
} fi
export Configuration=$INSTALL_DIR_TYPE
export TARBALLS=$BASE_PATH/build/kodi-tarballs
export BUILDTHREADS=$CPU_PROC_JOBS
export XBMC_PLATFORM_DIR=android
export WORKSPACE=$BASE_PATH/build/kodi-$GIT_USER/kodi-$BUILD_SYSTEM
export XBMC_DEPENDS_ROOT=$BASE_PATH/build/kodi-$GIT_USER/binary_distrib/$INSTALL_DIR_TYPE/kodi;
export NDK_ARCH=${ANDROID_SYSTEM}
export ANDROID_DEV_ROOT=$ANDROID_DEV_ROOT
export CURRENT_NDK_PATH=$ANDROID_DEV_ROOT/android-ndk-r$NDK_VERSION
export NDK_PATH=$CURRENT_NDK_PATH
export SDK_PATH=$SDK_PATH
export CURRENT_TOOLCHAIN=$ANDROID_DEV_ROOT/android-toolchain-$NDK_ARCH-$SDK_VERSION-r$NDK_VERSION
export TOOLCHAIN=$CURRENT_TOOLCHAIN
export TOOLCHAIN_X86=$CURRENT_TOOLCHAIN

if [ ! -z $SELECTED_BUILD ];then
  KODI_BUILD="Single selection build of '$SELECTED_BUILD'"
elif [ ! -z $ADDON_BUILD ];then
  KODI_BUILD="$ADDON_BUILD add-on only";
elif [ -z $DIRECT_KODI_BUILD ];then
  KODI_BUILD="complete";
else
  KODI_BUILD="direct";fi

printf "
/------------------------------------------------------------------------------
|
|  Kodi build Android ${ANDROID_SYSTEM}
| ========================
|
|  Build type :        $KODI_BUILD
|  Build add-ons :     $([[ $INCLUDE_KODI_ADDONS = "TRUE" ]] && echo "yes" || echo "no")
|  Test run :          $([[ $KODI_RUN_TESTS = "TRUE" ]] && echo "yes" || echo "no")
|  Configuration :     $Configuration
|
|  TARBALLS :          $TARBALLS
|  BUILDTHREADS :      $BUILDTHREADS
|  XBMC_PLATFORM_DIR : $XBMC_PLATFORM_DIR
|  WORKSPACE :         $WORKSPACE
|
|  NDK_ARCH :          $NDK_ARCH
|  SDK_VERSION :       $SDK_VERSION
|  NDK_VERSION :       $NDK_VERSION
|  XBMC_DEPENDS_ROOT : $XBMC_DEPENDS_ROOT
|  NDK_ARCH :          $NDK_ARCH
|  ANDROID_DEV_ROOT :  $ANDROID_DEV_ROOT
|  NDK_PATH :          $NDK_PATH
|  SDK_PATH :          $SDK_PATH
|  TOOLCHAIN :         $TOOLCHAIN
|
\\-------------------------------------------------------------------------------
"

sleep 3

[[ $ANDROID_SYSTEM = x86 ]] && ADDIT_BUILD_DIR_NAME=x86
# Change to source code path
cd $BASE_PATH/build/kodi-$GIT_USER/kodi-${BUILD_SYSTEM}

if [ ! -z $SELECTED_BUILD ];then
{
  printf "\nRunning ${BRIGHT}${WHITE}${UNDERLINE}$SELECTED_BUILD${NORMAL} on '${BRIGHT}${GREEN}${BUILD_SYSTEM}${NORMAL}'\n"
  sleep 2
  ./tools/buildsteps/android${ADDIT_BUILD_DIR_NAME}/$SELECTED_BUILD
  if [ $SELECTED_BUILD = make-xbmc ];then
    make apk;
    make install;
  fi
  printf $CURS_UP
  log_success_msg
}
elif [ -z $ADDON_BUILD ];then
{
  if [ -z $DIRECT_KODI_BUILD ];then
  {
    printf "\nRunning ${BRIGHT}${WHITE}${UNDERLINE}prepare-depends${NORMAL} on '${BRIGHT}${GREEN}${BUILD_SYSTEM}${NORMAL}'\n"
    if [[ $KODI_NO_PREPARE_DEPENDS = "FALSE" ]];then
    {
      sleep 2
      bash $BASE_PATH/build/kodi-$GIT_USER/kodi-$BUILD_SYSTEM/tools/buildsteps/android${ADDIT_BUILD_DIR_NAME}/prepare-depends
      log_success_msg
    }
    else
    {
      ( cd $WORKSPACE/tools/depends/;./bootstrap )
      log_skip_msg;
    } fi

    printf "\nRunning ${BRIGHT}${WHITE}${UNDERLINE}configure-depends${NORMAL} on '${BRIGHT}${GREEN}${BUILD_SYSTEM}${NORMAL}'\n"
    sleep 2
    bash $BASE_PATH/build/kodi-$GIT_USER/kodi-$BUILD_SYSTEM/tools/buildsteps/android${ADDIT_BUILD_DIR_NAME}/configure-depends
    printf $CURS_UP
    log_success_msg

    printf "\nRunning ${BRIGHT}${WHITE}${UNDERLINE}make-depends${NORMAL} on '${BRIGHT}${GREEN}${BUILD_SYSTEM}${NORMAL}'\n"
    sleep 2
    bash $BASE_PATH/build/kodi-$GIT_USER/kodi-$BUILD_SYSTEM/tools/buildsteps/android${ADDIT_BUILD_DIR_NAME}/make-depends
    printf $CURS_UP
    log_success_msg

    printf "\nRunning ${BRIGHT}${WHITE}${UNDERLINE}prepare-xbmc${NORMAL} on '${BRIGHT}${GREEN}${BUILD_SYSTEM}${NORMAL}'\n"
    sleep 2
    bash $BASE_PATH/build/kodi-$GIT_USER/kodi-$BUILD_SYSTEM/tools/buildsteps/android${ADDIT_BUILD_DIR_NAME}/prepare-xbmc
    printf $CURS_UP
    log_success_msg
  }
  else
    printf "\nRunning ${BRIGHT}${WHITE}Direct Kodi build started${NORMAL}\n";fi

  if [ "$KODI_RUN_TESTS" = "true" ];then
    CONFIG_EXTRA="$CONFIG_EXTRA --enable-gtest";fi
  export CONFIG_EXTRA

  if [ -z $DIRECT_KODI_BUILD ] ||
     [[ $KODI_CONF_IN_DIRECT_BUILD = "TRUE" ]] ||
     [ ! -f $BASE_PATH/build/kodi-$GIT_USER/kodi-$BUILD_SYSTEM/Makefile ];then
  {
    printf "\nRunning ${BRIGHT}${WHITE}${UNDERLINE}configure-xbmc${NORMAL} on '${BRIGHT}${GREEN}${BUILD_SYSTEM}${NORMAL}'\n"
    sleep 2
    bash $BASE_PATH/build/kodi-$GIT_USER/kodi-$BUILD_SYSTEM/tools/buildsteps/android${ADDIT_BUILD_DIR_NAME}/configure-xbmc
    printf $CURS_UP
    log_success_msg
  } fi

  printf "\nRunning ${BRIGHT}${WHITE}${UNDERLINE}make-xbmc${NORMAL} on '${BRIGHT}${GREEN}${BUILD_SYSTEM}${NORMAL}'\n"
  sleep 2
  bash $BASE_PATH/build/kodi-$GIT_USER/kodi-$BUILD_SYSTEM/tools/buildsteps/android${ADDIT_BUILD_DIR_NAME}/make-xbmc
  make apk;
  if [ -z $DIRECT_KODI_BUILD ];then
    make install;fi
  log_success_msg

  if [ -z $DIRECT_KODI_BUILD ];then
  {
    printf "\nRunning ${BRIGHT}${WHITE}${UNDERLINE}make-binary-addons${NORMAL} on '${BRIGHT}${GREEN}${BUILD_SYSTEM}${NORMAL}'"
    sleep 2
    if [[ $INCLUDE_KODI_ADDONS != FALSE ]];then
    {
      printf "\n"
      bash $BASE_PATH/build/kodi-$GIT_USER/kodi-$BUILD_SYSTEM/tools/buildsteps/android${ADDIT_BUILD_DIR_NAME}/make-binary-addons
      printf $CURS_UP
      log_success_msg
    }
    else
      log_skip_msg;fi
  } fi

  printf "\nRunning ${BRIGHT}${WHITE}${UNDERLINE}tests${NORMAL} on '${BRIGHT}${GREEN}${BUILD_SYSTEM}${NORMAL}'"
  sleep 2
  if [[ $KODI_RUN_TESTS != FALSE ]];then
  {
    printf "\n"
    bash $BASE_PATH/build/kodi-$GIT_USER/kodi-$BUILD_SYSTEM/tools/buildsteps/android${ADDIT_BUILD_DIR_NAME}/run-tests
    printf $CURS_UP
    log_success_msg
  }
  else
    log_skip_msg;fi
}
else
{
  CONFIGURE=1

  trap '' ERR
  if [ -f ./tools/depends/target/binary-addons/${ANDROID_SYSTEM}-linux-androideabi-${ANDROID_SEL_TARGET}/Makefile ];then
  {
    grep -q $ADDON_BUILD ./tools/depends/target/binary-addons/${ANDROID_SYSTEM}-linux-androideabi-${ANDROID_SEL_TARGET}/Makefile
    [[ $? = 0 ]] && CONFIGURE=0
  } fi
  trap '[[ ! -z $OWN_TEMP ]] && [[ ! -z $TEMP_DIR ]] && rm -rf $TEMP_DIR; trapError ${LINENO};' ERR;

  if [[ $CONFIGURE = 1 ]];then
  {
    rm -rf ./tools/depends/target/binary-addons/${ANDROID_SYSTEM}-linux-androideabi-${ANDROID_SEL_TARGET}/build/depends/include/GL
    make -C ./tools/depends/target/binary-addons PREFIX=${XBMC_DEPENDS_ROOT}/${ANDROID_SYSTEM}-linux-androideabi-${ANDROID_SEL_TARGET} ADDONS="$ADDON_BUILD"
  }
  else
  {
    make -C ./tools/depends/target/binary-addons/${ANDROID_SYSTEM}-linux-androideabi-${ANDROID_SEL_TARGET} PREFIX=${XBMC_DEPENDS_ROOT}/${ANDROID_SYSTEM}-linux-androideabi-${ANDROID_SEL_TARGET} ${ADDON_BUILD}
  } fi
} fi

trap '' ERR

for i in `ls -1 $HOME/.android/avd/*.avd -d`;do
{
  touch $i/need_kodi_update_${ANDROID_SYSTEM};
} done

printf "\n \
${BRIGHT}${WHITE}All steps successfully performed and test build present on:${NORMAL}
 - ${BRIGHT}${GREEN}${UNDERLINE}${BASE_PATH}`ls -1 -t $BASE_PATH/build/kodi-$GIT_USER/kodi-$BUILD_SYSTEM/*.apk | head -1`${NORMAL}\n"

rm -f $TEMP_DIR/kodi-$BUILD_SYSTEM.failed;
[ ! -z $OWN_TEMP ] && [[ ! -z $TEMP_DIR ]] && rm -rf $TEMP_DIR;
exit 0
