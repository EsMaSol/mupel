#!/usr/bin/bash
###############################################################################
#                                                                             #
#     Copyright (C) 2015 Team Kodi                                            #
#     https://kodi.tv                                                         #
#                                                                             #
#  This program is free software: you can redistribute it and/or modify       #
#  it under the terms of the GNU General Public License as published by       #
#  the Free Software Foundation, either version 3 of the License, or          #
#  (at your option) any later version.                                        #
#                                                                             #
#  This program is distributed in the hope that it will be useful,            #
#  but WITHOUT ANY WARRANTY; without even the implied warranty of             #
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              #
#  GNU General Public License for more details.                               #
#                                                                             #
#  You should have received a copy of the GNU General Public License          #
#  along with this program.  If not, see <"https://www.gnu.org/licenses">.    #
#                                                                             #
###############################################################################
#                                                                             #
#       Note: This script becomes called on Mac OS X system!                  #
#       Access from muple to them is over a ssh connection.                   #
#                                                                             #
###############################################################################

trap 'echo Error on line ${LINENO} inside Mac OS X system call; exit 1;' ERROR SIGHUP SIGINT SIGTERM;

MUPEL_PATH=$HOME/Desktop/Mupel

BIT_SIZE="64";
BASE_PATH=$MUPEL_PATH/remote_access/build # remote_access mount becomes done separate before

. "$MUPEL_PATH/remote_access/home/.mupel/mupel.conf";
. "$MUPEL_PATH/remote_access/home/.mupel/mac-osx.conf";
. "$BASE_PATH/tools/tool_functions";
. "$BASE_PATH/tools/tool_kodi.include";

TEMP_DIR=$BASE_PATH/build/.tmp;
BUILD_SYSTEM="osx${BIT_SIZE}"

function exitBuild
{
  m -f $TEMP_DIR/build_thread-kodi_active-osx-x86_$BIT_SIZE;
  m -f $TEMP_DIR/build_thread-kodi_active;
}

###############################################################################
# Start of main process

[ ! -d $TEMP_DIR ] && mkdir -p $TEMP_DIR;

INSTALL_DIR_TYPE="Release"
processOptsKodi "$@"

initBuildScript_Kodi;

# Set error return
trap exitBuild EXIT

# Load or update kodi
if [ ! -d $MUPEL_PATH/build/kodi-$GIT_USER/kodi-$BUILD_SYSTEM ] ||
   [[ $DISABLE_GIT_UPDATE = FALSE ]];then
  loadKodiBuildDir $BUILD_SYSTEM "Mac OS X x86 ${BIT_SIZE}bit" "$MUPEL_PATH/kodi-$GIT_USER/";fi

use_xcodebuild=/Applications/Xcode.app/Contents/Developer/usr/bin/xcodebuild

export Configuration=$INSTALL_DIR_TYPE;
export TARBALLS="$BASE_PATH/build/kodi-tarballs"
export BUILDTHREADS=$CPU_PROC_JOBS
export XBMC_PLATFORM_DIR="osx${BIT_SIZE}"
export WORKSPACE="$MUPEL_PATH/kodi-$GIT_USER/kodi-$BUILD_SYSTEM"
export XBMC_DEPENDS_ROOT="$MUPEL_PATH/kodi-$GIT_USER/binary_distrib/$INSTALL_DIR_TYPE"
export SDK_VERSION=`$use_xcodebuild -showsdks | sed -E -n 's/.*macosx([0-9]+)\.([0-9]+)/\1.\2/p' | sort  -n -t. -k1,1 -k2,2 | tail -n 1`
#export DEBUG_SWITCH='--disable-debug'

if [ ! -z $SELECTED_BUILD ];then
  KODI_BUILD="Single selection build of '$SELECTED_BUILD'"
elif [ ! -z $ADDON_BUILD ];then
  KODI_BUILD="$ADDON_BUILD add-on only";
elif [ -z $DIRECT_KODI_BUILD ];then
  KODI_BUILD="complete";
else
  KODI_BUILD="direct";fi

printf "
-------------------------------------------------------------------------------
|
|  Kodi build Mac OS X x86 ${BIT_SIZE}bit
| ===============================
|
|  Build type :        $KODI_BUILD
|  Build add-ons :     $([[ $INCLUDE_KODI_ADDONS = TRUE ]] && echo yes || echo no)
|  Test run :          $([[ $KODI_RUN_TESTS = TRUE ]] && echo yes || echo no)
|  Configuration :     $Configuration
|
|  TARBALLS :          $TARBALLS
|  BUILDTHREADS :      $BUILDTHREADS
|  XBMC_PLATFORM_DIR : $XBMC_PLATFORM_DIR
|  XBMC_DEPENDS_ROOT : $XBMC_DEPENDS_ROOT
|  WORKSPACE :         $WORKSPACE
|  SDK_VERSION :       $SDK_VERSION
|  DEBUG_SWITCH :      $DEBUG_SWITCH
|
|  Free Disk size :    $(df -h . | tail -1 | tr -s ' ' | cut -d' ' -f4 | awk -F 'Gi' '{print $1}') GByte
|
\\-------------------------------------------------------------------------------
"

sleep 3

# Change to source code path
cd $MUPEL_PATH/kodi-$GIT_USER/kodi-$BUILD_SYSTEM

if [ ! -z $SELECTED_BUILD ];then
{
  printf "\nRunning ${BRIGHT}${WHITE}${UNDERLINE}$SELECTED_BUILD${NORMAL} on '${BRIGHT}${GREEN}${BUILD_SYSTEM}${NORMAL}'\n"
  sleep 2
  ./tools/buildsteps/osx${BIT_SIZE}/$SELECTED_BUILD
  printf $CURS_UP
  log_success_msg
}
elif [ -z $ADDON_BUILD ];then
{
  if [ -z $DIRECT_KODI_BUILD ];then
  {
    printf "\nRunning ${BRIGHT}${WHITE}${UNDERLINE}prepare-depends${NORMAL} on '${BRIGHT}${GREEN}${BUILD_SYSTEM}${NORMAL}'\n"
    if [[ $KODI_NO_PREPARE_DEPENDS = "FALSE" ]];then
    {
      sleep 2
      ./tools/buildsteps/osx${BIT_SIZE}/prepare-depends
      log_success_msg
    }
    else
    {
      ( cd $WORKSPACE/tools/depends/;./bootstrap )
      log_skip_msg;
    } fi

    printf "\nRunning ${BRIGHT}${WHITE}${UNDERLINE}configure-depends${NORMAL} on '${BRIGHT}${GREEN}${BUILD_SYSTEM}${NORMAL}'\n"
    sleep 2
    ./tools/buildsteps/osx${BIT_SIZE}/configure-depends
    log_success_msg

    printf "\nRunning ${BRIGHT}${WHITE}${UNDERLINE}make-depends${NORMAL} on '${BRIGHT}${GREEN}${BUILD_SYSTEM}${NORMAL}'\n"
    sleep 2
    ./tools/buildsteps/osx${BIT_SIZE}/make-depends
    log_success_msg

    printf "\nRunning ${BRIGHT}${WHITE}${UNDERLINE}prepare-xbmc${NORMAL} on '${BRIGHT}${GREEN}${BUILD_SYSTEM}${NORMAL}'\n"
    sleep 2
    ./tools/buildsteps/osx${BIT_SIZE}/prepare-xbmc
    log_success_msg
  }
  else
    printf "\nRunning ${BRIGHT}${WHITE}Direct Kodi build started${NORMAL}\n";fi

  if [ $KODI_RUN_TESTS = true ];then
    CONFIG_EXTRA="$CONFIG_EXTRA --enable-gtest";fi
  export CONFIG_EXTRA

  if [ -z $DIRECT_KODI_BUILD ] ||
     [[ $KODI_CONF_IN_DIRECT_BUILD = "TRUE" ]] ||
     [ ! -f $BASE_PATH/build/kodi-$GIT_USER/kodi-$BUILD_SYSTEM/Makefile ];then
  {
    printf "\nRunning ${BRIGHT}${WHITE}${UNDERLINE}configure-xbmc${NORMAL} on '${BRIGHT}${GREEN}${BUILD_SYSTEM}${NORMAL}'\n"
    sleep 2
    ./tools/buildsteps/osx${BIT_SIZE}/configure-xbmc
    log_success_msg
  } fi

  printf "\nRunning ${BRIGHT}${WHITE}${UNDERLINE}make-xbmc${NORMAL} on '${BRIGHT}${GREEN}${BUILD_SYSTEM}${NORMAL}'\n"
  sleep 2
  ./tools/buildsteps/osx${BIT_SIZE}/make-xbmc
  log_success_msg

  printf "\nRunning ${BRIGHT}${WHITE}${UNDERLINE}package${NORMAL} on '${BRIGHT}${GREEN}${BUILD_SYSTEM}${NORMAL}'\n"
  sleep 2
  ./tools/buildsteps/osx${BIT_SIZE}/package
  log_success_msg

  if [ -z $DIRECT_KODI_BUILD ] && [[ $INCLUDE_KODI_ADDONS != FALSE ]];then
  {
    printf "\nRunning ${BRIGHT}${WHITE}${UNDERLINE}prepare-xbmc${NORMAL} on '${BRIGHT}${GREEN}${BUILD_SYSTEM}${NORMAL}'\n"
    sleep 2
    ./tools/buildsteps/osx${BIT_SIZE}/prepare-xbmc
    log_success_msg

    printf "\nRunning ${BRIGHT}${WHITE}${UNDERLINE}make-binary-addons${NORMAL} on '${BRIGHT}${GREEN}${BUILD_SYSTEM}${NORMAL}'"
    sleep 2
    ./tools/buildsteps/osx${BIT_SIZE}/make-binary-addons
    log_success_msg
  } fi

  printf "\nRunning ${BRIGHT}${WHITE}${UNDERLINE}tests${NORMAL} on '${BRIGHT}${GREEN}${BUILD_SYSTEM}${NORMAL}'"
  if [[ $KODI_RUN_TESTS != FALSE ]];then
  {
    printf "\n"
    sleep 2
    ./tools/buildsteps/osx${BIT_SIZE}/run-tests
    log_success_msg
  }
  else
    log_skip_msg;fi
}
else
{
  CONFIGURE=1

  trap '' ERR
  if [ -f ./tools/depends/target/binary-addons/x86_${BIT_SIZE}-osx-gnu/Makefile ];then
  {
    grep -q $ADDON_BUILD ./tools/depends/target/binary-addons/x86_${BIT_SIZE}-osx-gnu/Makefile
    [[ $? = 0 ]] && CONFIGURE=0
  } fi
  trap 'echo Error on line ${LINENO} inside Mac OS X system call; exit 1;' ERR

  if [[ $CONFIGURE = 1 ]];then
  {
    m -rf ./tools/depends/target/binary-addons/x86_${BIT_SIZE}-osx-gnu/build/depends/include/GL
    make -C ./tools/depends/target/binary-addons PREFIX=$XBMC_DEPENDS_ROOT/x86_${BIT_SIZE}-osx-gnu ADDONS=$ADDON_BUILD
  }
  else
  {
    make -C ./tools/depends/target/binary-addons/x86_${BIT_SIZE}-osx-gnu PREFIX=$XBMC_DEPENDS_ROOT/x86_${BIT_SIZE}-osx-gnu $ADDON_BUILD
  } fi
} fi

trap '' ERROR

printf "\n\
${BRIGHT}${WHITE}All steps successfully performed and test build present and can started on MAC OS X with:${NORMAL}
 - ${BRIGHT}${BLUE}${UNDERLINE}${BASE_PATH}~/Desktop/Mupel/kodi-$GIT_USER/kodi-osx64/build/$INSTALL_DIR_TYPE/Kodi${NORMAL}\n"

rm -f $TEMP_DIR/kodi-osx-x86_${BIT_SIZE}.failed;

exit 0
