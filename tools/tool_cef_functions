#!/bin/bash

if [ -f "$HOME/.mupel/mupel.conf" ];then
{
  . "$HOME/.mupel/mupel.conf";
} fi
PATH="$BASE_PATH/tools:$PATH"

##
# Usage help function return as string the available values
function usageCEF()
{
  echo "Usage: $0 [--options]"
  echo "Options:"
  echo "--debug             Build debug version"
  echo "--force-update      Force a Chromium and CEF update. This will trigger a"
  echo "                    new build and distribution."
  echo "--no-update         Do not update Chromium or CEF"
  echo "--force-config      Force creation of a new gclient config file."
  echo "--force-clean       Force a clean checkout of Chromium and CEF. This will"
  echo "                    trigger a new update, build and distribution."
  echo "--force-clean-deps  Force a clean checkout of Chromium dependencies. Used"
  echo "                    in combination with --force-clean"
  echo "--build-direct      If inserted kodi becomes direct build without perform of"
  echo "                    pre steps, becomes possible after one time the complete"
  echo "                    buildwas done. Usable during programming to reduce time"
  echo "--build-tests       Also build the cef_unittests target"
  echo "--verbose-build     Show all command lines while building"
  echo "--help              This help message"
  exit 1
}
##

##
# Function to process given input variables
function processOptsCEF()
{
  [[ $CEF_DEBUG = "TRUE" ]]            && DEBUG_BUILD="--enable-debug=yes" && INSTALL_DIR_TYPE="Debug";
  [[ $CEF_FORCE_UPDATE = "TRUE" ]]     && FORCEUPDATE=1;
  [[ $CEF_NO_UPDATE = "TRUE" ]]        && NOUPDATE=1;
  [[ $CEF_FORCE_CONFIG = "TRUE" ]]     && FORCECONFIG=1;
  [[ $CEF_FORCE_CLEAN = "TRUE" ]]      && FORCECLEAN=1;
  [[ $CEF_FORCE_CLEAN_DEPS = "TRUE" ]] && FORCECLEANDEPS=1;
  [[ $CEF_BUILD_TESTS = "TRUE" ]]      && BUILDTESTS=1;
  [[ $CEF_VERBOSE_BUILD = "TRUE" ]]    && VERBOSEBUILD=1;

  while test "$1" != "" ; do
    case "$1" in
      --build-direct)
        DIRECT_CEF_BUILD=1;
        ;;
      --debug)
        DEBUG_BUILD="--enable-debug=yes";
        INSTALL_DIR_TYPE="Debug";
        ;;
      --force-update)
        FORCEUPDATE=1;
        ;;
      --no-update)
        NOUPDATE=1;
        ;;
      --force-config)
        FORCECONFIG=1;
        ;;
      --force-clean)
        FORCECLEAN=1;
        ;;
      --force-clean-deps)
        FORCECLEANDEPS=1;
        ;;
      --build-tests)
        BUILDTESTS=1;
        ;;
      --verbose-build)
        VERBOSEBUILD=1;
        ;;
      --help)                   usageCEF;;
      *)
        echo "invalid command-line option: $1"
        usageCEF
        ;;
    esac
    shift
  done
}
##

##
function createCEF_gclient()
{
  local dest=$1

  sh -c cat > "$dest" << EOF
solutions = [
  {
    "managed": False,
    "name": "src",
    "url": "https://chromium.googlesource.com/chromium/src.git",
    "custom_deps": {
      "build": None,
      "build/scripts/command_wrapper/bin": None,
      "build/scripts/gsd_generate_index": None,
      "build/scripts/private/data/reliability": None,
      "build/scripts/tools/deps2git": None,
      "build/third_party/lighttpd": None,
      "build/third_party/webrtc": None,
      "commit-queue": None,
      "depot_tools": None,
      "src/chrome_frame/tools/test/reference_build/chrome": None,
      "src/chrome/tools/test/reference_build/chrome_linux": None,
      "src/chrome/tools/test/reference_build/chrome_mac": None,
      "src/chrome/tools/test/reference_build/chrome_win": None,
    },
    "deps_file": ".DEPS.git",
    "safesync_url": ""
  }
]
EOF
  handleErrorsCodes $? "cat" "sh -c cat > $dest" console exit;
}
##

##
# Read the CEF branch from the specified path.
function read_branch_config_file()
{
  local path=$1;
  if [ -f $path/cef.branch ];then
  {
    contents=$(cat $path/cef.branch);
    echo $contents;
  } fi
}

##
# Write the CEF branch to the specified path.
function write_branch_config_file()
{
  local path=$1
  local branch=$2

  if [ ! -f $path/cef.branch ];then
    echo $branch > $path/cef.branch;fi
}

##
function initBuildScript_CEF()
{
  GIT_CEF_USER=$(echo $CEF_SOURCE_URL | tr ':' '/' | awk -F ''.com/'|'.org/'' '{print $2}' | awk -F '/' '{print $1}');
  if [ -z $GIT_CEF_USER ];then
  {
    printf "${RED}${BRIGHT}ERROR: ${WHITE}Needed git user name could not be detected for CEF${NORMAL}\n";
    exit 1;
  } fi

  if [ ! -d $BASE_PATH/build/cef-$GIT_CEF_USER/cef ];then
  {
    printf "\
${RED}${BRIGHT}ERROR: ${WHITE}Needed source code on${NORMAL}
${BRIGHT}${WHITE}$BASE_PATH/build/cef-$GIT_CEF_USER/cef${NORMAL}
${BRIGHT}${WHITE}for build not present!${NORMAL}\n";
    exit 1;
  } fi

  ##
  # If no temporary directory is passed create a own
  if [ -z $TEMP_DIR ];then
  {
    OWN_TEMP=1;
    TEMP_DIR=$(mktemp -d);
    printf "${YELLOW}${BRIGHT}WARNING: ${WHITE}No temporary directory defined, using own $TEMP_DIR${NORMAL}\n\n";
  } fi
}
##
