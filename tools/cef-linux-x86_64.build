#!/bin/bash -e
###############################################################################
#                                                                             #
#     Copyright (C) 2015 Team KODI                                            #
#     http://kodi.tv                                                          #
#                                                                             #
#  This program is free software: you can redistribute it and/or modify       #
#  it under the terms of the GNU General Public License as published by       #
#  the Free Software Foundation, either version 3 of the License, or          #
#  (at your option) any later version.                                        #
#                                                                             #
#  This program is distributed in the hope that it will be useful,            #
#  but WITHOUT ANY WARRANTY; without even the implied warranty of             #
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              #
#  GNU General Public License for more details.                               #
#                                                                             #
#  You should have received a copy of the GNU General Public License          #
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.      #
#                                                                             #
###############################################################################

BASE_PATH=${BASE_PATH:-$(cd $(dirname $0)/.. ; pwd -P)}

. "${HOME}/.mupel/mupel.conf";
. "${BASE_PATH}/tools/tool_functions";

DEBUG_BUILD="--enable-debug=no"
BUILD_SYSTEM="linux-x86_64"
TEMP_DIR=
INSTALL_DIR_TYPE="Release"

##
# Usage help function return as string the available values
function usage()
{
  echo "Usage: $0 [--options]"
  echo "Options:"
  echo "--debug           build debug version"
  echo "--build-direct    if inserted kodi becomes direct build without perform of pre"
  echo "                  steps, becomes possible after one time the complete build"
  echo "                  was done. Usable during programming to reduce time"
  echo "--temp-dir        the temporary directory to store parts, if not set becomes new"
  echo "                  created. This value is used from 'mupel' to have same dir."
  echo "--help            this help message"
  exit 1
}
##

##
# Function to process given input variables
function process_opts()
{
  while test "$1" != "" ; do
    case "$1" in
      --build-direct)
        DIRECT_CEF_BUILD=1
        ;;
      --debug)
        DEBUG_BUILD="--enable-debug=yes"
        INSTALL_DIR_TYPE="Debug"
        ;;
      --addon)
        case "$2" in
            "")
              echo "Option '--addon', no argument"
              shift
              ;;
            *)
              ADDON_BUILD="$2"
              shift
              ;;
        esac ;;
      --temp-dir)
        case "$2" in
            "")
              echo "Option '--temp-dir', no argument"
              shift
              ;;
            *)
              TEMP_DIR="$2"
              shift
              ;;
        esac ;;
      --help)                   usage;;
      *)
        echo "invalid command-line option: $OPTARG"
        usage
        ;;
    esac
    shift
  done
}
##

###############################################################################
# Start of main process

process_opts "$@"

initBuildScript_CEF;

# Set error return
set -e;
trap '[[ ! -z $OWN_TEMP ]] && [[ ! -z $TEMP_DIR ]] && rm -rf $TEMP_DIR; trapError ${LINENO};' ERR;

# Add failed file which becomes removed if everything is ok, this way is more
# secure
touch $TEMP_DIR/cef-linux-x86_64.failed;

. "$BASE_PATH/versions";

printf "
-------------------------------------------------------------------------------
 CEF build Linux x86 64bit

"

sleep 3

# If direct build is requested in build before was on other system a complete
# build becomes forced
if [ ! -f "${BASE_PATH}/build/cef-$GIT_CEF_USER/.cef-linux-x86_64.active" ] && [[ ! -z $DIRECT_CEF_BUILD ]];then
{
  printf "${RED}${BRIGHT}WARNING: ${WHITE}Needed CEF code for direct build not present and complete build becomes done${NORMAL}\n";
  unset DIRECT_CEF_BUILD;
} fi

# Check Google Chromium source is present which becomes loaded from
# 'basic-system-creation.build', if not present bring a error exit
if [ ! -d "${BASE_PATH}/build/cef-$GIT_CEF_USER/src" ];then
{
  printf "\
${RED}${BRIGHT}ERROR: ${WHITE}Needed CEF source code on${NORMAL}
${BRIGHT}${WHITE}${BASE_PATH}/build/cef-$GIT_CEF_USER/src${NORMAL}
${BRIGHT}${WHITE}for build not present!${NORMAL}\n";
  exit 1;
} fi

# Create the final install path for them
INSTALL_PATH=${BASE_PATH}/build/cef-$GIT_CEF_USER/binary_distrib/${INSTALL_DIR_TYPE}/cef
[ ! -d "${INSTALL_PATH}" ] && mkdir -p "${INSTALL_PATH}"

printf "${WHITE}${BRIGHT}Moving in previous removed 64 bit parts${NORMAL}"
if [ ! -d "${BASE_PATH}/build/cef-$GIT_CEF_USER/src/third_party/binutils/Linux_x64" ];then
  mv "${BASE_PATH}/build/cef-$GIT_CEF_USER/.reverse_backup/third_party/binutils/Linux_x64" "${BASE_PATH}/build/cef-$GIT_CEF_USER/src/third_party/binutils";fi
log_success_msg

REV_BACKUP_PATH=${BASE_PATH}/build/cef-$GIT_CEF_USER/.reverse_backup
if [ ! -d ${REV_BACKUP_PATH}/linux-x86_64 ];then
  mkdir -p ${REV_BACKUP_PATH}/linux-x86_64;fi

export PATH="${BASE_PATH}/build/depot_tools:${PATH}"
export GYP_GENERATORS=ninja

printf "${WHITE}${BRIGHT}Starting build of CEF system for Linux x86-64 ...${NORMAL}\n"

# Backup 64 bit parts, which becomes removed on source for 32 bit build
mkdir -p ${REV_BACKUP_PATH}/third_party/binutils
if [ -d "${BASE_PATH}/build/cef-$GIT_CEF_USER/src/third_party/binutils/Linux_x64" ];then
{
  cp -Rf "${BASE_PATH}/build/cef-$GIT_CEF_USER/src/third_party/binutils/Linux_x64" "${REV_BACKUP_PATH}/third_party/binutils"
} fi
if [ -d "${BASE_PATH}/build/cef-$GIT_CEF_USER/src/third_party/binutils/Linux_ia32" ];then
{
  cp -Rf "${BASE_PATH}/build/cef-$GIT_CEF_USER/src/third_party/binutils/Linux_ia32" "${REV_BACKUP_PATH}/third_party/binutils"
  rm -Rf "${BASE_PATH}/build/cef-$GIT_CEF_USER/src/third_party/binutils/Linux_ia32"
} fi

export GYP_DEFINES="target_arch=x64"

if [[ -z $DIRECT_CEF_BUILD ]];then
{
  if [ ! -f "${BASE_PATH}/build/cef-$GIT_CEF_USER/.cef-linux-x86_64.active" ];then
  {
    rm -rf "${BASE_PATH}/build/cef-$GIT_CEF_USER/src/out"
    if [ -d "${REV_BACKUP_PATH}/linux-x86_64/out" ];then
    {
      printf "${WHITE}${BRIGHT}Perform store back to chromium of previous builded Linux x86-64 ...\n${NORMAL}"
      cp -rf "${REV_BACKUP_PATH}/linux-x86_64/out" "${BASE_PATH}/build/cef-$GIT_CEF_USER/src"

      rm -f "${BASE_PATH}/build/cef-$GIT_CEF_USER/.cef-*.active"
      printf $CURS_UP
      log_success_msg
    } fi
  } fi

  cd ${BASE_PATH}/build/cef-$GIT_CEF_USER/src/cef
  ./cef_create_projects.sh
  printf $CURS_UP
  log_success_msg

  cd ${BASE_PATH}/build/cef-$GIT_CEF_USER

  printf "${WHITE}${BRIGHT}Update chromium clang scripts ...${NORMAL}\n"
  python ${BASE_PATH}/build/cef-$GIT_CEF_USER/src/tools/clang/scripts/update.py --if-needed
  printf $CURS_UP
  log_success_msg

  printf "${WHITE}${BRIGHT}Set last change flags ...${NORMAL}\n"
  python ${BASE_PATH}/build/cef-$GIT_CEF_USER/src/build/util/lastchange.py -o src/build/util/LASTCHANGE
  python ${BASE_PATH}/build/cef-$GIT_CEF_USER/src/build/util/lastchange.py -s src/third_party/WebKit -o src/build/util/LASTCHANGE.blink
  printf $CURS_UP
  log_success_msg

  printf "${WHITE}${BRIGHT}Download third party binutils ...${NORMAL}\n"
  python ${BASE_PATH}/build/cef-$GIT_CEF_USER/src/third_party/binutils/download.py
  printf $CURS_UP
  log_success_msg

  if [ ! -d ${BASE_PATH}/build/cef-$GIT_CEF_USER/src/third_party/binutils/Linux_x64 ];then
  {
    printf "${WHITE}${BRIGHT}Restore 64 bit parts from binutils ...${NORMAL}\n"
    cp -Rf "${REV_BACKUP_PATH}/third_party/binutils/Linux_x64" "${BASE_PATH}/build/cef-$GIT_CEF_USER/src/third_party/binutils"
    printf $CURS_UP
    log_success_msg
  } fi

  touch "${BASE_PATH}/build/cef-$GIT_CEF_USER/.cef-linux-x86_64.active"
} fi

printf "${WHITE}${BRIGHT}Start $INSTALL_DIR_TYPE build of build CEF (Linux x86-64) ...\n${NORMAL}"
[[ $CEF_VERBOSE_BUILD = "TRUE" ]] && VERBOSE="-v"
ninja $VERBOSE -C ${BASE_PATH}/build/cef-$GIT_CEF_USER/src/out/$INSTALL_DIR_TYPE cefclient cef_unittests chrome_sandbox -j $CPU_PROC_JOBS
printf $CURS_UP
log_success_msg

printf "${WHITE}${BRIGHT}Perform storage of Linux x86-64 in ${REV_BACKUP_PATH}/linux-x86_64 ...\n${NORMAL}"
cp -rf "${BASE_PATH}/build/cef-$GIT_CEF_USER/src/out" "${REV_BACKUP_PATH}/linux-x86_64"
printf $CURS_UP
log_success_msg

printf "${WHITE}${BRIGHT}Start creation of kodi's build distribution for Linux x86 64bit ...${NORMAL}"

# Remove old to prevent 7z from errors which comes if build becomes cancelled on 'make_distrib.py'
if [ -f ${INSTALL_PATH}/cef_binary_*_linux64.7z ];then
  rm -f ${INSTALL_PATH}/cef_binary_*_linux64.7z;fi

# Values for make_distrib.py:
export CEF_COMMAND_7ZIP="7z"
#
# --output-dir    - output directory [required]
# --allow-partial - allow creation of partial distributions
# --no-symbols    - don't create symbol files
# --no-docs       - don't create documentation
# --no-archive    - don't create archives for output directories
# --ninja-build   - build was created using ninja
# --x64-build     - build was created for 64-bit systems
# --minimal       - include only release build binary files
# --client        - include only the cefclient application
# -q, --quiet     - do not output detailed status information

# Create the requested distribution types.
options="--ninja-build --quiet --allow-partial "

# Create the distribution.
python "${BASE_PATH}/build/cef-$GIT_CEF_USER/src/cef/tools/make_distrib.py" --output-dir "${INSTALL_PATH}" ${options}

if [ -f ${INSTALL_PATH}/kodi-web-*_linux64.7z ];then
  rm -f ${INSTALL_PATH}/kodi-web-*_linux64.7z;fi

name=`basename ${INSTALL_PATH}/*_linux64.7z`
mv -f ${INSTALL_PATH}/${name} ${INSTALL_PATH}/kodi-web-${CEF_KODI_BINARY_VERSION}_${name}
printf $CURS_UP
log_success_msg

trap '' ERR

printf "\n \
${BRIGHT}${BLUE}All CEF steps successfully performed and build present${NORMAL}
 - Created packages present on: ${BRIGHT}${BLUE}${UNDERLINE}${INSTALL_PATH}${NORMAL}

-------------------------------------------------------------------------------

"

rm -f $TEMP_DIR/cef-linux-x86_64.failed;
[ ! -z $OWN_TEMP ] && [[ ! -z $TEMP_DIR ]] && rm -rf $TEMP_DIR;
exit 0
