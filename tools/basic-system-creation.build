#!/bin/bash

BASE_PATH=${BASE_PATH:-$(cd $(dirname $0)/.. ; pwd -P)}

TEMP_DIR=$BASE_PATH/build/.tmp;
DO_CLEAN=0

. "$HOME/.mupel/mupel.conf";
. "$BASE_PATH/tools/tool_functions";
. "$BASE_PATH/tools/tool_cef.include";

###############################################################################
# Sub functions
{

##
# Function which handle returns and exit from script if failed
# It insert a file with *_failed.txt and name of process to temporary directory
# further removes it the *.pid file that the base know it is stopped, this only
# check only exit on fail without a succcess message
# values:
# error_value = The error to check, 0 = OK
# process     = The name of related process
function check_retval
{
  local error_value="${1}";
  local process="${2}";

  if [ ${error_value} != 0 ];then
  {
    log_failure_msg;
    touch "$TEMP_DIR/${process}_failed.txt";
    rm -f "$TEMP_DIR/${process}.pid";
    exit ${error_value};
  } fi
}
##

##
# Usage help function return as string the available values
function usage
{
  echo "Usage: $0 [--options]"
  echo "Options:"
  echo "--help        this help message"
  echo "Script will prompt interactively for other values."
  exit 1
}

##
# Function to process given input variables
function process_opts
{
  while test "$1" != "" ; do
    case "$1" in
      --help)                   usage;;
      *)
        echo "invalid command-line option: $1"
        usage
        ;;
    esac
    shift
  done
}
}


###############################################################################
# Start of main process

process_opts "$@"

printf "${WHITE}${BRIGHT}/-----------------------------------------------------------------------------\\ \n"
printf "${WHITE}${BRIGHT}|                                                                             |\n"
printf "${WHITE}${BRIGHT}|                      Mupel systems build, Version %s                     |\n" $MUPEL_VERSION
printf "${WHITE}${BRIGHT}|                                                                             |\n"
printf "${WHITE}${BRIGHT}|-----------------------------------------------------------------------------|\n"
printf "${WHITE}${BRIGHT}|                                                                             |\n"
printf "${WHITE}${BRIGHT}|${NORMAL}     Copyright (C) 2015 Team KODI (Alwin Esch)                               ${WHITE}${BRIGHT}|\n"
printf "${WHITE}${BRIGHT}|${NORMAL}     http://kodi.tv                                                          ${WHITE}${BRIGHT}|\n"
printf "${WHITE}${BRIGHT}|                                                                             |\n"
printf "${WHITE}${BRIGHT}|${NORMAL}     GNU General Public License, Version 3                                   ${WHITE}${BRIGHT}|\n"
printf "${WHITE}${BRIGHT}|${NORMAL}     see http://www.gnu.org/licenses/                                        ${WHITE}${BRIGHT}|\n"
printf "${WHITE}${BRIGHT}|                                                                             |\n"
printf "${WHITE}${BRIGHT}|-----------------------------------------------------------------------------|\n"
printf "\n"

GIT_USER=$(echo $KODI_SOURCE_URL | tr ':' '/' | awk -F ''.com/'|'.org/'' '{print $2}' | awk -F '/' '{print $1}');

printf "${WHITE}${BRIGHT}Build info:${NORMAL}\n"
printf "${WHITE} - Depot tools :\t${NORMAL}%s\n" $DEPOT_TOOLS_URL
printf "${WHITE} - Kodi URL :\t\t%s${NORMAL}\n" $KODI_SOURCE_URL
printf "${WHITE} - Kodi branch :\t%s${NORMAL}\n" $KODI_SOURCE_BRANCH
printf "${WHITE} - Kodi source dir. :\t%s${NORMAL}\n" "$BASE_PATH/build/kodi-$GIT_USER/kodi"
if [ $INCLUDE_CEF != 0 ];then
  GIT_CEF_USER=$(echo $CEF_SOURCE_URL | tr ':' '/' | awk -F ''.com/'|'.org/'' '{print $2}' | awk -F '/' '{print $1}');
  printf "${WHITE} - CEF URL :\t\t%s${NORMAL}\n" $CEF_SOURCE_URL
  printf "${WHITE} - CEF branch :\t\t%s${NORMAL}\n" $CEF_SOURCE_BRANCH
  printf "${WHITE} - CEF source dir. :\t%s${NORMAL}\n" "$BASE_PATH/build/cef-$GIT_CEF_USER/cef"
fi
printf "${WHITE} - Force clean :\t"
if [ $DO_CLEAN != 0 ]; then
  printf "Yes${NORMAL}\n"
else
  printf "No${NORMAL}\n"
fi

printf "\n${WHITE}${BRIGHT}System info:${NORMAL}\n"
printf "${WHITE} - Build start time :\t$START_TIME${NORMAL}\n"
printf "${WHITE} - Linux version :\t$(uname -r)${NORMAL}\n"
printf "${WHITE} - Used distribution :\t%s${NORMAL}\n" "$USE_LINUX_X86_DISTR"
printf "${WHITE} - Memory size :\t%s MByte${NORMAL}\n" $(expr `grep MemTotal /proc/meminfo | awk '{print $2}'` / 1024)
printf "${WHITE} - Free Disk size :\t%s GByte\n${NORMAL}\n" $(expr `df  . | tail -1 | tr -s ' ' | cut -d' ' -f4` / 1024 / 1024)

printf "${WHITE}${BRIGHT}|-----------------------------------------------------------------------------|${NORMAL}\n\n"

printf "\n${WHITE}${BRIGHT}Running now source code check and update${NORMAL} ...\n";

##
# If no temporary directory is passed create a own
if [ -z $TEMP_DIR ];then
{
  TEMP_DIR=$BASE_PATH/build/.tmp;
  mkdir -p $TEMP_DIR;
} fi

touch $TEMP_DIR/creation-general.failed

unset IFS;

trap 'touch $TEMP_DIR/basic-system-creation.failed; trapError ${LINENO};' ERR

##
# Check for presence of chromium depot tools
if [ ! -d "${BASE_PATH}/build/depot_tools" ];then
{
  printf "\n${WHITE}${BRIGHT}Download Chromium depot tools${NORMAL} ...\n";
  handleGITLoad "$BASE_PATH/build" depot_tools $DEPOT_TOOLS_URL master;
}
else
{
  printf "\n${WHITE}${BRIGHT}Update Chromium depot tools${NORMAL} ...\n";
  update_depot_tools
  printf $CURS_UP
  evaluateReturnValue $?;
} fi

##
# Handle kodi related parts from here
printf "\n${WHITE}${BRIGHT}Handle kodi related parts${NORMAL} ...\n";
[ ! -d "$BASE_PATH/build/kodi-$GIT_USER" ] && mkdir -p "$BASE_PATH/build/kodi-$GIT_USER"
handleGITLoad "$BASE_PATH/build/kodi-$GIT_USER" kodi $KODI_SOURCE_URL $KODI_SOURCE_BRANCH;
if [[ $GIT_USER != xbmc ]] && [ -z `git -C $BASE_PATH/build/kodi-$GIT_USER/kodi remote | grep upstream` ];then
{
  git -C $BASE_PATH/build/kodi-$GIT_USER/kodi remote add upstream https://github.com/xbmc/xbmc.git
  git -C $BASE_PATH/build/kodi-$GIT_USER/kodi fetch upstream
} fi

trap '' ERR

rm -f $TEMP_DIR/creation-general.failed

sleep 2
exit 0
