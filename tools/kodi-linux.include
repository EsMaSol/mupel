#!/bin/bash -e
###############################################################################
#                                                                             #
#     Copyright (C) 2015 Team KODI                                            #
#     http://kodi.tv                                                          #
#                                                                             #
#  This program is free software: you can redistribute it and/or modify       #
#  it under the terms of the GNU General Public License as published by       #
#  the Free Software Foundation, either version 3 of the License, or          #
#  (at your option) any later version.                                        #
#                                                                             #
#  This program is distributed in the hope that it will be useful,            #
#  but WITHOUT ANY WARRANTY; without even the implied warranty of             #
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              #
#  GNU General Public License for more details.                               #
#                                                                             #
#  You should have received a copy of the GNU General Public License          #
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.      #
#                                                                             #
###############################################################################

BASE_PATH=${BASE_PATH:-$(cd $(dirname $0)/.. ; pwd -P)}

. "$HOME/.mupel/mupel.conf";
. "$BASE_PATH/tools/tool_functions";
. "$BASE_PATH/tools/tool_kodi.include";

TEMP_DIR=$BASE_PATH/build/.tmp;
BUILD_SYSTEM="linux-x86_${BIT_SIZE}"

function exitBuild
{
  rm -f $TEMP_DIR/build_thread-kodi_active-$BUILD_SYSTEM;
  rm -f $TEMP_DIR/build_thread-kodi_active;
}

function updateDistribution
{
  printf "\nRunning ${BRIGHT}${WHITE}${UNDERLINE}updateDistribution${NORMAL} on '${BRIGHT}${GREEN}${BUILD_SYSTEM}${NORMAL}'\n"
  make install
  createKodiKeyboardHelper
  printf $CURS_UP
  log_success_msg
}

###############################################################################
# Start of main process

[ ! -d $TEMP_DIR ] && mkdir -p $TEMP_DIR;

INSTALL_DIR_TYPE="Release";
processOptsKodi "$@";

initBuildScript_Kodi;

# Set error return
trap 'trapError ${LINENO};' ERR;
trap exitBuild EXIT;

# Add failed file which becomes removed if everything is ok, this way is more
# secure
touch $TEMP_DIR/kodi-$BUILD_SYSTEM.failed;

. "$BASE_PATH/versions";

# Load or update kodi
if [ ! -d $BASE_PATH/build/kodi-$GIT_USER/kodi-$BUILD_SYSTEM ] ||
   [[ $DISABLE_GIT_UPDATE = FALSE ]];then
  loadKodiBuildDir $BUILD_SYSTEM "Linux x86-${BIT_SIZE}bit";fi

export Configuration=$INSTALL_DIR_TYPE;
export TARBALLS=$BASE_PATH/build/kodi-tarballs;
export BUILDTHREADS=$CPU_PROC_JOBS;
export XBMC_PLATFORM_DIR="linux${BIT_SIZE}";
export WORKSPACE=$BASE_PATH/build/kodi-$GIT_USER/kodi-$BUILD_SYSTEM;
export XBMC_DEPENDS_ROOT=$BASE_PATH/build/kodi-$GIT_USER/binary_distrib/$INSTALL_DIR_TYPE/kodi;

if [ ! -z $UPDATE_DISTRIB ];then
  KODI_BUILD="Update of binary distribution only"
elif [ ! -z $SELECTED_BUILD ];then
  KODI_BUILD="Single selection build of '$SELECTED_BUILD'"
elif [ ! -z $ADDON_BUILD ];then
  KODI_BUILD="$ADDON_BUILD add-on only";
elif [ -z $DIRECT_KODI_BUILD ];then
  KODI_BUILD="complete";
else
  KODI_BUILD="direct";fi

printf "
/------------------------------------------------------------------------------
|
|  Kodi build Linux x86 ${BIT_SIZE}bit
| ============================
|
|  Build type :        $KODI_BUILD
|  Build add-ons :     $([[ $INCLUDE_KODI_ADDONS = "TRUE" ]] && echo "yes" || echo "no")
|  Test run :          $([[ $KODI_RUN_TESTS = "TRUE" ]] && echo "yes" || echo "no")
|  Configuration :     $Configuration
|
|  TARBALLS :          $TARBALLS
|  BUILDTHREADS :      $BUILDTHREADS
|  XBMC_PLATFORM_DIR : $XBMC_PLATFORM_DIR
|  XBMC_DEPENDS_ROOT : $XBMC_DEPENDS_ROOT
|  WORKSPACE :         $WORKSPACE
|
\\-------------------------------------------------------------------------------
"

sleep 3

# Change to source code path
cd $BASE_PATH/build/kodi-$GIT_USER/kodi-$BUILD_SYSTEM

if [ ! -z $UPDATE_DISTRIB ];then
{
  updateDistribution
}
if [ ! -z $SELECTED_BUILD ];then
{
  printf "\nRunning ${BRIGHT}${WHITE}${UNDERLINE}$SELECTED_BUILD${NORMAL} on '${BRIGHT}${GREEN}${BUILD_SYSTEM}${NORMAL}'\n"
  sleep 2
  ./tools/buildsteps/linux${BIT_SIZE}/$SELECTED_BUILD
  if [ $SELECTED_BUILD = make-xbmc ];then
    make install;fi
  printf $CURS_UP
  log_success_msg
}
elif [ -z $ADDON_BUILD ];then
{
  if [ -z $DIRECT_KODI_BUILD ];then
  {
    printf "\nRunning ${BRIGHT}${WHITE}${UNDERLINE}prepare-depends${NORMAL} on '${BRIGHT}${GREEN}${BUILD_SYSTEM}${NORMAL}'\n"
    sleep 2
    ./tools/buildsteps/linux${BIT_SIZE}/prepare-depends
    printf $CURS_UP
    log_success_msg

    printf "\nRunning ${BRIGHT}${WHITE}${UNDERLINE}configure-depends${NORMAL} on '${BRIGHT}${GREEN}${BUILD_SYSTEM}${NORMAL}'\n"
    sleep 2
    ./tools/buildsteps/linux${BIT_SIZE}/configure-depends
    printf $CURS_UP
    log_success_msg

    printf "\nRunning ${BRIGHT}${WHITE}${UNDERLINE}make-depends${NORMAL} on '${BRIGHT}${GREEN}${BUILD_SYSTEM}${NORMAL}'\n"
    sleep 2
    ./tools/buildsteps/linux${BIT_SIZE}/make-depends
    printf $CURS_UP
    log_success_msg

    printf "\nRunning ${BRIGHT}${WHITE}${UNDERLINE}install additional Kodi depends${NORMAL} on '${BRIGHT}${GREEN}${BUILD_SYSTEM}${NORMAL}'\n"
    sleep 2
    installAdditionalKodiDepends ${XBMC_DEPENDS_ROOT}/`[ $BIT_SIZE = 64 ] && echo x86_${BIT_SIZE} || echo i686`-linux-gnu
    printf $CURS_UP
    log_success_msg
  }
  else
    printf "\nRunning ${BRIGHT}${WHITE}Direct Kodi build started${NORMAL}\n";fi

  if [ "$KODI_RUN_TESTS" = "true" ];then
    CONFIG_EXTRA="$CONFIG_EXTRA --enable-gtest";fi
  export CONFIG_EXTRA

  if [ -z $DIRECT_KODI_BUILD ] ||
     [[ $KODI_CONF_IN_DIRECT_BUILD = "TRUE" ]] ||
     [ ! -f $BASE_PATH/build/kodi-$GIT_USER/kodi-$BUILD_SYSTEM/Makefile ];then
  {
    printf "\nRunning ${BRIGHT}${WHITE}${UNDERLINE}configure-xbmc${NORMAL} on '${BRIGHT}${GREEN}${BUILD_SYSTEM}${NORMAL}'\n"
    sleep 2
    ./tools/buildsteps/linux${BIT_SIZE}/configure-xbmc
    printf $CURS_UP
    log_success_msg
  } fi

  printf "\nRunning ${BRIGHT}${WHITE}${UNDERLINE}make-xbmc${NORMAL} on '${BRIGHT}${GREEN}${BUILD_SYSTEM}${NORMAL}'\n"
  sleep 2
  ./tools/buildsteps/linux${BIT_SIZE}/make-xbmc
  log_success_msg
  updateDistribution

  if [ -z $DIRECT_KODI_BUILD ] && [[ $INCLUDE_KODI_ADDONS != FALSE ]];then
  {
    printf "\nRunning ${BRIGHT}${WHITE}${UNDERLINE}prepare-xbmc${NORMAL} on '${BRIGHT}${GREEN}${BUILD_SYSTEM}${NORMAL}'\n"
    sleep 2
    ./tools/buildsteps/linux${BIT_SIZE}/prepare-xbmc
    printf $CURS_UP
    log_success_msg

    printf "\nRunning ${BRIGHT}${WHITE}${UNDERLINE}make-binary-addons${NORMAL} on '${BRIGHT}${GREEN}${BUILD_SYSTEM}${NORMAL}'"
    sleep 2
    ./tools/buildsteps/linux${BIT_SIZE}/make-binary-addons
    printf $CURS_UP
    log_success_msg
  } fi

  printf "\nRunning ${BRIGHT}${WHITE}${UNDERLINE}tests${NORMAL} on '${BRIGHT}${GREEN}${BUILD_SYSTEM}${NORMAL}'"
  if [[ $KODI_RUN_TESTS != FALSE ]];then
  {
    printf "\n"
    sleep 2
    ./tools/buildsteps/linux${BIT_SIZE}/run-tests
    printf $CURS_UP
    log_success_msg
  }
  else
    log_skip_msg;fi
}
else
{
  CONFIGURE=1

  trap '' ERR
  if [ -f ./tools/depends/target/binary-addons/x86_${BIT_SIZE}-linux-gnu/Makefile ];then
  {
    grep -q $ADDON_BUILD ./tools/depends/target/binary-addons/x86_${BIT_SIZE}-linux-gnu/Makefile
    [[ $? = 0 ]] && CONFIGURE=0
  } fi
  trap 'trapError ${LINENO};' ERR;

  if [[ $CONFIGURE = 1 ]];then
  {
    rm -rf ./tools/depends/target/binary-addons/x86_${BIT_SIZE}-linux-gnu/build/depends/include/GL
    make -C ./tools/depends/target/binary-addons PREFIX=$XBMC_DEPENDS_ROOT/x86_${BIT_SIZE}-linux-gnu ADDONS=$ADDON_BUILD
  }
  else
  {
    make -C ./tools/depends/target/binary-addons/x86_${BIT_SIZE}-linux-gnu PREFIX=$XBMC_DEPENDS_ROOT/x86_${BIT_SIZE}-linux-gnu $ADDON_BUILD
  } fi
} fi

trap '' ERR

printf "\n \
${BRIGHT}${WHITE}All steps successfully performed and test build present and can started with:${NORMAL}
 - ${BRIGHT}${GREEN}${UNDERLINE}$BASE_PATH/build/kodi-${BUILD_SYSTEM}/kodi.bin${NORMAL}\n"

rm -f $TEMP_DIR/kodi-$BUILD_SYSTEM.failed;
exit 0
