#!/bin/bash -e
###############################################################################
#                                                                             #
#     Copyright (C) 2015 Team KODI                                            #
#     http://kodi.tv                                                          #
#                                                                             #
#  This program is free software: you can redistribute it and/or modify       #
#  it under the terms of the GNU General Public License as published by       #
#  the Free Software Foundation, either version 3 of the License, or          #
#  (at your option) any later version.                                        #
#                                                                             #
#  This program is distributed in the hope that it will be useful,            #
#  but WITHOUT ANY WARRANTY; without even the implied warranty of             #
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              #
#  GNU General Public License for more details.                               #
#                                                                             #
#  You should have received a copy of the GNU General Public License          #
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.      #
#                                                                             #
###############################################################################
#                                                                             #
# Note: This script becomes called on Mac OS X system!                        #
#       Access from muple to them is over a ssh connection.                   #
#                                                                             #
###############################################################################

trap 'echo Error on line ${LINENO} inside Mac OS X system call; exit 1' ERR SIGHUP SIGINT SIGTERM;

MUPEL_PATH=$HOME/Desktop/Mupel

BIT_SIZE="64";
BASE_PATH=$MUPEL_PATH/remote_access/build # remote_access mount becomes done separate before

. "$MUPEL_PATH/remote_access/home/.mupel/mupel.conf";
. "$MUPEL_PATH/remote_access/home/.mupel/mac-osx.conf";
. "$BASE_PATH/tools/tool_functions";
. "$BASE_PATH/tools/tool_cef.include";

TEMP_DIR=$BASE_PATH/build/.tmp;

function exitBuild
{
  rm -f $TEMP_DIR/build_thread-cef_active-osx-x86_$BIT_SIZE;
  rm -f $TEMP_DIR/build_thread-cef_active;
  killall -9 git
}

###############################################################################
# Start of main process

[ ! -d $TEMP_DIR ] && mkdir -p $TEMP_DIR;

INSTALL_DIR_TYPE="Release"
processOptsCEF "$@"

# Options that force the sources to change.
if [[ -n $FORCECLEAN ]] || [[ -n $FORCEUPDATE ]];then
  FORCE_CHANGE=1;fi

initBuildScript_CEF;

trap exitBuild EXIT

touch $TEMP_DIR/cef-osx-x86_$BIT_SIZE.failed;

. "$BASE_PATH/versions";

if [ -z $DIRECT_CEF_BUILD ];then
  CEF_BUILD="complete";
else
  CEF_BUILD="direct";
fi

# Manage the out directory.
out_dir=$MUPEL_PATH/cef-$GIT_CEF_USER/out_$CEF_SOURCE_BRANCH

# Delete the existing out directory if requested.
if [[ -n $FORCECLEAN ]] && [ -d "$out_dir" ];then
  rm -rf $out_dir;fi

# Create the final install path for them
INSTALL_PATH=$BASE_PATH/build/cef-$GIT_CEF_USER/binary_distrib
[ ! -d "${INSTALL_PATH}" ] && mkdir -p "${INSTALL_PATH}"

printf "
/------------------------------------------------------------------------------
|
|  CEF build Mac OS X x86 ${BIT_SIZE}bit
| ==============================
|
|  Build type :           $CEF_BUILD
|  Binary version :       $CEF_KODI_BINARY_VERSION
|  Configuration :        $INSTALL_DIR_TYPE
|  Force update :         $([[ -n $FORCEUPDATE ]] && echo yes || echo no)
|  No update :            $([[ -n $NOUPDATE ]] && echo yes || echo no)
|  Force config :         $([[ -n $FORCECONFIG ]] && echo yes || echo no)
|  Force clean :          $([[ -n $FORCECLEAN ]] && echo yes || echo no)
|  Force clean depends :  $([[ -n $FORCECLEANDEPS ]] && echo yes || echo no)
|  Build tests :          $([[ -n $BUILDTESTS ]] && echo yes || echo no)
|  Verbose build          $([[ -n $VERBOSEBUILD ]] && echo yes || echo no)
|
|  CEF Branch :           $CEF_SOURCE_BRANCH
|  CEF URL :              $CEF_SOURCE_URL
|  CEF Source Directory : $BASE_PATH/build/cef-$GIT_CEF_USER/cef
|  CEF Output Directory : $out_dir
|  Package directory :    $INSTALL_PATH
|
|  Free Disk size :       $(df -h . | tail -1 | tr -s ' ' | cut -d' ' -f4 | awk -F 'Gi' '{print $1}') GByte
|
\\-------------------------------------------------------------------------------

"

sleep 3

##
# Check for presence of chromium depot tools
printf "${BRIGHT}${WHITE}Download and install Chromium depot tools to $MUPEL_PATH/cef${NORMAL} ...\n";
if [ ! -d "$MUPEL_PATH/depot_tools" ];then
{
  handleGITLoad "$MUPEL_PATH" depot_tools $DEPOT_TOOLS_URL master;
  handleErrorsCodes $? "git" "$DEPOT_TOOLS_URL" console exit;

  PATH="$MUPEL_PATH/depot_tools:${PATH}"
  export PATH;

  if [[ -z $NOUPDATE ]];then
  {
    update_depot_tools
    handleErrorsCodes $? "update_depot_tools" "$MUPEL_PATH/depot_tools" console exit;
  } fi

  gclient
  evaluateReturnValue $?;
}
else
{
  export PATH="$MUPEL_PATH/depot_tools:${PATH}";
  log_skip_msg;
} fi

if [ ! -d "$MUPEL_PATH/cef-$GIT_CEF_USER" ];then
{
  mkdir -p "$MUPEL_PATH/cef-$GIT_CEF_USER"
  handleErrorsCodes $? "mkdir" "mkdir -p \"$MUPEL_PATH/cef-$GIT_CEF_USER\"" console exit;
} fi

printf "\
${BRIGHT}${WHITE}Create gclient configuration file${NORMAL} ...
 > '$MUPEL_PATH/cef-$GIT_CEF_USER/.gclient' ...";
if [ ! -f "$MUPEL_PATH/cef-$GIT_CEF_USER/.gclient" ] || [[ -n $FORCECONFIG ]];then
{
  createCEF_gclient "$MUPEL_PATH/cef-$GIT_CEF_USER/.gclient";
  evaluateReturnValue $?;
}
else
  log_skip_msg;fi

trap 'trapError ${LINENO};' ERR;

export GYP_GENERATORS=ninja

if [ $BIT_SIZE = 64 ];then
  export GYP_DEFINES="target_arch=x64";fi

# If direct build is requested in build before was on other system a complete
# build becomes forced
if [ ! -f "$BASE_PATH/build/cef-$GIT_CEF_USER/cef-$CEF_SOURCE_BRANCH-osx-x86_${BIT_SIZE}.active" ] && [[ ! -z $DIRECT_CEF_BUILD ]];then
{
  printf "${RED}${BRIGHT}WARNING: ${WHITE}Needed CEF code for direct build not present and complete build becomes done${NORMAL}\n";
  unset DIRECT_CEF_BUILD;
} fi

if [[ -z $DIRECT_CEF_BUILD ]];then
{
  rm -f $BASE_PATH/build/cef-$GIT_CEF_USER/cef-$CEF_SOURCE_BRANCH-osx-*.active

  ##
  # Initial Chromium checkout.
  #
  printf "\n${BRIGHT}${WHITE}Download chromium source code${NORMAL} ...";
  if [[ -z $NOUPDATE ]] && [ ! -d "$MUPEL_PATH/cef-$GIT_CEF_USER/src" ];then
  {
    CHROMIUM_CHECKOUT_NEW=1;

    printf "\n${BRIGHT}${RED}WARNING: ${WHITE}Download takes a very long time ${UNDERLINE}(more as 12 hours possible)${NORMAL}\n";

    cd "$BASE_PATH/build/cef-$GIT_CEF_USER";
    if [ -f "$BASE_PATH/build/chromium-osx-load.log" ];then
    {
      if [ ! -d "$BASE_PATH/build/log-old" ];then
        mkdir "$BASE_PATH/build/log-old";fi
      mv -f "$BASE_PATH/build/chromium-osx-load.log" \
            "$BASE_PATH/build/log-old/chromium-osx-load.old.log";
    } fi

    touch "$BASE_PATH/build/chromium-osx-load.log";
    touch "$TEMP_DIR/.tempLoggerActive";

    (
      position=0;
      empty_size=`du -s $MUPEL_PATH/cef-$GIT_CEF_USER | awk -F ' ' '{print $1}' 2> /dev/null`;
      printf "In progress, for details see $BASE_PATH/build/chromium-osx-load.log\n";
      sleep 1
      while [ -f "$TEMP_DIR/.tempLoggerActive" ]; do
      {
        progress="";
        counter=0;
        while [ $counter -lt 52 ];do
        {
          let counter=counter+1;
          if [[ $position == $counter ]];then
            progress=${progress}$BRIGHT$GREEN"|"$NORMAL;
          else
            progress=${progress}".";fi
        } done
        let position=position+1;
        if [ $position -ge 52 ];then
          position=0;fi

        used_size=$(($(du -s $MUPEL_PATH/cef-$GIT_CEF_USER 2> /dev/null | awk -F ' ' '{print $1}' 2> /dev/null) - $empty_size));
        used_size=$(($used_size / 1024 / 2));
        label=`tail -1 "$BASE_PATH/build/chromium-osx-load.log" | cut -d' ' -f1 | cut -c-17`;
        printf "\r$WHITE[$NORMAL $progress $WHITE] $label - $used_size MByte$NORMAL";

        sleep 1;
      } done
    ) &
    tailPID=$!
    echo "Initial Chromium checkout:" >> "$BASE_PATH/build/chromium-osx-load.log";
    echo "started" >> "$BASE_PATH/build/chromium-osx-load.log";
    gclient sync --nohooks --with_branch_heads --jobs 16 >> "$BASE_PATH/build/chromium-osx-load.log" 2>&1
    error_value="${?}";
    rm -f "$TEMP_DIR/.tempLoggerActive";
    if [[ ! -z `ps --no-headers -p $tailPID` ]]; then
    {
      kill $tailPID;
    } fi
    echo ""
    evaluateReturnValue $error_value;
  }
  else
    log_done_msg;fi
  echo "";

  ##
  # Determine if the Chromium checkout needs to change.
  #
  CHROMIUM_CHECKOUT=`cat "$BASE_PATH/build/cef-$GIT_CEF_USER/cef/CHROMIUM_BUILD_COMPATIBILITY.txt" | tail -2 | cut -d' ' -f4 | cut -d "'" -f2 | head -1`;
  if [[ -z $NOUPDATE ]] && [ -d "$MUPEL_PATH/cef-$GIT_CEF_USER/src" ];then
  {
    CHROMIUM_CURRENT_HASH=`git -C "$MUPEL_PATH/cef-$GIT_CEF_USER/src" rev-parse "HEAD"`;
    CHROMIUM_DESIRED_HASH=`git -C "$MUPEL_PATH/cef-$GIT_CEF_USER/src" rev-parse "$CHROMIUM_CHECKOUT"`;
    if [[ -n $CHROMIUM_CHECKOUT_NEW ]] ||
       [[ -n $FORCE_CHANGE ]] ||
       [[ "$CHROMIUM_CURRENT_HASH" != "$CHROMIUM_DESIRED_HASH" ]];then
      CHROMIUM_CHECKOUT_CHANGED=1;
    else
      CHROMIUM_CHECKOUT_CHANGED=0;fi
    printf "${BRIGHT}${WHITE}Checking version of 'Chromium'${NORMAL}\n";
    printf "${BRIGHT}${WHITE} - Chromium Current Checkout:${NORMAL} $CHROMIUM_CURRENT_HASH\n";
    printf "${BRIGHT}${WHITE} - Chromium Desired Checkout:${NORMAL} $CHROMIUM_DESIRED_HASH
                                ($CHROMIUM_CHECKOUT)\n";
  } fi

  ##
  # Determine if the CEF checkout needs to change.
  #
  if [[ ! -n $NOUPDATE ]] && [ -d "$MUPEL_PATH/cef-$GIT_CEF_USER/src/cef" ];then
  {
    CEF_CURRENT_HASH=`git -C "$MUPEL_PATH/cef-$GIT_CEF_USER/src/cef" rev-parse "HEAD"`;
    CEF_DESIRED_HASH=`git -C "$BASE_PATH/build/cef-$GIT_CEF_USER/cef" rev-parse "HEAD"`;
    if [[ -n $FORCE_CHANGE ]] ||
       [[ "$CEF_CURRENT_HASH" != "$CEF_DESIRED_HASH" ]];then
    {
      CEF_CHECKOUT_CHANGED=1;
      printf "${BRIGHT}${WHITE}Checking version of 'CEF'${NORMAL}\n";
      printf "${BRIGHT}${WHITE} - CEF Current Checkout:${NORMAL} $CEF_CURRENT_HASH\n";
      printf "${BRIGHT}${WHITE} - CEF Desired Checkout:${NORMAL} $CEF_DESIRED_HASH\n";
    }
    else
      CEF_CHECKOUT_CHANGED=0;fi
  } fi

  # Delete the existing src/cef directory. It will be re-copied from the download
  # directory later.
  if [[ $CEF_CHECKOUT_CHANGED != 0 ]] && [ -d "$MUPEL_PATH/cef-$GIT_CEF_USER/src/cef" ];then
    rm -fr "$MUPEL_PATH/cef-$GIT_CEF_USER/src/cef";fi

  # Delete the existing src/out directory if requested.
  if [[ -n $FORCECLEAN ]] && [ -d "$MUPEL_PATH/cef-$GIT_CEF_USER/src/out" ];then
    rm -fr "$MUPEL_PATH/cef-$GIT_CEF_USER/src/out";fi

  # Move the existing src/out directory to the correct location in the download
  # directory. It will be moved back from the download directory later.
  if [ -d "$MUPEL_PATH/cef-$GIT_CEF_USER/src/out" ];then
  {
    OLD_BRANCH=$(read_branch_config_file "$MUPEL_PATH/cef-$GIT_CEF_USER/src/out");
    if [ -n $OLD_BRANCH ] && [[ $CHROMIUM_CHECKOUT_CHANGED != 0 ]] ||
                             [[ $OLD_BRANCH != $CEF_SOURCE_BRANCH ]];then
    {
      rm -rf "$MUPEL_PATH/cef-$GIT_CEF_USER/out_$OLD_BRANCH";
      mv -f "$MUPEL_PATH/cef-$GIT_CEF_USER/src/out" "$MUPEL_PATH/cef-$GIT_CEF_USER/out_$OLD_BRANCH"
    } fi
  } fi

  ##
  # Update the Chromium checkout.
  #
  old_dir=`pwd`
  cd "$MUPEL_PATH/cef-$GIT_CEF_USER/src";
  printf "${BRIGHT}${WHITE}Update the Chromium checkout to needed source${NORMAL} ...";
  if [ $CHROMIUM_CHECKOUT_CHANGED != 0 ];then
  {
    printf "\n"
    if [ -z $CHROMIUM_CHECKOUT_NEW ];then
    {
      if [[ -n $FORCECLEAN ]] && [[ -n $FORCECLEANDEPS ]];then
      {
        # Remove all local changes including third-party git checkouts managed by
        # gclient.
        git -C $MUPEL_PATH/cef-$GIT_CEF_USER/src clean -dffx;
        handleErrorsCodes $? "git" "git -C $MUPEL_PATH/cef-$GIT_CEF_USER/src clean -dffx;" console exit;
      }
      else
      {
        # Revert all changes in the Chromium checkout.
        gclient revert --nohooks;
        handleErrorsCodes $? "gclient" "gclient revert --nohooks;" console exit;
      } fi
    } fi

    # Fetch new sources.
    git -C $MUPEL_PATH/cef-$GIT_CEF_USER/src fetch;
    handleErrorsCodes $? "git" "git -C $MUPEL_PATH/cef-$GIT_CEF_USER/src fetch;" console exit;

    # Also fetch tags, which are required for release branch builds.
    git -C $MUPEL_PATH/cef-$GIT_CEF_USER/src fetch --tags;
    handleErrorsCodes $? "git" "git -C $MUPEL_PATH/cef-$GIT_CEF_USER/src fetch --tags;" console exit;

    # Checkout the requested branch.
    git -C $MUPEL_PATH/cef-$GIT_CEF_USER/src checkout $([ -n $FORCECLEAN ] && echo "--force") $CHROMIUM_CHECKOUT;
    handleErrorsCodes $? "git" "git -C $MUPEL_PATH/cef-$GIT_CEF_USER/src checkout --force $CHROMIUM_CHECKOUT;" console exit;

    # Patch the Chromium DEPS file if necessary.
    if [ -f "$MUPEL_PATH/cef-$GIT_CEF_USER/cef/patch/patches/.DEPS.git.patch" ] &&
       [[ -z `patch --dry-run -Np0 -i "$MUPEL_PATH/cef-$GIT_CEF_USER/cef/patch/patches/.DEPS.git.patch"` ]];then
      patch -Np0 -i "$MUPEL_PATH/cef-$GIT_CEF_USER/cef/patch/patches/.DEPS.git.patch";fi;

    # Set the GYP_CHROMIUM_NO_ACTION value temporarily so that `gclient sync` does
    # not run gyp.
    set GYP_CHROMIUM_NO_ACTION 1;

    # Update third-party dependencies including branch/tag information.
    gclient sync $([ -n $FORCECLEAN ] && echo "--reset") --nohooks --with_branch_heads --jobs 16;
    handleErrorsCodes $? "gclient" "gclient sync" console exit;

    # Clear the GYP_CHROMIUM_NO_ACTION value.
    unset GYP_CHROMIUM_NO_ACTION;

    # Delete the src/out directory created by `gclient sync`.
    rm -fr "$MUPEL_PATH/cef-$GIT_CEF_USER/src/out";
    printf $CURS_UP;
    log_success_msg;
  }
  else
    log_skip_msg;fi

  # Copy CEF to chromium source folder
  printf "${BRIGHT}${WHITE}Transfering CEF source code to chromium${NORMAL}";
  if [ ! -d "$MUPEL_PATH/cef-$GIT_CEF_USER/src/cef" ];then
  {
    cp -fR "$BASE_PATH/build/cef-$GIT_CEF_USER/cef" "$MUPEL_PATH/cef-$GIT_CEF_USER/src";
    handleErrorsCodes $? "cp" "copy CEF to chromium source folder" console exit;
    log_success_msg;
  }
  else
    log_skip_msg;fi

  # Restore the src/out directory.
  [ -d "$MUPEL_PATH/cef-$GIT_CEF_USER/src/out" ] &&
    out_src_dir_exists=1;
  if [ -d $out_dir ] && [ -z $out_src_dir_exists ];then
    mv $out_dir "$MUPEL_PATH/cef-$GIT_CEF_USER/src/out";
    out_src_dir_exists=1;
  elif [ -z $out_src_dir_exists ];then
    mkdir "$MUPEL_PATH/cef-$GIT_CEF_USER/src/out";fi

  # Write the config file for identifying the branch.
  write_branch_config_file "$MUPEL_PATH/cef-$GIT_CEF_USER/src/out" $CEF_SOURCE_BRANCH;

  printf "${BRIGHT}${WHITE}Create CEF projects${NORMAL}";
  cd $MUPEL_PATH/cef-$GIT_CEF_USER/src/cef
  ./cef_create_projects.sh
  log_success_msg
  cd $MUPEL_PATH/cef-$GIT_CEF_USER

  printf "${BRIGHT}${WHITE}Update chromium clang scripts ...${NORMAL}\n"
  python $MUPEL_PATH/cef-$GIT_CEF_USER/src/tools/clang/scripts/update.py --if-needed
  printf $CURS_UP
  log_success_msg

  printf "${BRIGHT}${WHITE}Set last change flags ...${NORMAL}\n"
  python $MUPEL_PATH/cef-$GIT_CEF_USER/src/build/util/lastchange.py -o src/build/util/LASTCHANGE
  python $MUPEL_PATH/cef-$GIT_CEF_USER/src/build/util/lastchange.py -s src/third_party/WebKit -o src/build/util/LASTCHANGE.blink
  printf $CURS_UP
  log_success_msg

  touch "$BASE_PATH/build/cef-$GIT_CEF_USER/cef-$CEF_SOURCE_BRANCH-osx-x86_${BIT_SIZE}.active"
} fi

# Build using Ninja.
printf "${BRIGHT}${WHITE}Start $INSTALL_DIR_TYPE build of build CEF (Mac OS X x86 ${BIT_SIZE}bit) ...\n${NORMAL}"
ninja $([ -n $VERBOSEBUILD ] && echo "-v") -C \
      $MUPEL_PATH/cef-$GIT_CEF_USER/src/out/${INSTALL_DIR_TYPE} \
      cefclient \
      $([ -n $BUILDTESTS ] && echo "cef_unittests") \
      -j $CPU_PROC_JOBS
log_success_msg

if [[ -z $DIRECT_CEF_BUILD ]];then
{
####

  printf "${BRIGHT}${WHITE}Start creation of kodi's build distribution for Mac OS X x86 ${BIT_SIZE}bit ...${NORMAL}\n"

  #export CEF_COMMAND_7ZIP="7z"
  unset CEF_COMMAND_7ZIP;
  [ -n $CEF_COMMAND_7ZIP ] && pack_end=7z || pack_end=zip

  # Remove old to prevent package from errors which comes if build becomes cancelled on 'make_distrib.py'
  [ -f $MUPEL_PATH/cef-$GIT_CEF_USER/src/cef/binary_distrib/cef_binary_*_osx${BIT_SIZE}.$pack_end ] &&
    rm -f $MUPEL_PATH/cef-$GIT_CEF_USER/src/cef/binary_distrib/cef_binary_*_osx${BIT_SIZE}.$pack_end;
  [ -f $MUPEL_PATH/cef-$GIT_CEF_USER/src/cef/binary_distrib/cef_binary_*_osx${BIT_SIZE}_release_symbols.$pack_end ] &&
    rm -f $MUPEL_PATH/cef-$GIT_CEF_USER/src/cef/binary_distrib/cef_binary_*_osx${BIT_SIZE}_release_symbols.$pack_end;

  # --output-dir    - output directory [required]
  # --allow-partial - allow creation of partial distributions
  # --no-symbols    - don't create symbol files
  # --no-docs       - don't create documentation
  # --no-archive    - don't create archives for output directories
  # --ninja-build   - build was created using ninja
  # --x64-build     - build was created for 64-bit systems
  # --minimal       - include only release build binary files
  # --client        - include only the cefclient application
  # -q, --quiet     - do not output detailed status information

  # Create the distribution.
  cd $MUPEL_PATH/cef-$GIT_CEF_USER/src/cef/tools
  ./make_distrib.sh --ninja-build \
                    --allow-partial \
                    --package \
                    $([[ $BIT_SIZE = 64 ]] && echo --x64-build) \
                    $([[ -z $VERBOSEBUILD ]] && echo --quiet)

  [ $INSTALL_DIR_TYPE = "Debug" ] && EXTRA_NAME=debug- || EXTRA_NAME=release-

  # Remove old packages if present on base
  [ -f ${INSTALL_PATH}/kodi-web-${EXTRA_NAME}*_macosx${BIT_SIZE}.$pack_end ] &&
    rm -f ${INSTALL_PATH}/kodi-web-${EXTRA_NAME}*_macosx${BIT_SIZE}.$pack_end;
  [ -f ${INSTALL_PATH}/kodi-web-${EXTRA_NAME}*_macosx${BIT_SIZE}_release_symbols.$pack_end ] &&
    rm -f ${INSTALL_PATH}/kodi-web-${EXTRA_NAME}*_macosx${BIT_SIZE}_release_symbols.$pack_end;

  ####

  trap '' ERR

  printf "${BRIGHT}${WHITE}Move created packages to base system ...${NORMAL}\n"

  name=$(cd "$MUPEL_PATH/cef-$GIT_CEF_USER/src/cef/binary_distrib"; ls -1 cef_binary_*_macosx${BIT_SIZE}.* 2> /dev/null)
  if [ -n $name ];then
    mv -f $MUPEL_PATH/cef-$GIT_CEF_USER/src/cef/binary_distrib/${name} ${INSTALL_PATH}/kodi-web-${EXTRA_NAME}${CEF_KODI_BINARY_VERSION}_${name}
  else
  {
    printf "${BRIGHT}${RED}ERROR: ${WHITE}Needed Package '$MUPEL_PATH/cef-$GIT_CEF_USER/src/cef/binary_distrib/cef_binary_*_macosx${BIT_SIZE}.*' not present${NORMAL}\n"
    exit 1
  } fi

  name=$(cd "$MUPEL_PATH/cef-$GIT_CEF_USER/src/cef/binary_distrib"; ls -1 cef_binary_*_macosx${BIT_SIZE}_release_symbols.* 2> /dev/null)
  if [ -n $name ];then
    mv -f $MUPEL_PATH/cef-$GIT_CEF_USER/src/cef/binary_distrib/${name} ${INSTALL_PATH}/kodi-web-${EXTRA_NAME}${CEF_KODI_BINARY_VERSION}_${name}
  else
  {
    printf "${BRIGHT}${RED}ERROR: ${WHITE}Needed Package '$MUPEL_PATH/cef-$GIT_CEF_USER/src/cef/binary_distrib/cef_binary_*_macosx${BIT_SIZE}_release_symbols.*' not present${NORMAL}\n"
    exit 1
  } fi

  log_success_msg
  ####
} fi

trap '' ERR

printf "\n \
${BRIGHT}${WHITE}All CEF steps ${GREEN}successfully${WHITE} performed and build present${NORMAL}
 - Created packages present on: ${BRIGHT}${BLUE}${UNDERLINE}${INSTALL_PATH}${NORMAL}

-------------------------------------------------------------------------------

"

rm -f $TEMP_DIR/cef-osx-x86_${BIT_SIZE}.failed;
exit 0
