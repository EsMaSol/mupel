#!/bin/bash
###############################################################################
#                                                                             #
#     Copyright (C) 2015 Team KODI                                            #
#     http://kodi.tv                                                          #
#                                                                             #
#  This program is free software: you can redistribute it and/or modify       #
#  it under the terms of the GNU General Public License as published by       #
#  the Free Software Foundation, either version 3 of the License, or          #
#  (at your option) any later version.                                        #
#                                                                             #
#  This program is distributed in the hope that it will be useful,            #
#  but WITHOUT ANY WARRANTY; without even the implied warranty of             #
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              #
#  GNU General Public License for more details.                               #
#                                                                             #
#  You should have received a copy of the GNU General Public License          #
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.      #
#                                                                             #
###############################################################################

BASE_PATH=$(cd $(dirname $0) ; pwd -P)
PATH="$BASE_PATH/tools:$PATH"
INSTALL_PREFIX="$HOME/.mupel"

export BASE_PATH

. $BASE_PATH/tools/tool_functions
. $BASE_PATH/tools/tool_install.include

if [ -f "$HOME/.config/user-dirs.dirs" ];then
{
  . "$HOME/.config/user-dirs.dirs"
  DESKTOP_DIR="$XDG_DESKTOP_DIR"
  DOWNLOAD_DIR="$XDG_DOWNLOAD_DIR"
  TEMPLATES_DIR="$XDG_TEMPLATES_DIR"
  PUBLICSHARE_DIR="$XDG_PUBLICSHARE_DIR"
  DOCUMENTS_DIR="$XDG_DOCUMENTS_DIR"
  MUSIC_DIR="$XDG_MUSIC_DIR"
  PICTURES_DIR="$XDG_PICTURES_DIR"
  VIDEOS_DIR="$XDG_VIDEOS_DIR"
}
else
{
  DESKTOP_DIR=$HOME
} fi

DEFAULT_MIN_HD_SIZE=200
DEFAULT_MIN_MEM_SIZE=4096

main_msg=

function exit_build
{
  local ret=$1
  if [[ $ret != 0 ]];then
    touch $BASE_PATH/build/global_mupel_install_failed;fi
  rm -f $BASE_PATH/build/global_mupel_install
  rm -rf $TEMP_DIR
  exit $ret
}

function usage
{
  echo "Usage: $0 [--options]"
  echo "Options:"
  echo "--main-msg    Filepointer to send creation information"
  echo "--info        Shows the information dialog"
  echo "--help        this help message"
  echo "Script will prompt interactively for other values."
  exit 1
}

function process_opts
{
  while test "$1" != "" ; do
    case "$1" in
      --main-msg)
        case "$2" in
            "")
              echo "Option main-msg, no argument" > /dev/stderr
              shift
              ;;
            *)
              main_msg="$2"
              shift
              ;;
        esac ;;
      --info)                   showSystemInfoDialog "Multi platform build environment for Kodi on Linux"
                                exit 0;;
      --help)                   usage;;
      *)
        echo "invalid command-line option: $OPTARG"
        usage
        ;;
    esac
    shift
  done
}

##
# Create chroot build environment
# $1 Used bit system (32 or 64)
# $2 System names x86-32bit, x64-64bit or arm7
#
function create_chroot_build_environment
{
  local env_install_ubuntu
  local force_sel=0
  local ret
  local inhibit_install=0

  if [[ $inhibit_install == 0 ]];then
  {
    while :; do
    {
      if [ ! -f $BASE_PATH/tools/linux/install-systembuild-linux ] || [ $force_sel = 1 ];then
      {
        ret=0;
        if [ $force_sel = 0 ];then
        {
          showQuestionDialog "\
Needed creation script for Linux x86 system \"install-systembuild-linux\" not found.

Do you want to select script?";
          ret=$?;
        } fi
        if [[ $ret != 0 ]];then
        {
          evaluate_ret_error $ret "Installation canceled!";
        }
        else
        {
          while :; do
          {
            env_install_ubuntu=$(showdialog --title="Select creation script for access to make distribution" \
                                            --file --file-filter="install-systembuild-linux *.install *.sh" \
                                            --width=700 --height=480 2> /dev/null);
            if [ $? != 0 ];then
            {
              showWarningDialog_YesNo "Selection of Linux creation script failed! \n\nTry again?" 2> /dev/null;
              [ $? != 0 ] && exit_build 1;
            }
            else
            {
              break;
            } fi
          } done
        } fi
      }
      else
        env_install_ubuntu="$BASE_PATH/tools/linux/install-systembuild-linux";fi

      bash "$env_install_ubuntu" -u -s;
      if [ $? != 0 ];then
      {
        showWarningDialog_YesNo "Installation of Linux build environment failed! \n\nTry again (you becomes asked about used script)?";
        [ $? != 0 ] && exit_build 1;
        force_sel=1;
      }
      else
        break;fi
    } done
  } fi
}

##
# Create chroot build environment for raspberry PI
# $1 Used bit system (32 or 64)
# $2 System names x86-32bit, x64-64bit or arm7
#
function create_chroot_build_environment_arm
{
  local target=$1
  local system=$2
  local env_install_raspberry
  local force_sel=0
  local ret
  local inhibit_install=0

  if [ -f /usr/local/bin/raspberry ];then
  {
    showQuestionDialog "\
\"/usr/local/bin/raspberry\" command present and system
seems to be already installed.

Do you want to to change or install again?"
    inhibit_install=$?
  } fi

  if [[ $inhibit_install == 0 ]];then
  {
    while :; do
    {
      if [ ! -f $BASE_PATH/tools/raspberry/install-systembuild-raspberry ] || [ $force_sel = 1 ];then
      {
        ret=0
        if [ $force_sel = 0 ];then
        {
          showQuestionDialog "\
Needed creation script for Linux ARM system \"install-systembuild-raspberry\" not found.

Do you want to select script?"
          ret=$?;
        } fi
        if [[ $ret != 0 ]];then
        {
          evaluate_ret_error $ret "Installation canceled!"
        }
        else
        {
          while :; do
          {
            env_install_raspberry=$(showdialog --title="Select creation script for access to Raspberry PI system over chroot" \
                                               --file --file-filter="install-systembuild-raspberry *.install *.sh" \
                                               --width=700 --height=480 2> /dev/null)
            if [ $? != 0 ];then
            {
              showWarningDialog_YesNo "Selection of Linux creation script failed! \n\nTry again?";
              [ $? != 0 ] && exit_build 1;
            }
            else
              break;fi
          } done
        } fi
      }
      else
        env_install_raspberry="$BASE_PATH/tools/raspberry/install-systembuild-raspberry";fi

      showInfoDialog "Start creation of chroot system for Raspberry on\n(follow related requests of them)" 3;
      bash "$env_install_raspberry" -f -l $main_msg;
      if [ $? != 0 ];then
      {
        showWarningDialog_YesNo "\
Installation of Linux build environment failed!

Try again (you becomes asked about used script)?";
        [ $? != 0 ] && exit_build 1;
        force_sel=1;
      }
      else
        break;fi
    } done
  } fi

#TODO: Build depends to add
}

function handleSkipPresent
{
  local present=$1;
  local name=$2;

  if [[ $present = TRUE ]] && [[ $SKIP_PRESENT = TRUE ]];then
  {
    showQuestionDialog "<b>System '$name' already present, due you want to install again?</b>";
    ret=$?
    echo $ret
    return $ret;
  } fi
  echo 0;
  return 0;
}

###-------------------------------------------------------------------------###
#                                                                             #
#                            Start of process points                          #
#                                                                             #
DIST=`grep DISTRIB_ID /etc/*-release | awk -F '=' '{print $2}'`
[ $DIST != "Ubuntu" ] && [ $DIST != "Debian" ] && [ $DIST != "LinuxMint" ] && {
  echo "${RED}${BRIGHT}Build not possible, need performed on ubuntu, debian or LinuxMint based system (needed for install of dependencies parts)${NORMAL}" >&2;
  exit 1;
}

# Check that xserver is running and user is root.
[[ $DISPLAY ]] || {
  printf "${RED}${BRIGHT}There is no xserver running. Exiting...${NORMAL}\n";
  exit 1;
}

if [[ `uname -m` = "x86_64" ]];then
{
  SYSTEM_BITS=64;
}
elif [[ `uname -m` = "i686" ]];then
{
  printf "${YELLOW}${BRIGHT}Old system, on a 32 bit linux OS is only be build on itself possible! ${NORMAL}\n";
  SYSTEM_BITS=32;
}
else
{
  printf "${RED}${BRIGHT}Wrong system, a 64 bit linux OS is needed! ${NORMAL}\n";
  exit 1;
} fi

# Check that we are running as a regular user
[ "$(id -nu)" = root ] && {
  printf "${RED}${BRIGHT}Run this script as a regular user and provide your \"sudo\" password if requested! ${NORMAL}\n" > /dev/stderr
  exit 1;
}

process_opts "$@";

TEMP_DIR=`mktemp -d`;
main_msg_tmp=${TEMP_DIR}/install_tmp.log;
[ ! -d "$BASE_PATH/build" ] && mkdir $BASE_PATH/build;
[ -z $main_msg ] && main_msg=${TEMP_DIR}/install.log;
build_log=$BASE_PATH/build/install.log;
touch $build_log

if [ -f "$INSTALL_PREFIX/mupel.conf" ];then
  . "$INSTALL_PREFIX/mupel.conf";fi

if [ ! -f "$BASE_PATH/versions" ];then
{
  showErrorDialog "\
The needed CEF binary version file for Kodi is not present and normally included in Mupel package!
Please fix, for the moment becomes 'undefined' used as version.

It must be on file in '$BASE_PATH/versions'!
"
  exit 1
}
else
  . "$BASE_PATH/versions";fi

MUPEL_VERSION="0.0.1"
INSTALL_PREFIX=${INSTALL_PREFIX:-$HOME/.mupel}

USE_LINUX_X86_32=${USE_LINUX_X86_32:-TRUE}
USE_LINUX_X86_64=${USE_LINUX_X86_64:-TRUE}
USE_LINUX_X86_DISTR=${USE_LINUX_X86_DISTR:-vivid}
USE_LINUX_RPBI=${USE_LINUX_RPBI:-TRUE}
USE_MS_WINDOWS_32=${USE_MS_WINDOWS_32:-TRUE}
USE_MS_WINDOWS_64=${USE_MS_WINDOWS_64:-TRUE}
USE_MAC_OS_X_64=${USE_MAC_OS_X_64:-TRUE}
USE_ANDROID_ARM=${USE_ANDROID_ARM:-TRUE}
USE_ANDROID_X86=${USE_ANDROID_X86:-TRUE}
USE_IOS=${USE_IOS:-TRUE}

LINUX_X86_32_INSTALLED=${LINUX_X86_32_INSTALLED:-FALSE}
LINUX_X86_64_INSTALLED=${LINUX_X86_64_INSTALLED:-FALSE}
LINUX_RPBI_INSTALLED=${LINUX_RPBI_INSTALLED:-FALSE}
MS_WINDOWS_32_INSTALLED=${MS_WINDOWS_32_INSTALLED:-FALSE}
MS_WINDOWS_64_INSTALLED=${MS_WINDOWS_64_INSTALLED:-FALSE}
MAC_OS_X_64_INSTALLED=${MAC_OS_X_64_INSTALLED:-FALSE}
ANDROID_ARM_INSTALLED=${ANDROID_ARM_INSTALLED:-FALSE}
ANDROID_X86_INSTALLED=${ANDROID_X86_INSTALLED:-FALSE}
IOS_INSTALLED=${IOS_INSTALLED:-FALSE}

EMU_INSTALL_PREFIX=${EMU_INSTALL_PREFIX:-$INSTALL_PREFIX/systems}

RELEASE_BUILD=${RELEASE_BUILD:-TRUE}
DEBUG_BUILD=${DEBUG_BUILD:-FALSE}
SYSTEM_BITS=${SYSTEM_BITS:-64}

KODI_SOURCE_URL=${KODI_SOURCE_URL:-$KODI_SOURCE_DEFAULT_URL_BASE}
KODI_SOURCE_URL_INACTIVE=$KODI_SOURCE_URL_INACTIVE
KODI_SOURCE_USE_BASE=${KODI_SOURCE_USE_BASE:-FALSE}
KODI_SOURCE_BRANCH=${KODI_SOURCE_BRANCH:-master}
KODI_SEL_ADDON=$KODI_SEL_ADDON
KODI_RUN_TESTS=${KODI_RUN_TESTS:-FALSE}
KODI_CONF_IN_DIRECT_BUILD=${KODI_CONF_IN_DIRECT_BUILD:-FALSE}
KODI_DEP_CLEAN=${KODI_DEP_CLEAN:-FALSE}
KODI_FORCE_ADDON_CONFIGURE=${KODI_FORCE_ADDON_CONFIGURE:-FALSE}

CEF_SOURCE_URL=${CEF_SOURCE_URL:-$CEF_SOURCE_DEFAULT_URL}
CEF_SOURCE_URL_INACTIVE=$CEF_SOURCE_URL_INACTIVE
CEF_SOURCE_USE_BASE=${CEF_SOURCE_USE_BASE:-FALSE}
CEF_SOURCE_BRANCH=${CEF_SOURCE_BRANCH:-$CEF_SOURCE_DEFAULT_SOURCE_BRANCH}
CEF_DEBUG=${CEF_DEBUG:-FALSE}
CEF_FORCE_UPDATE=${CEF_FORCE_UPDATE:-FALSE}
CEF_NO_UPDATE=${CEF_NO_UPDATE:-FALSE}
CEF_FORCE_CONFIG=${CEF_FORCE_CONFIG:-FALSE}
CEF_FORCE_CLEAN=${CEF_FORCE_CLEAN:-FALSE}
CEF_FORCE_CLEAN_DEPS=${CEF_FORCE_CLEAN_DEPS:-FALSE}
CEF_BUILD_TESTS=${CEF_BUILD_TESTS:-FALSE}
CEF_VERBOSE_BUILD=${CEF_VERBOSE_BUILD:-FALSE}
DEPOT_TOOLS_URL=${DEPOT_TOOLS_URL:-$DEPOT_TOOLS_DEFAULT_URL}

INCLUDE_KODI=${INCLUDE_KODI:-TRUE}
INCLUDE_KODI_ADDONS=${INCLUDE_KODI_ADDONS:-FALSE}
INCLUDE_CEF=${INCLUDE_CEF:-FALSE}
INCLUDE_USER_SCRIPT=${INCLUDE_USER_SCRIPT:-FALSE}
SUPPORT_CEF=${SUPPORT_CEF:-TRUE}
DISABLE_GIT_UPDATE=${DISABLE_GIT_UPDATE:-FALSE}

ADD_PATHS=${ADD_PATHS:-$BASE_PATH/build/depot_tools}

LINUX_BUILD_TYPE=${LINUX_BUILD_TYPE:-x86_64}

TEXT_VIEVER=${TEXT_VIEVER:-gedit}

FREE_INITIAL_DISK_SPACE=`df  . | tail -1 | tr -s ' ' | cut -d' ' -f4`

CPU_PROC_JOBS=${CPU_PROC_JOBS:-8}

###
# Check for missing packages
#
which gksudo >/dev/null
[ "$?" = "0" ] && graphsudo=gksudo;
which kdesudo >/dev/null
[ "$?" = "0" ] && graphsudo=kdesudo;

if [ -z $graphsudo ];then
{
  [ ! -f /etc/kde4rc ] && graphsudo=gksudo && xterm -T "Graphics sudo install '$graphsudo'" -bg black -fg white -e sudo apt-get install gksu ||
                                              xterm -T "Graphics sudo install '$graphsudo'" -bg black -fg white -e sudo apt-get install kdesudo
} fi

which $graphsudo >/dev/null
if [ "$?" != "0" ];then
{
  echo "FATAL: No usable sudo GUI interface present!";
  exit 1;
} fi

which xterm >/dev/null;
[ "$?" != "0" ] && $graphsudo -- apt-get -y install xterm;

packages=""
ldconfig -p | grep -q libwebkitgtk-1.0;
[ "$?" != "0" ] && packages="$packages libwebkitgtk-1.0";
ldconfig -p | grep -q libvte.so.;
[ "$?" != "0" ] && packages="$packages libvte9";
which debootstrap >/dev/null;
[ "$?" != "0" ] && packages="$packages debootstrap";
which sshpass >/dev/null;
[ "$?" != "0" ] && packages="$packages sshpass";
which git >/dev/null;
[ "$?" != "0" ] && packages="$packages git";
which lighttpd > /dev/null
[ "$?" != "0" ] && packages="$packages lighttpd";
which svn >/dev/null;
[ "$?" != "0" ] && packages="$packages subversion";
which wget >/dev/null;
[ "$?" != "0" ] && packages="$packages wget";
which ruby >/dev/null;
[ "$?" != "0" ] && packages="$packages ruby";
which kdbg >/dev/null;
[ "$?" != "0" ] && packages="$packages kdbg";
which krusader >/dev/null;
[ "$?" != "0" ] && packages="$packages krusader";
which nmap >/dev/null;
[ "$?" != "0" ] && packages="$packages nmap";
which kate >/dev/null;
if [ "$?" != "0" ];then
{
  which gem >/dev/null;
  [ "$?" != "0" ] && packages="$packages kate" || TEXT_VIEVER="gedit";
} fi

if [ "${packages}" != "" ];then
{
  cat > $TEMP_DIR/build-dep-install.sh << EOF
#!/bin/bash

printf "Installing of build dependencies \"$packages\" is needed!\n\n"

sudo apt-get -y install ${packages}
EOF

  chmod +x $TEMP_DIR/build-dep-install.sh;
  run_in_terminal $TEMP_DIR/build-dep-install.sh;
  rm -f $TEMP_DIR/build-dep-install.sh;
} fi

# Warn if hd size is small
if [ `expr $FREE_INITIAL_DISK_SPACE / 1024 / 1024` -lt $DEFAULT_MIN_HD_SIZE ];then
{
  showWarningDialog_YesNo "\
Maybe not enough free space `expr $FREE_INITIAL_DISK_SPACE / 1024 / 1024` GByte available to use for all systems!

Continue install?";
  [ $? != 0 ] && exit_build 1;
} fi

memory=`grep MemTotal /proc/meminfo | awk '{print $2}'`;
memory=`expr $memory / 1024`;
if [ $memory -lt $DEFAULT_MIN_MEM_SIZE ];then
{
  showWarningDialog_YesNo "\
Maybe not enough memory with $memory MByte available to use for all systems!

Continue install?";
  [ $? != 0 ] && exit_build 1;
} fi

if [ -z $MUPEL_DESKTOP_ICON_PATH ];then
  MUPEL_DESKTOP_ICON_PATH=$DESKTOP_DIR;fi

IFS=$'';
GIT_CONFIG=$(git config -l);
GIT_USERNAME_OLD=$(echo $GIT_CONFIG | grep user.name | awk -F 'user.name=' '{print $2}');
GIT_EMAIL_OLD=$(echo $GIT_CONFIG | grep user.email | awk -F 'user.email=' '{print $2}');
if [[ -z $GIT_USERNAME_OLD ]] || [[ -z $GIT_EMAIL_OLD ]];then
  GIT_NOT_SET=1;fi
unset IFS;

while :; do
{
  install_values=$(showdialog --form --title="Mupel - Installer" \
                             --window-icon="$BASE_PATH/icons/icon-mupel-128x128.png" \
                             --image="$BASE_PATH/icons/icon-kodi-mbe.png" \
                             --width=800 \
                             --height=500 \
                             --field="<i><span size=\"large\">Mupel cross build system installer</span></i>:LBL" "" \
                             --field="Kodi git repository:"           "$KODI_SOURCE_URL" \
                             --field="Include CEF auto build:CHK"     "$SUPPORT_CEF" \
                             --field="CEF git repository:"            "$CEF_SOURCE_URL" \
                             --field=":LBL"                           "" \
                             --field="Ask for already installed systems:CHK" "TRUE" \
                             --field="<b>Linux x86-64bit installed always as default!</b>:LBL" "" \
                             --field="Include Linux x86-32bit:CHK"    "$USE_LINUX_X86_32" \
                             --field="Include Windows 32bit:CHK"      "$USE_MS_WINDOWS_32" \
                             --field="Include Windows 64bit:CHK"      "$USE_MS_WINDOWS_64" \
                             --field="Include Mac OS-X 64bit:CHK"     "$USE_MAC_OS_X_64" \
                             --field="Include Linux Raspberry PI:CHK" "$USE_LINUX_RPBI" \
                             --field="Include Android ARM:CHK"        "$USE_ANDROID_ARM" \
                             --field="Include Android x86:CHK"        "$USE_ANDROID_X86" \
                             --field="Include iOS:CHK"                "$USE_IOS" \
                             --field="Emulation install prefix:DIR"   "$EMU_INSTALL_PREFIX" \
                             --field=":LBL" "" \
                             --field="Chromium depot tools git repository:" "$DEPOT_TOOLS_URL" \
                             --field="Include Jenkins:CHK"            "$USE_JENKINS" \
                             --field="Where to store desktop icon:MDIR" "$MUPEL_DESKTOP_ICON_PATH" \
                             --field=":LBL" "" \
                             --field="<b>GIT access</b>:LBL" "" \
                             --field="EMail name:" "$GIT_USERNAME_OLD" \
                             --field="EMail address:" "$GIT_EMAIL_OLD" \
                             --field=":LBL" "" \
                             --field="\
     Copyright (C) 2015 Team KODI
     http://kodi.tv

     GNU General Public License, Version 3
     see http://www.gnu.org/licenses/:LBL" "" \
                             --field=":LBL" "" \
                             --center 2> /dev/null);
  if [ $? != 0 ];then
  {
    showWarningDialog_YesNo "Are you sure to exit install?";
    [ $? = 0 ] && exit_build 1;
  }
  else
    break;fi
}
done

KODI_SOURCE_URL="$(echo $install_values | awk -F '|' '{print $2}')";
SUPPORT_CEF="$(echo $install_values | awk -F '|' '{print $3}')";
CEF_SOURCE_URL="$(echo $install_values | awk -F '|' '{print $4}')";
SKIP_PRESENT="$(echo $install_values | awk -F '|' '{print $6}')";
USE_LINUX_X86_32="$(echo $install_values | awk -F '|' '{print $8}')";
USE_LINUX_X86_64="TRUE";
USE_MS_WINDOWS_32="$(echo $install_values | awk -F '|' '{print $9}')";
USE_MS_WINDOWS_64="$(echo $install_values | awk -F '|' '{print $10}')";
USE_MAC_OS_X_64="$(echo $install_values | awk -F '|' '{print $11}')";
USE_LINUX_RPBI="$(echo $install_values | awk -F '|' '{print $12}')";
USE_ANDROID_ARM="$(echo $install_values | awk -F '|' '{print $13}')";
USE_ANDROID_X86="$(echo $install_values | awk -F '|' '{print $14}')";
USE_IOS="$(echo $install_values | awk -F '|' '{print $15}')";
EMU_INSTALL_PREFIX="$(echo $install_values | awk -F '|' '{print $16}')";
DEPOT_TOOLS_URL="$(echo $install_values | awk -F '|' '{print $18}')";
USE_JENKINS="$(echo $install_values | awk -F '|' '{print $19}')";
MUPEL_DESKTOP_ICON_PATH="$(echo $install_values | awk -F '|' '{print $20}')";
GIT_USERNAME="$(echo $install_values | awk -F '|' '{print $23}')";
GIT_EMAIL="$(echo $install_values | awk -F '|' '{print $24}')";

if [ -z $GIT_NOT_SET ] && [[ $GIT_USERNAME != $GIT_USERNAME_OLD ]] || [[ $GIT_EMAIL != $GIT_EMAIL_OLD ]];then
{
  showWarningDialog_YesNo "\
Change of GIT User name / EMail

Name (new):
  <b>$GIT_USERNAME</b>
Name (old):
  <b>$GIT_USERNAME_OLD</b>

EMail (new):
  <b>$GIT_EMAIL</b>
EMail (old):
  <b>$GIT_EMAIL_OLD</b>

Confirm change of GIT values";
  if [ $? = 0 ];then
  {
    git config --global user.name "$GIT_USERNAME"
    git config --global user.email "$GIT_EMAIL"
  } fi
} fi

first_call=1;
while :; do
{
  if [ $first_call = 0 ];then
  {
    DEPOT_TOOLS_URL=$(showdialog --title="Download URL" --text="Set Chromium depot tools git repository to use:" --entry --width=640 --entry-text="$DEPOT_TOOLS_URL" 2> /dev/null);
    if [ $? != 0 ] || [ "$DEPOT_TOOLS_URL" == "" ];then
    {
      showWarningDialog_YesNo "Selection of Chromium depot tools git repository failed! \n\nTry again?";
      [ $? != 0 ] && exit_build 1;
      continue;
    } fi
  } fi
  first_call=0;

  git_entries=$(git ls-remote "$DEPOT_TOOLS_URL");
  ret=$?;
  if [ $ret != 0 ];then
  {
    handleErrorsCodes $ret "git" "$DEPOT_TOOLS_URL";
    showWarningDialog_YesNo "Check for git repository \"$DEPOT_TOOLS_URL\" failed! \n\nTry again?";
    [ $? != 0 ] && exit_build 1;
  }
  else
    break;fi
} done

first_call=1
while :; do
{
  if [ $first_call = 0 ];then
  {
    KODI_SOURCE_URL=$(showdialog --title="Download URL" --text="Set Kodi git repository to use:" --entry --width=640 --entry-text="$KODI_SOURCE_URL" 2> /dev/null);
    if [ $? != 0 ] || [ "$KODI_SOURCE_URL" == "" ];then
    {
      showWarningDialog_YesNo "Selection of Kodi git repository failed! \n\nTry again?";
      [ $? != 0 ] && exit_build 1;
      continue;
    } fi
  } fi
  first_call=0;

  git_entries=$(git ls-remote "$KODI_SOURCE_URL");
  ret=$?;
  if [ $ret != 0 ];then
  {
    handleErrorsCodes $ret "git" "$KODI_SOURCE_URL";
    showWarningDialog_YesNo "Check for git repository \"$KODI_SOURCE_URL\" failed! \n\nTry again?";
    [ $? != 0 ] && exit_build 1;
  }
  else
    break;fi
} done

targets=
git_entries=$(echo "$git_entries"| grep "refs/heads" | awk -F '/' '{print $3}');
for i in $git_entries; do
{
  if [[ $i == $KODI_SOURCE_BRANCH ]];then
    targets+="TRUE $i ";
  else
    targets+="FALSE $i ";fi
} done

while :; do
{
  KODI_SOURCE_BRANCH=$(showdialog --list \
                                  --title="Select branch" \
                                  --text="Select the branch from Kodi to use" \
                                  --radiolist \
                                  --column "Use" \
                                  --column "Type" \
                                  --print-column=2 \
                                  $targets \
                                  --width=400 --height=390 2> /dev/null);
  KODI_SOURCE_BRANCH=${KODI_SOURCE_BRANCH%|};
  if [ -z $KODI_SOURCE_BRANCH ];then
  {
    showWarningDialog_YesNo "No branch selected for Kodi! \n\nTry again?";
    [ $? != 0 ] && exit_build 1;
  }
  else
    break;fi
} done

if [ "$SUPPORT_CEF" = "TRUE" ];then
{
  first_call=1
  while :; do
  {
    if [ $first_call = 0 ];then
    {
      CEF_SOURCE_URL=$(showdialog --title="Download URL" --text="Set CEF git repository to use:" --entry --width=640 --entry-text="$CEF_SOURCE_URL" 2> /dev/null);
      if [ $? != 0 ] || [ "$CEF_SOURCE_URL" == "" ];then
      {
        showWarningDialog_YesNo "Selection of CEF git repository failed! \n\nTry again?";
        [ $? != 0 ] && exit_build 1;
        continue;
      } fi
    } fi
    first_call=0;

    git_entries=$(git ls-remote "$CEF_SOURCE_URL");
    ret=$?;
    if [ $ret != 0 ];then
    {
      handleErrorsCodes $ret "git" "$CEF_SOURCE_URL";
      showWarningDialog_YesNo "Check for git repository \"$CEF_SOURCE_URL\" failed! \n\nTry again?";
      [ $? != 0 ] && exit_build 1;
    }
    else
      break;fi
  } done

  targets=
  git_entries=$(echo "$git_entries"| grep "refs/heads" | awk -F '/' '{print $3}');
  for i in $git_entries; do
  {
    if [[ $i == $CEF_SOURCE_BRANCH ]];then
      targets+="TRUE $i ";
    else
      targets+="FALSE $i ";fi
  } done

  while :; do
  {
    CEF_SOURCE_BRANCH=$(showdialog --list \
                                    --title="Select branch" \
                                    --text="Select the branch from CEF to use" \
                                    --radiolist \
                                    --column "Use" \
                                    --column "Type" \
                                    --print-column=2 \
                                    $targets \
                                    --width=400 --height=390 2> /dev/null);
    CEF_SOURCE_BRANCH=${CEF_SOURCE_BRANCH%|};
    if [ -z $CEF_SOURCE_BRANCH ];then
    {
      showWarningDialog_YesNo "No branch selected for CEF! \n\nTry again?";
      [ $? != 0 ] && exit_build 1;
    }
    else
      break;fi
  } done
} fi

if [[ $USE_JENKINS = "TRUE" ]];then
  showdialog --title="Mupel - Jenkins install" \
             --width=520 --height=474 --html \
             --uri=${BASE_PATH}/icons/jenkins-holiday.png \
             --text="<i><span size=\"large\">Forget it I'm in holiday</span></i>" \
             --button=gtk-ok:0;fi

if [[ $USE_MS_WINDOWS_32 = "TRUE" ]] || [[ $USE_MS_WINDOWS_64 = "TRUE" ]];then
{
  if [ -f $BASE_PATH/tools/windows/install-systembuild-windows ];then
  {
    env_install_windows=$BASE_PATH/tools/windows/install-systembuild-windows;
  }
  else
  {
    while :; do
    {
      env_install_windows=$(showdialog --title="Select creation script for access to MS Windows system over ssh" \
                                       --file --file-filter="install-systembuild-windows *.install *.sh" \
                                       --width=700 --height=480 2> /dev/null);
      if [ $? != 0 ];then
      {
        showWarningDialog_YesNo "Selection of Microsoft Windows access creation script failed! \n\nTry again?";
        if [ $? != 0 ];then
        {
          showQuestionDialog "<b>Continue without Microsoft Windows access install?</b>";
          [ $? = 0 ] && break;
          exit_build 1;
        } fi
      }
      else
        break;fi
    } done
  } fi
} fi

if [[ $USE_MAC_OS_X_64 = "TRUE" ]];then
{
  if [ -f $BASE_PATH/tools/mac-osx/install-systembuild-mac-osx ];then
  {
    env_install_mac_os_x=$BASE_PATH/tools/mac-osx/install-systembuild-mac-osx;
  }
  else
  {
    while :; do
    {
      env_install_mac_os_x=$(showdialog --title="Select creation script for access to Mac OS X system over ssh" \
                                        --file --file-filter="install-systembuild-mac-osx *.install *.sh" \
                                        --width=700 --height=480 2> /dev/null);
      if [ $? != 0 ];then
      {
        showWarningDialog_YesNo "<b>Selection of Mac OS X access creation script failed!</b>\n\nTry again?";
        if [ $? != 0 ];then
        {
          showQuestionDialog "<b>Continue without Mac OS X access install?</b>";
          [ $? = 0 ] && break;
          exit_build 1;
        } fi
      }
      else
        break;fi
    } done
  } fi
} fi

if [[ $USE_ANDROID_X86 = "TRUE" ]] || [[ $USE_ANDROID_ARM = "TRUE" ]];then
{
  if [ -f $BASE_PATH/tools/android/install-systembuild-android ];then
  {
    env_install_android=$BASE_PATH/tools/android/install-systembuild-android;
  }
  else
  {
    showErrorDialog "<b>Required script $BASE_PATH/tools/android/install-systembuild-android for Android not present!</b>";
    exit_build 1;
  } fi
} fi

if [[ $USE_IOS = "TRUE" ]];then
{
  if [ -f $BASE_PATH/tools/ios/install-systembuild-ios ];then
  {
    env_install_ios=$BASE_PATH/tools/ios/install-systembuild-ios;
  }
  else
  {
    while :; do
    {
      env_install_ios=$(showdialog --title="Select creation script for access to iOS system over ssh" \
                                        --file --file-filter="install-systembuild-android *.install *.sh" \
                                        --width=700 --height=480 2> /dev/null);
      if [ $? != 0 ];then
      {
        showWarningDialog_YesNo "<b>Selection of iOS access creation script failed!</b>\n\nTry again?";
        if [ $? != 0 ];then
        {
          showQuestionDialog "<b>Continue without iOS access install?</b>";
          [ $? = 0 ] && break;
          exit_build 1;
        } fi
      }
      else
        break;fi
    } done
  } fi
} fi

if [ ! -d $BASE_PATH/build/depot_tools ];then
{
  handleGITLoad "$BASE_PATH/build" depot_tools $DEPOT_TOOLS_URL master |
    showdialog --title="Install" \
               --image="$BASE_PATH/icons/icon-install-128x128.png" \
               --progress --width=600 \
               --text="Install Chromium depot tools ..." \
               --pulsate --button=gtk-cancel:1 --auto-close > /dev/null;
} fi

INST_GIT_USER=$(echo $KODI_SOURCE_URL | tr ':' '/' | awk -F ''.com/'|'.org/'' '{print $2}' | awk -F '/' '{print $1}');
if [ ! -d $BASE_PATH/build/kodi-xbmc/kodi ] && [ $INST_GIT_USER != xbmc ];then
{
  [ ! -d $BASE_PATH/build/kodi-xbmc ] && mkdir $BASE_PATH/build/kodi-xbmc;
  handleGITLoad "$BASE_PATH/build/kodi-xbmc" kodi $KODI_SOURCE_DEFAULT_URL_BASE master |
    showdialog --title="Install" \
               --image="$BASE_PATH/icons/icon-install-128x128.png" \
               --progress --width=600 \
               --text="Load source repository '$KODI_SOURCE_DEFAULT_URL_BASE' ..." \
               --pulsate --button=gtk-cancel:1 --auto-close > /dev/null;
} fi

INST_GIT_USER=$(echo $CEF_SOURCE_URL | tr ':' '/' | awk -F ''.com/'|'.org/'' '{print $2}' | awk -F '/' '{print $1}');
if [ ! -d $BASE_PATH/build/cef-chromiumembedded/cef ] && [ $INST_GIT_USER != chromiumembedded ];then
{
  [ ! -d $BASE_PATH/build/cef-chromiumembedded ] && mkdir $BASE_PATH/build/cef-chromiumembedded;
  handleGITLoad "$BASE_PATH/build/cef-chromiumembedded" cef $CEF_SOURCE_URL_BASE master |
    showdialog --title="Install" \
               --image="$BASE_PATH/icons/icon-install-128x128.png" \
               --progress --width=600 \
               --text="Load source repository '$CEF_SOURCE_URL_BASE' ..." \
               --pulsate --button=gtk-cancel:1 --auto-close > /dev/null;
} fi

ADD_PATHS="$BASE_PATH/build/depot_tools";
PATH="$ADD_PATHS:$PATH";

saveConfigFile

. "$INSTALL_PREFIX/mupel.conf"

# Copy parts of system to install folder (normally always $HOME/.mupel).
# Is to allow parts on them to work without mupel build folder, where this file
# comes from (e.g. to use emulation also without them).
mkdir -p $INSTALL_PREFIX/tools
cp -f $BASE_PATH/tools/tool_functions $INSTALL_PREFIX/tools
cp -f $BASE_PATH/tools/yad-mupel-$(uname -m) $INSTALL_PREFIX/tools
cp -rf $BASE_PATH/icons $INSTALL_PREFIX

##
# Create chroot build environment
#

if [[ $USE_LINUX_X86_32 = "TRUE" ]] &&
   [ `handleSkipPresent $LINUX_X86_32_INSTALLED "Linux x86-32"` = 0 ] ||
   [[ $USE_LINUX_X86_64 = "TRUE" ]] &&
   [ `handleSkipPresent $LINUX_X86_64_INSTALLED "Linux x86-64"` = 0 ];then
{
  create_chroot_build_environment;
  loadConfigFile
} fi
if [[ $USE_LINUX_RPBI = "TRUE" ]] &&
   [ `handleSkipPresent $LINUX_RPBI_INSTALLED "Linux Raspberry PI"` = 0 ];then
{
  create_chroot_build_environment_arm;
  loadConfigFile
} fi
if [[ $USE_MS_WINDOWS_32 = "TRUE" ]] ||
   [[ $USE_MS_WINDOWS_64 = "TRUE" ]] &&
   [ `handleSkipPresent $MS_WINDOWS_64_INSTALLED "MS Windows"` = 0 ];then
{
  while :; do
  {
    if [[ -n $env_install_windows ]];then
    {
      bash "$env_install_windows"
      ret=$?
      loadConfigFile
    }
    else
      ret=0;fi
    if [[ $ret != 0 ]];then
    {
      showWarningDialog_YesNo "Creation of Windows system failed! \n\nTry again?";
      if [ $? != 0 ];then
      {
        showQuestionDialog "<b>Continue without Windows system install?</b>";
        [ $? = 0 ] && break;
        exit_build 1;
      } fi
    }
    else
      break;fi
  } done
} fi

if [[ $USE_MAC_OS_X_64 = "TRUE" ]] &&
   [ `handleSkipPresent $MAC_OS_X_64_INSTALLED "Mac OS X"` = 0 ];then
{
  while :; do
  {
    if [[ -n $env_install_mac_os_x ]];then
    {
      bash "$env_install_mac_os_x"
      ret=$?
      loadConfigFile
    }
    else
      ret=0;fi
    if [[ $ret != 0 ]];then
    {
      showWarningDialog_YesNo "Creation of Mac OS X system failed! \n\nTry again?";
      if [ $? != 0 ];then
      {
        showQuestionDialog "<b>Continue without Mac OS X system install?</b>";
        [ $? = 0 ] && break;
        exit_build 1;
      } fi
    }
    else
      break;fi
  } done
} fi

if [[ $USE_ANDROID_X86 = "TRUE" ]] ||
   [[ $USE_ANDROID_ARM = "TRUE" ]] &&
   [ `handleSkipPresent $ANDROID_X86_INSTALLED "Android"` = 0 ];then
{
  while :; do
  {
    if [[ -n $env_install_android ]];then
    {
      bash "$env_install_android"
      ret=$?
      loadConfigFile
    }
    else
      ret=0;fi
    if [[ $ret != 0 ]];then
    {
      showWarningDialog_YesNo "Creation of Android system failed! \n\nTry again?";
      if [ $? != 0 ];then
      {
        showQuestionDialog "<b>Continue without Android system install?</b>";
        [ $? = 0 ] && break;
        exit_build 1;
      } fi
    }
    else
      break;fi
  } done
} fi

if [[ $USE_IOS = "TRUE" ]] &&
   [ `handleSkipPresent $IOS_INSTALLED "iOS"` = 0 ];then
{
  while :; do
  {
    if [[ -n $env_install_ios ]];then
    {
      bash "$env_install_ios"
      ret=$?
      loadConfigFile
    }
    else
      ret=0;fi
    if [[ $ret != 0 ]];then
    {
      showWarningDialog_YesNo "Creation of iOS system failed! \n\nTry again?";
      if [ $? != 0 ];then
      {
        showQuestionDialog "<b>Continue without iOS system install?</b>";
        [ $? = 0 ] && break;
        exit_build 1;
      } fi
    }
    else
      break;fi
  } done
} fi

ICON_NAME=mupel
TMP_DIR=`mktemp --directory`
DESKTOP_FILE=$TMP_DIR/mupel.desktop
cat > $DESKTOP_FILE << EOF
#!/usr/bin/xdg-open
[Desktop Entry]
Comment[de_DE]=Starte Mupel
Comment=Start Mupel
Exec=$BASE_PATH/mupel
GenericName[de_DE]=
GenericName=
Icon=$ICON_NAME.png
MimeType=
Name=Mupel
Keywords=git;kodi;cef;chromium
Path=$BASE_PATH
StartupNotify=true
Terminal=false
TerminalOptions=
Type=Application
Categories=Development;RevisionControl
Version=1.0
X-DBUS-ServiceName=
X-DBUS-StartupType=
X-KDE-SubstituteUID=false
X-KDE-Username=
X-MultipleArgs=false
EOF
chmod 775 $DESKTOP_FILE

xdg-desktop-menu  install --novendor --noupdate $DESKTOP_FILE
xdg-icon-resource install --novendor --size  32 "$BASE_PATH/icons/icon-mupel-32x32.png"   $ICON_NAME
handleErrorsCodes $? "xdg-icon-resource" "icon-mupel-32x32.png";
xdg-icon-resource install --novendor --size  48 "$BASE_PATH/icons/icon-mupel-48x48.png"   $ICON_NAME
handleErrorsCodes $? "xdg-icon-resource" "icon-mupel-48x48.png";
xdg-icon-resource install --novendor --size  64 "$BASE_PATH/icons/icon-mupel-64x64.png"   $ICON_NAME
handleErrorsCodes $? "xdg-icon-resource" "icon-mupel-64x64.png";
xdg-icon-resource install --novendor --size 128 "$BASE_PATH/icons/icon-mupel-128x128.png" $ICON_NAME
handleErrorsCodes $? "xdg-icon-resource" "icon-mupel-128x128.png";
xdg-desktop-menu  forceupdate

if [ ! -z $MUPEL_DESKTOP_ICON_PATH ];then
  cp $DESKTOP_FILE $MUPEL_DESKTOP_ICON_PATH;fi

rm $DESKTOP_FILE
rm -R $TMP_DIR

# Let the user know what we did
showdialog --title="Automatic build environment" \
           --image="$BASE_PATH/icons/icon-info-128x128.png" \
           --image-on-top --form \
           --button=gtk-ok:0 \
           --width=830 --show-uri --editable \
           --text-info \
           --text="<tt>
     <i><span size=\"large\">Successfully installed Mupel system for kodi</span></i>
_________________________________________________________________________________________

     Now you can do \"<i>Èngem e' Mupel mâchen</i>\" (Luxembourgish) and means
     \"Someone squeezing the cheeks\" in respect to Jenkins the best multi platform
     background system on world.
_________________________________________________________________________________________

     Copyright (C) 2015 Team KODI (Alwin Esch)
     <u><span foreground=\"blue\">http://kodi.tv</span></u>

     GNU General Public License, Version 3
     see <u><span foreground=\"blue\">http://www.gnu.org/licenses/</span></u></tt>" 2> /dev/null

exit_build 0
